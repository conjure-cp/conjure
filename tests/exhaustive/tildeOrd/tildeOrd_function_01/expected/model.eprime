language ESSENCE' 1.0

find a_Function1DPartial_Flags: matrix indexed by [int(1..2)] of bool
find a_Function1DPartial_Values: matrix indexed by [int(1..2)] of bool
find b_Function1DPartial_Flags: matrix indexed by [int(1..2)] of bool
find b_Function1DPartial_Values: matrix indexed by [int(1..2)] of bool
branching on
    [a_Function1DPartial_Flags, a_Function1DPartial_Values, b_Function1DPartial_Flags, b_Function1DPartial_Values]
such that
    or([a_Function1DPartial_Flags[q9] /\
        (sum([toInt(a_Function1DPartial_Flags[q30]) *
              catchUndef(toInt(q30 = q9 /\ a_Function1DPartial_Values[q30] = a_Function1DPartial_Values[q9]), 0)
                  | q30 : int(1..2)])
         <
         sum([toInt(b_Function1DPartial_Flags[q32]) *
              catchUndef(toInt(q32 = q9 /\ b_Function1DPartial_Values[q32] = a_Function1DPartial_Values[q9]), 0)
                  | q32 : int(1..2)])
         /\
         (and([a_Function1DPartial_Flags[q33] /\
               (q33 < q9 \/ q33 = q9 /\ a_Function1DPartial_Values[q33] < a_Function1DPartial_Values[q9])
               ->
               sum([toInt(a_Function1DPartial_Flags[q42]) *
                    catchUndef(toInt(q42 = q33 /\ a_Function1DPartial_Values[q42] = a_Function1DPartial_Values[q33]), 0)
                        | q42 : int(1..2)])
               =
               sum([toInt(b_Function1DPartial_Flags[q44]) *
                    catchUndef(toInt(q44 = q33 /\ b_Function1DPartial_Values[q44] = a_Function1DPartial_Values[q33]), 0)
                        | q44 : int(1..2)])
                   | q33 : int(1..2)])
          /\
          and([and([b_Function1DPartial_Flags[q34],
                    !or([a_Function1DPartial_Flags[q40] /\
                         (q40 = q34 /\ a_Function1DPartial_Values[q40] = b_Function1DPartial_Values[q34])
                             | q40 : int(1..2)]),
                    q34 < q9 \/ q34 = q9 /\ b_Function1DPartial_Values[q34] < a_Function1DPartial_Values[q9];
                        int(1..3)])
               ->
               sum([toInt(a_Function1DPartial_Flags[q36]) *
                    catchUndef(toInt(q36 = q34 /\ a_Function1DPartial_Values[q36] = b_Function1DPartial_Values[q34]), 0)
                        | q36 : int(1..2)])
               =
               sum([toInt(b_Function1DPartial_Flags[q38]) *
                    catchUndef(toInt(q38 = q34 /\ b_Function1DPartial_Values[q38] = b_Function1DPartial_Values[q34]), 0)
                        | q38 : int(1..2)])
                   | q34 : int(1..2)])))
            | q9 : int(1..2)])
    \/
    or([b_Function1DPartial_Flags[q10] /\
        !or([a_Function1DPartial_Flags[q28] /\
             (q28 = q10 /\ a_Function1DPartial_Values[q28] = b_Function1DPartial_Values[q10])
                 | q28 : int(1..2)])
        /\
        (sum([toInt(a_Function1DPartial_Flags[q12]) *
              catchUndef(toInt(q12 = q10 /\ a_Function1DPartial_Values[q12] = b_Function1DPartial_Values[q10]), 0)
                  | q12 : int(1..2)])
         <
         sum([toInt(b_Function1DPartial_Flags[q14]) *
              catchUndef(toInt(q14 = q10 /\ b_Function1DPartial_Values[q14] = b_Function1DPartial_Values[q10]), 0)
                  | q14 : int(1..2)])
         /\
         (and([a_Function1DPartial_Flags[q15] /\
               (q15 < q10 \/ q15 = q10 /\ a_Function1DPartial_Values[q15] < b_Function1DPartial_Values[q10])
               ->
               sum([toInt(a_Function1DPartial_Flags[q24]) *
                    catchUndef(toInt(q24 = q15 /\ a_Function1DPartial_Values[q24] = a_Function1DPartial_Values[q15]), 0)
                        | q24 : int(1..2)])
               =
               sum([toInt(b_Function1DPartial_Flags[q26]) *
                    catchUndef(toInt(q26 = q15 /\ b_Function1DPartial_Values[q26] = a_Function1DPartial_Values[q15]), 0)
                        | q26 : int(1..2)])
                   | q15 : int(1..2)])
          /\
          and([and([b_Function1DPartial_Flags[q16],
                    !or([a_Function1DPartial_Flags[q22] /\
                         (q22 = q16 /\ a_Function1DPartial_Values[q22] = b_Function1DPartial_Values[q16])
                             | q22 : int(1..2)]),
                    q16 < q10 \/ q16 = q10 /\ b_Function1DPartial_Values[q16] < b_Function1DPartial_Values[q10];
                        int(1..3)])
               ->
               sum([toInt(a_Function1DPartial_Flags[q18]) *
                    catchUndef(toInt(q18 = q16 /\ a_Function1DPartial_Values[q18] = b_Function1DPartial_Values[q16]), 0)
                        | q18 : int(1..2)])
               =
               sum([toInt(b_Function1DPartial_Flags[q20]) *
                    catchUndef(toInt(q20 = q16 /\ b_Function1DPartial_Values[q20] = b_Function1DPartial_Values[q16]), 0)
                        | q20 : int(1..2)])
                   | q16 : int(1..2)])))
            | q10 : int(1..2)]),
    and([a_Function1DPartial_Flags[q1] = false -> a_Function1DPartial_Values[q1] = false | q1 : int(1..2)]),
    and([b_Function1DPartial_Flags[q4] = false -> b_Function1DPartial_Values[q4] = false | q4 : int(1..2)])

