language ESSENCE' 1.0

find a_MOccurrence: matrix indexed by [int(1..2)] of int(0..3)
find b_MOccurrence: matrix indexed by [int(1..2)] of int(0..3)
branching on [a_MOccurrence, b_MOccurrence]
such that
    or([a_MOccurrence[q11] > 0 /\
        (a_MOccurrence[q11] < b_MOccurrence[q11] /\
         (and([a_MOccurrence[q7] > 0 -> a_MOccurrence[q7] = b_MOccurrence[q7] | q7 : int(1..2), q7 < q11]) /\
          and([b_MOccurrence[q8] > 0 /\ !or([a_MOccurrence[q6] > 0 /\ q6 = q8 | q6 : int(1..2)]) ->
               a_MOccurrence[q8] = b_MOccurrence[q8]
                   | q8 : int(1..2), q8 < q11])))
            | q11 : int(1..2)])
    \/
    or([b_MOccurrence[q12] > 0 /\ !or([a_MOccurrence[q10] > 0 /\ q10 = q12 | q10 : int(1..2)]) /\
        (a_MOccurrence[q12] < b_MOccurrence[q12] /\
         (and([a_MOccurrence[q7] > 0 -> a_MOccurrence[q7] = b_MOccurrence[q7] | q7 : int(1..2), q7 < q12]) /\
          and([b_MOccurrence[q8] > 0 /\ !or([a_MOccurrence[q6] > 0 /\ q6 = q8 | q6 : int(1..2)]) ->
               a_MOccurrence[q8] = b_MOccurrence[q8]
                   | q8 : int(1..2), q8 < q12])))
            | q12 : int(1..2)]),
    3 = sum([a_MOccurrence[q1] | q1 : int(1..2)]),
    3 = sum([b_MOccurrence[q2] | q2 : int(1..2)])

