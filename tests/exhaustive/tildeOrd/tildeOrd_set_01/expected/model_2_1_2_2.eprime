language ESSENCE' 1.0

find a_Occurrence: matrix indexed by [int(1..4)] of bool
find b_Explicit: matrix indexed by [int(1..3)] of int(1..4)
find b_Occurrence: matrix indexed by [int(1..4)] of bool
branching on [a_Occurrence, b_Occurrence, b_Explicit]
such that
    or([a_Occurrence[q10] /\
        (toInt(a_Occurrence[q10]) < toInt(or([b_Explicit[q23] = q10 | q23 : int(1..3)])) /\
         (and([a_Occurrence[q11] -> toInt(a_Occurrence[q11]) = toInt(or([b_Explicit[q29] = q11 | q29 : int(1..3)]))
                   | q11 : int(1..4), q11 < q10])
          /\
          and([!or([a_Occurrence[q27] /\ q27 = b_Explicit[q24] | q27 : int(1..4)]) /\ b_Explicit[q24] < q10 ->
               toInt(a_Occurrence[b_Explicit[q24]]) = toInt(or([b_Explicit[q26] = b_Explicit[q24] | q26 : int(1..3)]))
                   | q24 : int(1..3)])))
            | q10 : int(1..4)])
    \/
    or([!or([a_Occurrence[q21] /\ q21 = b_Explicit[q12] | q21 : int(1..4)]) /\
        (toInt(a_Occurrence[b_Explicit[q12]]) < toInt(or([b_Explicit[q14] = b_Explicit[q12] | q14 : int(1..3)])) /\
         (and([a_Occurrence[q11] /\ q11 < b_Explicit[q12] ->
               toInt(a_Occurrence[q11]) = toInt(or([b_Explicit[q20] = q11 | q20 : int(1..3)]))
                   | q11 : int(1..4)])
          /\
          and([!or([a_Occurrence[q18] /\ q18 = b_Explicit[q15] | q18 : int(1..4)]) /\ b_Explicit[q15] < b_Explicit[q12]
               ->
               toInt(a_Occurrence[b_Explicit[q15]]) = toInt(or([b_Explicit[q17] = b_Explicit[q15] | q17 : int(1..3)]))
                   | q15 : int(1..3)])))
            | q12 : int(1..3)]),
    3 = sum([toInt(a_Occurrence[q1]) | q1 : int(1..4)]),
    and([b_Explicit[q2] < b_Explicit[q2 + 1] | q2 : int(1..2)]),
    3 = sum([toInt(b_Occurrence[q4]) | q4 : int(1..4)]),
    and([b_Occurrence[q5] -> or([b_Explicit[q7] = q5 | q7 : int(1..3)]) | q5 : int(1..4)]),
    and([b_Occurrence[b_Explicit[q9]] | q9 : int(1..3)])

