language ESSENCE' 1.0

find a_Occurrence: matrix indexed by [int(1..4)] of bool
find a_Explicit: matrix indexed by [int(1..3)] of int(1..4)
find b_Explicit: matrix indexed by [int(1..3)] of int(1..4)
branching on [a_Explicit, a_Occurrence, b_Explicit]
such that
    or([a_Occurrence[q11] /\
        (toInt(a_Occurrence[q11]) < toInt(or([b_Explicit[q24] = q11 | q24 : int(1..3)])) /\
         (and([a_Occurrence[q12] -> toInt(a_Occurrence[q12]) = toInt(or([b_Explicit[q30] = q12 | q30 : int(1..3)]))
                   | q12 : int(1..4), q12 < q11])
          /\
          and([!or([a_Occurrence[q28] /\ q28 = b_Explicit[q25] | q28 : int(1..4)]) /\ b_Explicit[q25] < q11 ->
               toInt(a_Occurrence[b_Explicit[q25]]) = toInt(or([b_Explicit[q27] = b_Explicit[q25] | q27 : int(1..3)]))
                   | q25 : int(1..3)])))
            | q11 : int(1..4)])
    \/
    or([!or([a_Occurrence[q22] /\ q22 = b_Explicit[q13] | q22 : int(1..4)]) /\
        (toInt(a_Occurrence[b_Explicit[q13]]) < toInt(or([b_Explicit[q15] = b_Explicit[q13] | q15 : int(1..3)])) /\
         (and([a_Occurrence[q12] /\ q12 < b_Explicit[q13] ->
               toInt(a_Occurrence[q12]) = toInt(or([b_Explicit[q21] = q12 | q21 : int(1..3)]))
                   | q12 : int(1..4)])
          /\
          and([!or([a_Occurrence[q19] /\ q19 = b_Explicit[q16] | q19 : int(1..4)]) /\ b_Explicit[q16] < b_Explicit[q13]
               ->
               toInt(a_Occurrence[b_Explicit[q16]]) = toInt(or([b_Explicit[q18] = b_Explicit[q16] | q18 : int(1..3)]))
                   | q16 : int(1..3)])))
            | q13 : int(1..3)]),
    3 = sum([toInt(a_Occurrence[q1]) | q1 : int(1..4)]),
    and([b_Explicit[q2] < b_Explicit[q2 + 1] | q2 : int(1..2)]),
    and([a_Explicit[q4] < a_Explicit[q4 + 1] | q4 : int(1..2)]),
    and([a_Occurrence[a_Explicit[q7]] | q7 : int(1..3)]),
    and([a_Occurrence[q8] -> or([a_Explicit[q10] = q8 | q10 : int(1..3)]) | q8 : int(1..4)])

