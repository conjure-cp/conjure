language ESSENCE' 1.0

find a_Occurrence: matrix indexed by [int(1..4)] of bool
find b_Explicit: matrix indexed by [int(1..3)] of int(1..4)
branching on [a_Occurrence, b_Explicit]
such that
    or([a_Occurrence[q4] /\
        (toInt(a_Occurrence[q4]) < toInt(or([b_Explicit[q17] = q4 | q17 : int(1..3)])) /\
         (and([a_Occurrence[q5] -> toInt(a_Occurrence[q5]) = toInt(or([b_Explicit[q23] = q5 | q23 : int(1..3)]))
                   | q5 : int(1..4), q5 < q4])
          /\
          and([!or([a_Occurrence[q21] /\ q21 = b_Explicit[q18] | q21 : int(1..4)]) /\ b_Explicit[q18] < q4 ->
               toInt(a_Occurrence[b_Explicit[q18]]) = toInt(or([b_Explicit[q20] = b_Explicit[q18] | q20 : int(1..3)]))
                   | q18 : int(1..3)])))
            | q4 : int(1..4)])
    \/
    or([!or([a_Occurrence[q15] /\ q15 = b_Explicit[q6] | q15 : int(1..4)]) /\
        (toInt(a_Occurrence[b_Explicit[q6]]) < toInt(or([b_Explicit[q8] = b_Explicit[q6] | q8 : int(1..3)])) /\
         (and([a_Occurrence[q5] /\ q5 < b_Explicit[q6] ->
               toInt(a_Occurrence[q5]) = toInt(or([b_Explicit[q14] = q5 | q14 : int(1..3)]))
                   | q5 : int(1..4)])
          /\
          and([!or([a_Occurrence[q12] /\ q12 = b_Explicit[q9] | q12 : int(1..4)]) /\ b_Explicit[q9] < b_Explicit[q6] ->
               toInt(a_Occurrence[b_Explicit[q9]]) = toInt(or([b_Explicit[q11] = b_Explicit[q9] | q11 : int(1..3)]))
                   | q9 : int(1..3)])))
            | q6 : int(1..3)]),
    3 = sum([toInt(a_Occurrence[q1]) | q1 : int(1..4)]),
    and([b_Explicit[q2] < b_Explicit[q2 + 1] | q2 : int(1..2)])

