language ESSENCE' 1.0

given n: int
find flags: matrix indexed by [int(1..n)] of bool
find val: matrix indexed by [int(1..n)] of int(1..3)
find x: int(n)
find conjure_aux1_ExplicitVarSizeWithDummy: matrix indexed by [int(1..3)] of int(1..4)
branching on [flags, val, x]
such that
    and([conjure_aux1_ExplicitVarSizeWithDummy[q4] < conjure_aux1_ExplicitVarSizeWithDummy[q4 + 1] \/
         conjure_aux1_ExplicitVarSizeWithDummy[q4] = 4
             | q4 : int(1..2)]),
    and([conjure_aux1_ExplicitVarSizeWithDummy[q5] = 4 -> conjure_aux1_ExplicitVarSizeWithDummy[q5 + 1] = 4
             | q5 : int(1..2)]),
    and([flags[j] ->
         or([conjure_aux1_ExplicitVarSizeWithDummy[q10] != 4 /\ conjure_aux1_ExplicitVarSizeWithDummy[q10] = val[j]
                 | q10 : int(1..3)])
             | j : int(1..n)]),
    and([conjure_aux1_ExplicitVarSizeWithDummy[q8] != 4 ->
         or([flags[j] /\ conjure_aux1_ExplicitVarSizeWithDummy[q8] = val[j] | j : int(1..n)])
             | q8 : int(1..3)]),
    n =
    sum([toInt(conjure_aux1_ExplicitVarSizeWithDummy[q11] != 4) *
         catchUndef(conjure_aux1_ExplicitVarSizeWithDummy[q11], 0)
             | q11 : int(1..3)]),
    and([flags[i] | i : int(1..n)]),
    and([val[i] <= val[i + 1] | i : int(1..n - 1)])

