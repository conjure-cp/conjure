language ESSENCE' 1.0

given n: int
find flags: matrix indexed by [int(1..n)] of bool
find val: matrix indexed by [int(1..n)] of int(1..3)
find x: int(n)
find conjure_aux1_ExplicitVarSizeWithMarker_Marker: int(0..3)
find conjure_aux1_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..3)] of int(1..3)
branching on [flags, val, x]
such that
    and([q4 + 1 <= conjure_aux1_ExplicitVarSizeWithMarker_Marker ->
         conjure_aux1_ExplicitVarSizeWithMarker_Values[q4] < conjure_aux1_ExplicitVarSizeWithMarker_Values[q4 + 1]
             | q4 : int(1..2)]),
    and([q5 > conjure_aux1_ExplicitVarSizeWithMarker_Marker -> conjure_aux1_ExplicitVarSizeWithMarker_Values[q5] = 1
             | q5 : int(1..3)]),
    and([flags[j] ->
         or([q9 <= conjure_aux1_ExplicitVarSizeWithMarker_Marker /\
             conjure_aux1_ExplicitVarSizeWithMarker_Values[q9] = val[j]
                 | q9 : int(1..3)])
             | j : int(1..n)]),
    and([q7 <= conjure_aux1_ExplicitVarSizeWithMarker_Marker ->
         or([flags[j] /\ conjure_aux1_ExplicitVarSizeWithMarker_Values[q7] = val[j] | j : int(1..n)])
             | q7 : int(1..3)]),
    n =
    sum([toInt(q10 <= conjure_aux1_ExplicitVarSizeWithMarker_Marker) *
         catchUndef(conjure_aux1_ExplicitVarSizeWithMarker_Values[q10], 0)
             | q10 : int(1..3)]),
    and([flags[i] | i : int(1..n)]),
    and([val[i] <= val[i + 1] | i : int(1..n - 1)])

