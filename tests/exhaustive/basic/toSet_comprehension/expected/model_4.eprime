language ESSENCE' 1.0

given n: int
find flags: matrix indexed by [int(1..n)] of bool
find val: matrix indexed by [int(1..n)] of int(1..3)
find x: int(n)
find conjure_aux1_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..3)] of bool
find conjure_aux1_ExplicitVarSizeWithFlags_Values: matrix indexed by [int(1..3)] of int(1..3)
branching on [flags, val, x]
such that
    and([conjure_aux1_ExplicitVarSizeWithFlags_Flags[q4 + 1] ->
         conjure_aux1_ExplicitVarSizeWithFlags_Values[q4] < conjure_aux1_ExplicitVarSizeWithFlags_Values[q4 + 1]
             | q4 : int(1..2)]),
    and([conjure_aux1_ExplicitVarSizeWithFlags_Flags[q5] = false -> conjure_aux1_ExplicitVarSizeWithFlags_Values[q5] = 1
             | q5 : int(1..3)]),
    and([conjure_aux1_ExplicitVarSizeWithFlags_Flags[q6 + 1] -> conjure_aux1_ExplicitVarSizeWithFlags_Flags[q6]
             | q6 : int(1..2)]),
    and([flags[j] ->
         or([conjure_aux1_ExplicitVarSizeWithFlags_Flags[q11] /\
             conjure_aux1_ExplicitVarSizeWithFlags_Values[q11] = val[j]
                 | q11 : int(1..3)])
             | j : int(1..n)]),
    and([conjure_aux1_ExplicitVarSizeWithFlags_Flags[q9] ->
         or([flags[j] /\ conjure_aux1_ExplicitVarSizeWithFlags_Values[q9] = val[j] | j : int(1..n)])
             | q9 : int(1..3)]),
    n =
    sum([toInt(conjure_aux1_ExplicitVarSizeWithFlags_Flags[q12]) *
         catchUndef(conjure_aux1_ExplicitVarSizeWithFlags_Values[q12], 0)
             | q12 : int(1..3)]),
    and([flags[i] | i : int(1..n)]),
    and([val[i] <= val[i + 1] | i : int(1..n - 1)])

