language ESSENCE' 1.0

find b_ExplicitBounded_Length: int(0..2)
find b_ExplicitBounded_Values: matrix indexed by [int(1..2)] of int(1..3)
find conjure_aux1_ExplicitBounded_Length: int(0..2)
find conjure_aux1_ExplicitBounded_Values: matrix indexed by [int(1..2)] of int(1..3)
branching on [b_ExplicitBounded_Length, b_ExplicitBounded_Values]
such that
    and([q4 > conjure_aux1_ExplicitBounded_Length -> conjure_aux1_ExplicitBounded_Values[q4] = 1 | q4 : int(1..2)]),
    conjure_aux1_ExplicitBounded_Length <= 2,
    2 <= conjure_aux1_ExplicitBounded_Length ->
    conjure_aux1_ExplicitBounded_Values[1] < conjure_aux1_ExplicitBounded_Values[2] /\
    1 <= conjure_aux1_ExplicitBounded_Length
    /\ 2 <= conjure_aux1_ExplicitBounded_Length,
    b_ExplicitBounded_Length = conjure_aux1_ExplicitBounded_Length,
    and([q6 <= b_ExplicitBounded_Length ->
         and([b_ExplicitBounded_Values[q6] =
              sum([toInt(1 = conjure_aux1_ExplicitBounded_Values[q6]),
                   toInt(2 = conjure_aux1_ExplicitBounded_Values[q6]),
                   toInt(3 = conjure_aux1_ExplicitBounded_Values[q6]) * 2;
                       int(1..3)]),
              conjure_aux1_ExplicitBounded_Values[q6] <= 3, q6 <= conjure_aux1_ExplicitBounded_Length;
                  int(1..3)])
             | q6 : int(1..2)]),
    and([q1 > b_ExplicitBounded_Length -> b_ExplicitBounded_Values[q1] = 1 | q1 : int(1..2)]),
    b_ExplicitBounded_Length <= 2

