language ESSENCE' 1.0

find f_ExplicitBounded_Length: int(0..2)
find f_ExplicitBounded_Values_1: matrix indexed by [int(1..2)] of int(1..2)
find f_ExplicitBounded_Values_2: matrix indexed by [int(1..2)] of int(1..2)
branching on [f_ExplicitBounded_Length, f_ExplicitBounded_Values_1, f_ExplicitBounded_Values_2]
such that
    and([q1 > f_ExplicitBounded_Length -> f_ExplicitBounded_Values_1[q1] = 1 /\ f_ExplicitBounded_Values_2[q1] = 1
             | q1 : int(1..2)]),
    f_ExplicitBounded_Length <= 2,
    and([q2 <= f_ExplicitBounded_Length /\ q3 <= f_ExplicitBounded_Length ->
         f_ExplicitBounded_Values_1[q2] != f_ExplicitBounded_Values_1[q3] \/
         f_ExplicitBounded_Values_2[q2] != f_ExplicitBounded_Values_2[q3]
             | q2 : int(1..2), q3 : int(1..2), q2 < q3])

