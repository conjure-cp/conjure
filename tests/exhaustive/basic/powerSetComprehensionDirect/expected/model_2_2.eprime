language ESSENCE' 1.0

given n: int
given a: int
given b: int
find x_ExplicitVarSizeWithDummy: matrix indexed by [int(1..1 + (b - a))] of int(a..b + 1)
branching on [x_ExplicitVarSizeWithDummy]
such that
    and([and([or([x_ExplicitVarSizeWithDummy[q12] != b + 1 /\
                  x_ExplicitVarSizeWithDummy[q12] = t_ExplicitVarSizeWithDummy[q10]
                      | q12 : int(1..1 + (b - a))])
                  | q10 : int(1..1 + (b - a)), t_ExplicitVarSizeWithDummy[q10] != b + 1])
         ->
         sum([t_ExplicitVarSizeWithDummy[q13] | q13 : int(1..1 + (b - a)), t_ExplicitVarSizeWithDummy[q13] != b + 1]) <=
         6   | t_ExplicitVarSizeWithDummy : matrix indexed by [int(1..1 + (b - a))] of int(a..b + 1),
               and([t_ExplicitVarSizeWithDummy[q5] < t_ExplicitVarSizeWithDummy[q5 + 1] \/
                    t_ExplicitVarSizeWithDummy[q5] = b + 1
                        | q5 : int(1..1 + (b - a) - 1)]),
               and([t_ExplicitVarSizeWithDummy[q6] = b + 1 -> t_ExplicitVarSizeWithDummy[q6 + 1] = b + 1
                        | q6 : int(1..1 + (b - a) - 1)])]),
    and([x_ExplicitVarSizeWithDummy[q1] < x_ExplicitVarSizeWithDummy[q1 + 1] \/ x_ExplicitVarSizeWithDummy[q1] = b + 1
             | q1 : int(1..1 + (b - a) - 1)]),
    and([x_ExplicitVarSizeWithDummy[q2] = b + 1 -> x_ExplicitVarSizeWithDummy[q2 + 1] = b + 1
             | q2 : int(1..1 + (b - a) - 1)]),
    n <= sum([toInt(x_ExplicitVarSizeWithDummy[q3] != b + 1) | q3 : int(1..1 + (b - a))])

