language ESSENCE' 1.0

find x_ExplicitVarSizeWithMarkerR3_Marker: int(0..3)
find x_ExplicitVarSizeWithMarkerR3_Values_1: matrix indexed by [int(1..3)] of int(1..2)
find x_ExplicitVarSizeWithMarkerR3_Values_2_Explicit: matrix indexed by [int(1..3), int(1..2)] of int(1..3)
branching on
    [x_ExplicitVarSizeWithMarkerR3_Marker, x_ExplicitVarSizeWithMarkerR3_Values_1,
     x_ExplicitVarSizeWithMarkerR3_Values_2_Explicit]
such that
    and([q1 + 1 <= x_ExplicitVarSizeWithMarkerR3_Marker ->
         flatten([[x_ExplicitVarSizeWithMarkerR3_Values_1[q1]; int(1)],
                  [x_ExplicitVarSizeWithMarkerR3_Values_2_Explicit[q1, q6] | q6 : int(1..2)];
                      int(1..2)])
         <lex
         flatten([[x_ExplicitVarSizeWithMarkerR3_Values_1[q1 + 1]; int(1)],
                  [x_ExplicitVarSizeWithMarkerR3_Values_2_Explicit[q1 + 1, q7] | q7 : int(1..2)];
                      int(1..2)])
             | q1 : int(1..2)]),
    and([q2 > x_ExplicitVarSizeWithMarkerR3_Marker ->
         x_ExplicitVarSizeWithMarkerR3_Values_1[q2] = 1 /\
         and([x_ExplicitVarSizeWithMarkerR3_Values_2_Explicit[q2, q8] = 1 | q8 : int(1..2)])
             | q2 : int(1..3)]),
    2 <= x_ExplicitVarSizeWithMarkerR3_Marker,
    x_ExplicitVarSizeWithMarkerR3_Marker <= 3,
    and([q3 <= x_ExplicitVarSizeWithMarkerR3_Marker ->
         x_ExplicitVarSizeWithMarkerR3_Values_2_Explicit[q3, 1] < x_ExplicitVarSizeWithMarkerR3_Values_2_Explicit[q3, 2]
             | q3 : int(1..3)])

