language ESSENCE' 1.0

find x_ExplicitVarSizeWithFlagsR2_Flags: matrix indexed by [int(1..3)] of bool
find x_ExplicitVarSizeWithFlagsR2_Values_1: matrix indexed by [int(1..3)] of int(1..2)
find x_ExplicitVarSizeWithFlagsR2_Values_2_Occurrence: matrix indexed by [int(1..3), int(1..3)] of bool
branching on
    [x_ExplicitVarSizeWithFlagsR2_Flags, x_ExplicitVarSizeWithFlagsR2_Values_1,
     x_ExplicitVarSizeWithFlagsR2_Values_2_Occurrence]
such that
    and([x_ExplicitVarSizeWithFlagsR2_Flags[q1 + 1] ->
         flatten([[x_ExplicitVarSizeWithFlagsR2_Values_1[q1]; int(1)],
                  [-toInt(x_ExplicitVarSizeWithFlagsR2_Values_2_Occurrence[q1, q7]) | q7 : int(1..3)];
                      int(1..2)])
         <lex
         flatten([[x_ExplicitVarSizeWithFlagsR2_Values_1[q1 + 1]; int(1)],
                  [-toInt(x_ExplicitVarSizeWithFlagsR2_Values_2_Occurrence[q1 + 1, q8]) | q8 : int(1..3)];
                      int(1..2)])
             | q1 : int(1..2)]),
    and([x_ExplicitVarSizeWithFlagsR2_Flags[q2] = false ->
         x_ExplicitVarSizeWithFlagsR2_Values_1[q2] = 1 /\
         and([x_ExplicitVarSizeWithFlagsR2_Values_2_Occurrence[q2, q9] = false | q9 : int(1..3)])
             | q2 : int(1..3)]),
    and([x_ExplicitVarSizeWithFlagsR2_Flags[q3 + 1] -> x_ExplicitVarSizeWithFlagsR2_Flags[q3] | q3 : int(1..2)]),
    2 <= sum([toInt(x_ExplicitVarSizeWithFlagsR2_Flags[q4]) | q4 : int(1..3)]),
    sum([toInt(x_ExplicitVarSizeWithFlagsR2_Flags[q4]) | q4 : int(1..3)]) <= 3,
    and([x_ExplicitVarSizeWithFlagsR2_Flags[q5] ->
         2 = sum([toInt(x_ExplicitVarSizeWithFlagsR2_Values_2_Occurrence[q5, q6]) | q6 : int(1..3)])
             | q5 : int(1..3)])

