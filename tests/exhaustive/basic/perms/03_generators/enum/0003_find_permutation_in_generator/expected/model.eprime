language ESSENCE' 1.0

find p_PermutationAsFunction_PermutationFunction_forwards_Function1D: matrix indexed by [int(1..4)] of int(1..4)
find p_PermutationAsFunction_PermutationFunction_backwards_Function1D: matrix indexed by [int(1..4)] of int(1..4)
find s_Explicit_1: matrix indexed by [int(1..3)] of int(1..4)
find s_Explicit_2: matrix indexed by [int(1..3)] of int(1..4)
branching on
    [p_PermutationAsFunction_PermutationFunction_forwards_Function1D,
     p_PermutationAsFunction_PermutationFunction_backwards_Function1D, s_Explicit_1, s_Explicit_2]
such that
    and([q17 != p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q17] ->
         or([s_Explicit_1[q15] = q17 /\
             s_Explicit_2[q15] = p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q17]
                 | q15 : int(1..3)])
             | q17 : int(1..4)]),
    and([flatten([[s_Explicit_1[q1]; int(1)], [s_Explicit_2[q1]; int(1)]; int(1..2)]) <lex
         flatten([[s_Explicit_1[q1 + 1]; int(1)], [s_Explicit_2[q1 + 1]; int(1)]; int(1..2)])
             | q1 : int(1..2)]),
    allDiff(p_PermutationAsFunction_PermutationFunction_forwards_Function1D),
    and([or([p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q5] = q4 | q5 : int(1..4)])
             | q4 : int(1..4)]),
    allDiff(p_PermutationAsFunction_PermutationFunction_backwards_Function1D),
    and([or([p_PermutationAsFunction_PermutationFunction_backwards_Function1D[q8] = q7 | q8 : int(1..4)])
             | q7 : int(1..4)]),
    3 = sum([toInt(q3 != p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q3]) | q3 : int(1..4)]),
    and([p_PermutationAsFunction_PermutationFunction_backwards_Function1D
             [p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q3]]
         = q3
             | q3 : int(1..4)]),
    and([p_PermutationAsFunction_PermutationFunction_forwards_Function1D
             [p_PermutationAsFunction_PermutationFunction_backwards_Function1D[q3]]
         = q3
             | q3 : int(1..4)])

