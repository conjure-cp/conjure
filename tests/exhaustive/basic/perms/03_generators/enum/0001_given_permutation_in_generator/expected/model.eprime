language ESSENCE' 1.0

given p_PermutationAsFunction_PermutationFunction_forwards_Function1D: matrix indexed by [int(1..4)] of int(1..4)
given p_PermutationAsFunction_PermutationFunction_backwards_Function1D: matrix indexed by [int(1..4)] of int(1..4)
find s_Explicit_1: matrix indexed by [int(1..3)] of int(1..4)
find s_Explicit_2: matrix indexed by [int(1..3)] of int(1..4)
branching on [s_Explicit_1, s_Explicit_2]
such that
    and([or([s_Explicit_1[q8] = q10 /\
             s_Explicit_2[q8] = p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q10]
                 | q8 : int(1..3)])
             | q10 : int(1..4), q10 != p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q10]]),
    and([flatten([[s_Explicit_1[q1]; int(1)], [s_Explicit_2[q1]; int(1)]; int(1..2)]) <lex
         flatten([[s_Explicit_1[q1 + 1]; int(1)], [s_Explicit_2[q1 + 1]; int(1)]; int(1..2)])
             | q1 : int(1..2)])

