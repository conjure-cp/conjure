language ESSENCE' 1.0

find p_PermutationAsFunction_PermutationFunction_forwards_Function1D: matrix indexed by [int(1..4)] of int(1..4)
find p_PermutationAsFunction_PermutationFunction_backwards_Function1D: matrix indexed by [int(1..4)] of int(1..4)
find s_Explicit_1: matrix indexed by [int(1..3)] of int(1..4)
find s_Explicit_2: matrix indexed by [int(1..3)] of int(1..4)
branching on
    [p_PermutationAsFunction_PermutationFunction_forwards_Function1D,
     p_PermutationAsFunction_PermutationFunction_backwards_Function1D, s_Explicit_1, s_Explicit_2]
such that
    and([or([q17 != p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q17] /\
             (q17 = s_Explicit_1[q10] /\
              p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q17] = s_Explicit_2[q10])
                 | q17 : int(1..4)])
             | q10 : int(1..3)]),
    allDiff(p_PermutationAsFunction_PermutationFunction_forwards_Function1D),
    and([or([p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q3] = q2 | q3 : int(1..4)])
             | q2 : int(1..4)]),
    allDiff(p_PermutationAsFunction_PermutationFunction_backwards_Function1D),
    and([or([p_PermutationAsFunction_PermutationFunction_backwards_Function1D[q6] = q5 | q6 : int(1..4)])
             | q5 : int(1..4)]),
    3 = sum([toInt(q1 != p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q1]) | q1 : int(1..4)]),
    and([p_PermutationAsFunction_PermutationFunction_backwards_Function1D
             [p_PermutationAsFunction_PermutationFunction_forwards_Function1D[q1]]
         = q1
             | q1 : int(1..4)]),
    and([p_PermutationAsFunction_PermutationFunction_forwards_Function1D
             [p_PermutationAsFunction_PermutationFunction_backwards_Function1D[q1]]
         = q1
             | q1 : int(1..4)]),
    and([flatten([[s_Explicit_1[q8]; int(1)], [s_Explicit_2[q8]; int(1)]; int(1..2)]) <lex
         flatten([[s_Explicit_1[q8 + 1]; int(1)], [s_Explicit_2[q8 + 1]; int(1)]; int(1..2)])
             | q8 : int(1..2)])

