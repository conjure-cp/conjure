language ESSENCE' 1.0

find s_Explicit_1: matrix indexed by [int(1..3)] of int(1..4)
find s_Explicit_2: matrix indexed by [int(1..3)] of int(1..4)
branching on [s_Explicit_1, s_Explicit_2]
such that
    or([s_Explicit_1[q4] = 1 /\ s_Explicit_2[q4] = 3 | q4 : int(1..3)]),
    or([s_Explicit_1[q6] = 3 /\ s_Explicit_2[q6] = 4 | q6 : int(1..3)]),
    or([s_Explicit_1[q8] = 4 /\ s_Explicit_2[q8] = 1 | q8 : int(1..3)]),
    and([flatten([[s_Explicit_1[q1]; int(1)], [s_Explicit_2[q1]; int(1)]; int(1..2)]) <lex
         flatten([[s_Explicit_1[q1 + 1]; int(1)], [s_Explicit_2[q1 + 1]; int(1)]; int(1..2)])
             | q1 : int(1..2)])

