language ESSENCE' 1.0

find conjure_aux1: int(1)
find s_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..4)] of bool
find s_ExplicitVarSizeWithFlags_Values: matrix indexed by [int(1..4)] of int(1..4)
find conjure_aux2: int(1..4)
branching on [conjure_aux1, s_ExplicitVarSizeWithFlags_Flags, s_ExplicitVarSizeWithFlags_Values]
such that
    and([s_ExplicitVarSizeWithFlags_Flags[q7] -> s_ExplicitVarSizeWithFlags_Values[q7] >= conjure_aux2
             | q7 : int(1..4)]),
    sum([toInt(s_ExplicitVarSizeWithFlags_Flags[q7]) | q7 : int(1..4)]) > 0 ->
    or([s_ExplicitVarSizeWithFlags_Flags[q7] /\ s_ExplicitVarSizeWithFlags_Values[q7] = conjure_aux2 | q7 : int(1..4)]),
    sum([toInt(s_ExplicitVarSizeWithFlags_Flags[q7]) | q7 : int(1..4)]) = 0 -> conjure_aux2 = 1,
    conjure_aux2 = 3,
    sum([toInt(s_ExplicitVarSizeWithFlags_Flags[q7]) | q7 : int(1..4)]) > 0,
    and([s_ExplicitVarSizeWithFlags_Flags[q1 + 1] ->
         s_ExplicitVarSizeWithFlags_Values[q1] < s_ExplicitVarSizeWithFlags_Values[q1 + 1]
             | q1 : int(1..3)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q2] = false -> s_ExplicitVarSizeWithFlags_Values[q2] = 1 | q2 : int(1..4)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q3 + 1] -> s_ExplicitVarSizeWithFlags_Flags[q3] | q3 : int(1..3)])

