language ESSENCE' 1.0

find conjure_aux1: int(1)
find s_ExplicitVarSizeWithMarker_Marker: int(0..4)
find s_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..4)] of int(1..4)
find conjure_aux2: int(1..4)
branching on [conjure_aux1, s_ExplicitVarSizeWithMarker_Marker, s_ExplicitVarSizeWithMarker_Values]
such that
    and([q5 <= s_ExplicitVarSizeWithMarker_Marker -> s_ExplicitVarSizeWithMarker_Values[q5] >= conjure_aux2
             | q5 : int(1..4)]),
    sum([toInt(q5 <= s_ExplicitVarSizeWithMarker_Marker) | q5 : int(1..4)]) > 0 ->
    or([q5 <= s_ExplicitVarSizeWithMarker_Marker /\ s_ExplicitVarSizeWithMarker_Values[q5] = conjure_aux2
            | q5 : int(1..4)]),
    sum([toInt(q5 <= s_ExplicitVarSizeWithMarker_Marker) | q5 : int(1..4)]) = 0 -> conjure_aux2 = 1,
    conjure_aux2 = 3,
    sum([toInt(q5 <= s_ExplicitVarSizeWithMarker_Marker) | q5 : int(1..4)]) > 0,
    and([q1 + 1 <= s_ExplicitVarSizeWithMarker_Marker ->
         s_ExplicitVarSizeWithMarker_Values[q1] < s_ExplicitVarSizeWithMarker_Values[q1 + 1]
             | q1 : int(1..3)]),
    and([q2 > s_ExplicitVarSizeWithMarker_Marker -> s_ExplicitVarSizeWithMarker_Values[q2] = 1 | q2 : int(1..4)])

