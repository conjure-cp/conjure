language ESSENCE' 1.0

find x: int(0..1000)
find y: int(7, 8)
find z: bool
branching on [x, y, z]
such that
    x =
    sum([toInt(or([i_ExplicitVarSizeWithMarker_Values_1[q5] = y /\ i_ExplicitVarSizeWithMarker_Values_2[q5] = z
                       | q5 : int(1..2), q5 <= i_ExplicitVarSizeWithMarker_Marker]))
             | i_ExplicitVarSizeWithMarker_Marker : int(0..2),
               i_ExplicitVarSizeWithMarker_Values_1 : matrix indexed by [int(1..2)] of int(7..9),
               i_ExplicitVarSizeWithMarker_Values_2 : matrix indexed by [int(1..2)] of bool,
               2 <= i_ExplicitVarSizeWithMarker_Marker ->
               flatten([[i_ExplicitVarSizeWithMarker_Values_1[1]; int(1)],
                        [-toInt(i_ExplicitVarSizeWithMarker_Values_2[1]); int(1)];
                            int(1..2)])
               <lex
               flatten([[i_ExplicitVarSizeWithMarker_Values_1[2]; int(1)],
                        [-toInt(i_ExplicitVarSizeWithMarker_Values_2[2]); int(1)];
                            int(1..2)]),
               and([q2 > i_ExplicitVarSizeWithMarker_Marker ->
                    i_ExplicitVarSizeWithMarker_Values_1[q2] = 7 /\ i_ExplicitVarSizeWithMarker_Values_2[q2] = false
                        | q2 : int(1..2)]),
               1 <= i_ExplicitVarSizeWithMarker_Marker, i_ExplicitVarSizeWithMarker_Marker <= 2])

