language ESSENCE' 1.0

find x_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..4)] of bool
find x_ExplicitVarSizeWithFlags_Values__tag: matrix indexed by [int(1..4)] of int(1..2)
find x_ExplicitVarSizeWithFlags_Values_theBool: matrix indexed by [int(1..4)] of bool
find x_ExplicitVarSizeWithFlags_Values_theInt: matrix indexed by [int(1..4)] of int(1..2)
branching on
    [x_ExplicitVarSizeWithFlags_Flags, x_ExplicitVarSizeWithFlags_Values__tag,
     x_ExplicitVarSizeWithFlags_Values_theBool, x_ExplicitVarSizeWithFlags_Values_theInt]
such that
    and([x_ExplicitVarSizeWithFlags_Flags[q1 + 1] ->
         flatten([[x_ExplicitVarSizeWithFlags_Values__tag[q1]; int(1)],
                  [-toInt(x_ExplicitVarSizeWithFlags_Values_theBool[q1]); int(1)],
                  [x_ExplicitVarSizeWithFlags_Values_theInt[q1]; int(1)];
                      int(1..3)])
         <lex
         flatten([[x_ExplicitVarSizeWithFlags_Values__tag[q1 + 1]; int(1)],
                  [-toInt(x_ExplicitVarSizeWithFlags_Values_theBool[q1 + 1]); int(1)],
                  [x_ExplicitVarSizeWithFlags_Values_theInt[q1 + 1]; int(1)];
                      int(1..3)])
             | q1 : int(1..3)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q2] = false ->
         and([x_ExplicitVarSizeWithFlags_Values__tag[q2] = 1, x_ExplicitVarSizeWithFlags_Values_theBool[q2] = false,
              x_ExplicitVarSizeWithFlags_Values_theInt[q2] = 1;
                  int(1..3)])
             | q2 : int(1..4)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q3 + 1] -> x_ExplicitVarSizeWithFlags_Flags[q3] | q3 : int(1..3)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q5] ->
         (x_ExplicitVarSizeWithFlags_Values__tag[q5] != 1 -> x_ExplicitVarSizeWithFlags_Values_theBool[q5] = false)
             | q5 : int(1..4)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q5] ->
         (x_ExplicitVarSizeWithFlags_Values__tag[q5] != 2 -> x_ExplicitVarSizeWithFlags_Values_theInt[q5] = 1)
             | q5 : int(1..4)])

