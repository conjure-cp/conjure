language ESSENCE' 1.0

find s_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..2)] of bool
find s_ExplicitVarSizeWithFlags_Values: matrix indexed by [int(1..2)] of int(1..2)
find s_ExplicitVarSizeWithMarker_Marker: int(0..2)
find s_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..2)] of int(1..2)
branching on
    [s_ExplicitVarSizeWithMarker_Marker, s_ExplicitVarSizeWithMarker_Values, s_ExplicitVarSizeWithFlags_Flags,
     s_ExplicitVarSizeWithFlags_Values]
such that
    or([s_ExplicitVarSizeWithFlags_Flags[q18] /\
        s_ExplicitVarSizeWithFlags_Values[q18] = sum([toInt(s_ExplicitVarSizeWithFlags_Flags[q20]) | q20 : int(1..2)])
            | q18 : int(1..2)]),
    s_ExplicitVarSizeWithFlags_Flags[2] -> s_ExplicitVarSizeWithFlags_Values[1] < s_ExplicitVarSizeWithFlags_Values[2],
    and([s_ExplicitVarSizeWithFlags_Flags[q2] = false -> s_ExplicitVarSizeWithFlags_Values[q2] = 1 | q2 : int(1..2)]),
    s_ExplicitVarSizeWithFlags_Flags[2] -> s_ExplicitVarSizeWithFlags_Flags[1],
    2 <= s_ExplicitVarSizeWithMarker_Marker ->
    s_ExplicitVarSizeWithMarker_Values[1] < s_ExplicitVarSizeWithMarker_Values[2],
    and([q7 > s_ExplicitVarSizeWithMarker_Marker -> s_ExplicitVarSizeWithMarker_Values[q7] = 1 | q7 : int(1..2)]),
    and([q10 <= s_ExplicitVarSizeWithMarker_Marker ->
         or([s_ExplicitVarSizeWithFlags_Flags[q12] /\
             s_ExplicitVarSizeWithFlags_Values[q12] = s_ExplicitVarSizeWithMarker_Values[q10]
                 | q12 : int(1..2)])
             | q10 : int(1..2)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q14] ->
         or([q16 <= s_ExplicitVarSizeWithMarker_Marker /\
             s_ExplicitVarSizeWithMarker_Values[q16] = s_ExplicitVarSizeWithFlags_Values[q14]
                 | q16 : int(1..2)])
             | q14 : int(1..2)])

