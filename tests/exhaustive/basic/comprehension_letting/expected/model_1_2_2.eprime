language ESSENCE' 1.0

find s_Occurrence: matrix indexed by [int(1..4)] of bool
find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..4)] of int(1..5)
letting let1 be -100
find x: int(-100..100)
find conjure_aux1: int(-20..3)
branching on [s_ExplicitVarSizeWithDummy, s_Occurrence, x]
such that
    and([and([s_Occurrence[i], s_ExplicitVarSizeWithDummy[q11] != 5, i != s_ExplicitVarSizeWithDummy[q11],
              allDiff([i + s_ExplicitVarSizeWithDummy[q11], i * s_ExplicitVarSizeWithDummy[q11],
                       i / s_ExplicitVarSizeWithDummy[q11];
                           int(1..3)]),
              (i - s_ExplicitVarSizeWithDummy[q11]) % 2 = 0;
                  int(1..5)])
         ->
         min([i + s_ExplicitVarSizeWithDummy[q11], i - s_ExplicitVarSizeWithDummy[q11],
              i * s_ExplicitVarSizeWithDummy[q11], i / s_ExplicitVarSizeWithDummy[q11];
                  int(1..4)])
         <= conjure_aux1
             | i : int(1..4), q11 : int(1..4)]),
    sum([toInt(and([s_Occurrence[i], s_ExplicitVarSizeWithDummy[q11] != 5, i != s_ExplicitVarSizeWithDummy[q11],
                    allDiff([i + s_ExplicitVarSizeWithDummy[q11], i * s_ExplicitVarSizeWithDummy[q11],
                             i / s_ExplicitVarSizeWithDummy[q11];
                                 int(1..3)]),
                    (i - s_ExplicitVarSizeWithDummy[q11]) % 2 = 0;
                        int(1..5)]))
             | i : int(1..4), q11 : int(1..4)])
    > 0
    ->
    or([and([s_Occurrence[i], s_ExplicitVarSizeWithDummy[q11] != 5, i != s_ExplicitVarSizeWithDummy[q11],
             allDiff([i + s_ExplicitVarSizeWithDummy[q11], i * s_ExplicitVarSizeWithDummy[q11],
                      i / s_ExplicitVarSizeWithDummy[q11];
                          int(1..3)]),
             (i - s_ExplicitVarSizeWithDummy[q11]) % 2 = 0;
                 int(1..5)])
        /\
        min([i + s_ExplicitVarSizeWithDummy[q11], i - s_ExplicitVarSizeWithDummy[q11],
             i * s_ExplicitVarSizeWithDummy[q11], i / s_ExplicitVarSizeWithDummy[q11];
                 int(1..4)])
        = conjure_aux1
            | i : int(1..4), q11 : int(1..4)]),
    sum([toInt(and([s_Occurrence[i], s_ExplicitVarSizeWithDummy[q11] != 5, i != s_ExplicitVarSizeWithDummy[q11],
                    allDiff([i + s_ExplicitVarSizeWithDummy[q11], i * s_ExplicitVarSizeWithDummy[q11],
                             i / s_ExplicitVarSizeWithDummy[q11];
                                 int(1..3)]),
                    (i - s_ExplicitVarSizeWithDummy[q11]) % 2 = 0;
                        int(1..5)]))
             | i : int(1..4), q11 : int(1..4)])
    = 0
    -> conjure_aux1 = -20,
    x = conjure_aux1,
    sum([toInt(and([s_Occurrence[i], s_ExplicitVarSizeWithDummy[q11] != 5, i != s_ExplicitVarSizeWithDummy[q11],
                    allDiff([i + s_ExplicitVarSizeWithDummy[q11], i * s_ExplicitVarSizeWithDummy[q11],
                             i / s_ExplicitVarSizeWithDummy[q11];
                                 int(1..3)]),
                    (i - s_ExplicitVarSizeWithDummy[q11]) % 2 = 0;
                        int(1..5)]))
             | i : int(1..4), q11 : int(1..4)])
    > 0,
    and([s_ExplicitVarSizeWithDummy[q2] < s_ExplicitVarSizeWithDummy[q2 + 1] \/ s_ExplicitVarSizeWithDummy[q2] = 5
             | q2 : int(1..3)]),
    and([s_ExplicitVarSizeWithDummy[q3] = 5 -> s_ExplicitVarSizeWithDummy[q3 + 1] = 5 | q3 : int(1..3)]),
    and([s_ExplicitVarSizeWithDummy[q7] != 5 -> s_Occurrence[s_ExplicitVarSizeWithDummy[q7]] | q7 : int(1..4)]),
    and([s_Occurrence[q8] ->
         or([s_ExplicitVarSizeWithDummy[q10] != 5 /\ s_ExplicitVarSizeWithDummy[q10] = q8 | q10 : int(1..4)])
             | q8 : int(1..4)])

