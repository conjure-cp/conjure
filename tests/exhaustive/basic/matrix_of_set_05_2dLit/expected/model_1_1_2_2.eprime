language ESSENCE' 1.0

find a_Explicit: matrix indexed by [int(1)] of int(1..3)
find a_Occurrence: matrix indexed by [int(1..3)] of bool
find b_Explicit: matrix indexed by [int(1)] of int(1..3)
find b_Occurrence: matrix indexed by [int(1..3)] of bool
branching on [a_Occurrence, a_Explicit, b_Occurrence, b_Explicit]
such that
    and([a_Explicit[1] % 2 = 0 | j1 : int(1..2), j2 : int(1..3), 2 = j2, 1 = j1]),
    and([b_Explicit[1] % 2 = 0 | j1 : int(1..2), j2 : int(1..3), 3 = j2, 2 = j1]),
    1 = sum([toInt(a_Occurrence[q7]) | q7 : int(1..3)]),
    and([a_Occurrence[q14] -> a_Explicit[1] = q14 | q14 : int(1..3)]),
    a_Occurrence[a_Explicit[1]],
    1 = sum([toInt(b_Occurrence[q8]) | q8 : int(1..3)]),
    and([b_Occurrence[q9] -> b_Explicit[1] = q9 | q9 : int(1..3)]),
    b_Occurrence[b_Explicit[1]]

