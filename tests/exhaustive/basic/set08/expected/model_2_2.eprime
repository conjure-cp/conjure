language ESSENCE' 1.0

find x_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..16)] of bool
find x_ExplicitVarSizeWithFlags_Values_1: matrix indexed by [int(1..16)] of int(1..4)
find x_ExplicitVarSizeWithFlags_Values_2: matrix indexed by [int(1..16)] of int(3..6)
branching on
    [x_ExplicitVarSizeWithFlags_Flags, x_ExplicitVarSizeWithFlags_Values_1, x_ExplicitVarSizeWithFlags_Values_2]
such that
    and([x_ExplicitVarSizeWithFlags_Flags[q7] ->
         x_ExplicitVarSizeWithFlags_Values_1[q7] = x_ExplicitVarSizeWithFlags_Values_2[q7]
             | q7 : int(1..16)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q1 + 1] ->
         flatten([[x_ExplicitVarSizeWithFlags_Values_1[q1]; int(1)], [x_ExplicitVarSizeWithFlags_Values_2[q1]; int(1)];
                      int(1..2)])
         <lex
         flatten([[x_ExplicitVarSizeWithFlags_Values_1[q1 + 1]; int(1)],
                  [x_ExplicitVarSizeWithFlags_Values_2[q1 + 1]; int(1)];
                      int(1..2)])
             | q1 : int(1..15)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q2] = false ->
         x_ExplicitVarSizeWithFlags_Values_1[q2] = 1 /\ x_ExplicitVarSizeWithFlags_Values_2[q2] = 3
             | q2 : int(1..16)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q3 + 1] -> x_ExplicitVarSizeWithFlags_Flags[q3] | q3 : int(1..15)]),
    2 <= sum([toInt(x_ExplicitVarSizeWithFlags_Flags[q4]) | q4 : int(1..16)])

