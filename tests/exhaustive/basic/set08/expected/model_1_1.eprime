language ESSENCE' 1.0

find x_ExplicitVarSizeWithMarker_Marker: int(0..16)
find x_ExplicitVarSizeWithMarker_Values_1: matrix indexed by [int(1..16)] of int(1..4)
find x_ExplicitVarSizeWithMarker_Values_2: matrix indexed by [int(1..16)] of int(3..6)
branching on
    [x_ExplicitVarSizeWithMarker_Marker, x_ExplicitVarSizeWithMarker_Values_1, x_ExplicitVarSizeWithMarker_Values_2]
such that
    and([q5 <= x_ExplicitVarSizeWithMarker_Marker ->
         x_ExplicitVarSizeWithMarker_Values_1[q5] = x_ExplicitVarSizeWithMarker_Values_2[q5]
             | q5 : int(1..16)]),
    and([q1 + 1 <= x_ExplicitVarSizeWithMarker_Marker ->
         flatten([[x_ExplicitVarSizeWithMarker_Values_1[q1]; int(1)],
                  [x_ExplicitVarSizeWithMarker_Values_2[q1]; int(1)];
                      int(1..2)])
         <lex
         flatten([[x_ExplicitVarSizeWithMarker_Values_1[q1 + 1]; int(1)],
                  [x_ExplicitVarSizeWithMarker_Values_2[q1 + 1]; int(1)];
                      int(1..2)])
             | q1 : int(1..15)]),
    and([q2 > x_ExplicitVarSizeWithMarker_Marker ->
         x_ExplicitVarSizeWithMarker_Values_1[q2] = 1 /\ x_ExplicitVarSizeWithMarker_Values_2[q2] = 3
             | q2 : int(1..16)]),
    2 <= x_ExplicitVarSizeWithMarker_Marker

