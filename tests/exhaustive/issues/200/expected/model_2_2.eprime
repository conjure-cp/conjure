language ESSENCE' 1.0

letting n be 5
letting let1 be 4
find quasigroup_Occurrence: matrix indexed by [int(0..4)] of bool
branching on [quasigroup_Occurrence]
such that
<<<<<<< HEAD
    and([quasigroup_Explicit[q5] * quasigroup_Explicit[q6] * (quasigroup_Explicit[q6] * quasigroup_Explicit[q5]) =
         quasigroup_Explicit[q5]
             | q5 : int(1..5), q6 : int(1..5), q6 > q5]),
    and([[quasigroup_Explicit[q1]; int(1)] <lex [quasigroup_Explicit[q1 + 1]; int(1)] | q1 : int(1..4)])
=======
    and([quasigroup_Occurrence[a] /\ quasigroup_Occurrence[b] -> a * b * (b * a) = a
             | a : int(0..4), b : int(0..4), b > a]),
    5 = sum([toInt(quasigroup_Occurrence[q1]) | q1 : int(0..4)])
>>>>>>> main

