language ESSENCE' 1.0

find A_1: bool
find A_2: bool
find A_3: bool
find B_1: bool
find B_2: bool
find B_3: bool
branching on [A_1, A_2, A_3, B_1, B_2, B_3]
such that
    flatten([[-toInt(A_1); int(1)], [-toInt(A_2); int(1)], [-toInt(A_3); int(1)]; int(1..3)]) <lex
    flatten([[-toInt(B_1); int(1)], [-toInt(B_2); int(1)], [-toInt(B_3); int(1)]; int(1..3)])

$ Conjure's
$ {"finds": [{"Name": "A"}, {"Name": "B"}],
$  "givens": [],
$  "enumGivens": [],
$  "enumLettings": [],
$  "lettings": [],
$  "unnameds": [],
$  "strategyQ": {"PickFirst": []},
$  "strategyA": {"Auto": {"Interactive": []}},
$  "trailCompact": [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]],
$  "trailVerbose": [],
$  "trailRewrites": [],
$  "nameGenState": [],
$  "nbExtraGivens": 0,
$  "representations":
$      [[{"Name": "A"}, {"DomainTuple": [{"DomainBool": []}, {"DomainBool": []}, {"DomainBool": []}]}],
$       [{"Name": "B"}, {"DomainTuple": [{"DomainBool": []}, {"DomainBool": []}, {"DomainBool": []}]}]],
$  "representationsTree":
$      [[{"Name": "A"},
$        [{"rootLabel": null,
$          "subForest":
$              [{"rootLabel": null,
$                "subForest": []},
$               {"rootLabel": null,
$                "subForest": []},
$               {"rootLabel": null,
$                "subForest": []}]}]],
$       [{"Name": "B"},
$        [{"rootLabel": null,
$          "subForest":
$              [{"rootLabel": null,
$                "subForest": []},
$               {"rootLabel": null,
$                "subForest": []},
$               {"rootLabel": null,
$                "subForest": []}]}]]],
$  "originalDomains":
$      [[{"Name": "A"}, {"DomainTuple": [{"DomainBool": []}, {"DomainBool": []}, {"DomainBool": []}]}],
$       [{"Name": "B"}, {"DomainTuple": [{"DomainBool": []}, {"DomainBool": []}, {"DomainBool": []}]}]]}
