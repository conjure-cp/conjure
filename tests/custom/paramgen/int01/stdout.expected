$ conjure parameter-generator problem.essence
File: problem-instanceGenerator.essence
language Essence 1.3

given a_min: int(0..100)
given a_max: int(0..100)
find a: int(0..100)
such that
    a >= a_min,
    a <= a_max
given b_min: int(10..100)
given b_max: int(10..100)
find b: int(10..100)
such that
    b >= b_min,
    b <= b_max
given c_min: int(0..20)
given c_max: int(0..20)
find c: int(0..20)
such that
    c >= c_min,
    c <= c_max
given d_min: int(10..20)
given d_max: int(10..20)
find d: int(10..20)
such that
    d >= d_min,
    d <= d_max
given e_min: int(10..20)
given e_max: int(10..20)
find e: int(10..20)
such that
    e >= e_min,
    e <= e_max,
    e >= b,
    e <= c
given f_min: int(0..20)
given f_max: int(0..20)
find f: int(0..20)
such that
    f >= f_min,
    f <= f_max,
    f >= a,
    f <= d

--------------------


File: problem-instanceGenerator.essence.irace
a_min "-a_min " i (0, 100)
a_max "-a_max " i (0, 100)
b_min "-b_min " i (10, 100)
b_max "-b_max " i (10, 100)
c_min "-c_min " i (0, 20)
c_max "-c_max " i (0, 20)
d_min "-d_min " i (10, 20)
d_max "-d_max " i (10, 20)
e_min "-e_min " i (10, 20)
e_max "-e_max " i (10, 20)
f_min "-f_min " i (0, 20)
f_max "-f_max " i (0, 20)

--------------------


File: problem-instanceRepair.essence
language Essence 1.3

given a_min: int(0..100)
given a_max: int(0..100)
find repaired_a_min: int(0..100)
find repaired_a_max: int(0..100)
such that repaired_a_min <= repaired_a_max
given b_min: int(10..100)
given b_max: int(10..100)
find repaired_b_min: int(10..100)
find repaired_b_max: int(10..100)
such that repaired_b_min <= repaired_b_max
given c_min: int(0..20)
given c_max: int(0..20)
find repaired_c_min: int(0..20)
find repaired_c_max: int(0..20)
such that repaired_c_min <= repaired_c_max
given d_min: int(10..20)
given d_max: int(10..20)
find repaired_d_min: int(10..20)
find repaired_d_max: int(10..20)
such that repaired_d_min <= repaired_d_max
given e_min: int(10..20)
given e_max: int(10..20)
find repaired_e_min: int(10..20)
find repaired_e_max: int(10..20)
such that repaired_e_min <= repaired_e_max
given f_min: int(0..20)
given f_max: int(0..20)
find repaired_f_min: int(0..20)
find repaired_f_max: int(0..20)
such that repaired_f_min <= repaired_f_max
minimising
    sum([|repaired_a_min - a_min|, |repaired_a_max - a_max|, |repaired_b_min - b_min|, |repaired_b_max - b_max|,
         |repaired_c_min - c_min|, |repaired_c_max - c_max|, |repaired_d_min - d_min|, |repaired_d_max - d_max|,
         |repaired_e_min - e_min|, |repaired_e_max - e_max|, |repaired_f_min - f_min|, |repaired_f_max - f_max|;
             int(1..12)])

--------------------


$ conjure parameter-generator problem.essence --MININT -10 --MAXINT 50
File: problem-instanceGenerator.essence
language Essence 1.3

given a_min: int(-10..50)
given a_max: int(-10..50)
find a: int(-10..50)
such that
    a >= a_min,
    a <= a_max
given b_min: int(10..50)
given b_max: int(10..50)
find b: int(10..50)
such that
    b >= b_min,
    b <= b_max
given c_min: int(-10..20)
given c_max: int(-10..20)
find c: int(-10..20)
such that
    c >= c_min,
    c <= c_max
given d_min: int(10..20)
given d_max: int(10..20)
find d: int(10..20)
such that
    d >= d_min,
    d <= d_max
given e_min: int(10..20)
given e_max: int(10..20)
find e: int(10..20)
such that
    e >= e_min,
    e <= e_max,
    e >= b,
    e <= c
given f_min: int(-10..20)
given f_max: int(-10..20)
find f: int(-10..20)
such that
    f >= f_min,
    f <= f_max,
    f >= a,
    f <= d

--------------------


File: problem-instanceGenerator.essence.irace
a_min "-a_min " i (-10, 50)
a_max "-a_max " i (-10, 50)
b_min "-b_min " i (10, 50)
b_max "-b_max " i (10, 50)
c_min "-c_min " i (-10, 20)
c_max "-c_max " i (-10, 20)
d_min "-d_min " i (10, 20)
d_max "-d_max " i (10, 20)
e_min "-e_min " i (10, 20)
e_max "-e_max " i (10, 20)
f_min "-f_min " i (-10, 20)
f_max "-f_max " i (-10, 20)

--------------------


File: problem-instanceRepair.essence
language Essence 1.3

given a_min: int(-10..50)
given a_max: int(-10..50)
find repaired_a_min: int(-10..50)
find repaired_a_max: int(-10..50)
such that repaired_a_min <= repaired_a_max
given b_min: int(10..50)
given b_max: int(10..50)
find repaired_b_min: int(10..50)
find repaired_b_max: int(10..50)
such that repaired_b_min <= repaired_b_max
given c_min: int(-10..20)
given c_max: int(-10..20)
find repaired_c_min: int(-10..20)
find repaired_c_max: int(-10..20)
such that repaired_c_min <= repaired_c_max
given d_min: int(10..20)
given d_max: int(10..20)
find repaired_d_min: int(10..20)
find repaired_d_max: int(10..20)
such that repaired_d_min <= repaired_d_max
given e_min: int(10..20)
given e_max: int(10..20)
find repaired_e_min: int(10..20)
find repaired_e_max: int(10..20)
such that repaired_e_min <= repaired_e_max
given f_min: int(-10..20)
given f_max: int(-10..20)
find repaired_f_min: int(-10..20)
find repaired_f_max: int(-10..20)
such that repaired_f_min <= repaired_f_max
minimising
    sum([|repaired_a_min - a_min|, |repaired_a_max - a_max|, |repaired_b_min - b_min|, |repaired_b_max - b_max|,
         |repaired_c_min - c_min|, |repaired_c_max - c_max|, |repaired_d_min - d_min|, |repaired_d_max - d_max|,
         |repaired_e_min - e_min|, |repaired_e_max - e_max|, |repaired_f_min - f_min|, |repaired_f_max - f_max|;
             int(1..12)])

--------------------


