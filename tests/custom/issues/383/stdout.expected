language ESSENCE' 1.0

given n: int
given fin1: int
given G_ExplicitR3_Explicit: matrix indexed by [int(1..fin1), int(1..2)] of int(1..n)
find f_Function1DPartial_Flags: matrix indexed by [int(1..n)] of bool
find f_Function1DPartial_Values: matrix indexed by [int(1..n)] of int(1..n)
find c: int(1..n)
find conjure_aux1_Occurrence: matrix indexed by [int(1..n)] of bool
branching on [f_Function1DPartial_Flags, f_Function1DPartial_Values, c]
minimising c
such that
    and([and([f_Function1DPartial_Values[G_ExplicitR3_Explicit[q4, 1]] !=
              f_Function1DPartial_Values[G_ExplicitR3_Explicit[q4, 2]],
              f_Function1DPartial_Flags[G_ExplicitR3_Explicit[q4, 1]],
              f_Function1DPartial_Flags[G_ExplicitR3_Explicit[q4, 2]];
                  int(1..3)])
             | q4 : int(1..fin1)]),
    and([conjure_aux1_Occurrence[f_Function1DPartial_Values[u]] /\ f_Function1DPartial_Flags[u] | u : int(1..n)]),
    and([conjure_aux1_Occurrence[q5] ->
         or([q5 = f_Function1DPartial_Values[u] /\ f_Function1DPartial_Flags[u] | u : int(1..n)])
             | q5 : int(1..n)]),
    c = sum([toInt(conjure_aux1_Occurrence[q7]) | q7 : int(1..n)]),
    and([f_Function1DPartial_Flags[q1] = false -> f_Function1DPartial_Values[q1] = 1 | q1 : int(1..n)])

$ Conjure's
$ {"finds": [{"Name": "f"}, {"Name": "c"}],
$  "givens": [{"Name": "n"}, {"Name": "G"}],
$  "enumGivens": [],
$  "enumLettings": [],
