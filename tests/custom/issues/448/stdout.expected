Generating models for 448-1.essence
Generated models: model000001.eprime
Saved under: conjure-output
Savile Row: conjure-output/model000001.eprime
Running minion for domain filtering.
Running solver: minion
Copying solution to: 448-1.solution
language ESSENCE' 1.0

find s_trucks_Function1D_1: matrix indexed by [int(1..2)] of int(0..5)
find s_trucks_Function1D_2: matrix indexed by [int(1..2)] of int(0..5)
find s_inside_Function1DPartial_Flags: matrix indexed by [int(1..2)] of bool
find s_inside_Function1DPartial_Values: matrix indexed by [int(1..2)] of int(1..2)
find s_packages_Function1D_1: matrix indexed by [int(1..2)] of int(0..5)
find s_packages_Function1D_2: matrix indexed by [int(1..2)] of int(0..5)
branching on
    [s_trucks_Function1D_1, s_trucks_Function1D_2, s_inside_Function1DPartial_Flags, s_inside_Function1DPartial_Values,
     s_packages_Function1D_1, s_packages_Function1D_2]
such that
    and([sum([1 | 1 = q7]) + sum([2 | 2 = q7]) = s_trucks_Function1D_1[q7] /\ (1 = q7 \/ 2 = q7) /\
         (sum([1 | 1 = q7]) + sum([2 | 2 = q7]) = s_trucks_Function1D_2[q7] /\ (1 = q7 \/ 2 = q7))
             | q7 : int(1..2)]),
    s_trucks_Function1D_1[1] = 1,
    s_trucks_Function1D_2[1] = 1,
    s_trucks_Function1D_1[2] = 2,
    s_trucks_Function1D_2[2] = 2,
    and([s_inside_Function1DPartial_Flags[q16] -> false | q16 : int(1..2)]),
    and([sum([1 | 1 = q20]) + sum([2 | 2 = q20]) = s_packages_Function1D_1[q20] /\ (1 = q20 \/ 2 = q20) /\
         (sum([1 | 1 = q20]) + sum([2 | 2 = q20]) = s_packages_Function1D_2[q20] /\ (1 = q20 \/ 2 = q20))
             | q20 : int(1..2)]),
    s_packages_Function1D_1[1] = 1,
    s_packages_Function1D_2[1] = 1,
    s_packages_Function1D_1[2] = 2,
    s_packages_Function1D_2[2] = 2,
    and([s_inside_Function1DPartial_Flags[q2] = false -> s_inside_Function1DPartial_Values[q2] = 1 | q2 : int(1..2)])

language Essence 1.3

letting s be
        record {inside = function(), packages = function(i1 --> (1, 1), i2 --> (2, 2)),
                trucks = function(t1 --> (1, 1), t2 --> (2, 2))}
Generating models for 448-2.essence
Generated models: model000001.eprime
Saved under: conjure-output
Savile Row: conjure-output/model000001.eprime
Running minion for domain filtering.
Running solver: minion
Copying solution to: 448-2.solution
language ESSENCE' 1.0

find s_trucks_Function1D_1: matrix indexed by [int(1..2)] of int(0..5)
find s_trucks_Function1D_2: matrix indexed by [int(1..2)] of int(0..5)
find s_inside_Function1DPartial_Flags: matrix indexed by [int(1..2)] of bool
find s_inside_Function1DPartial_Values: matrix indexed by [int(1..2)] of int(1..2)
find s_packages_Function1D_1: matrix indexed by [int(1..2)] of int(0..5)
find s_packages_Function1D_2: matrix indexed by [int(1..2)] of int(0..5)
branching on
    [s_trucks_Function1D_1, s_trucks_Function1D_2, s_inside_Function1DPartial_Flags, s_inside_Function1DPartial_Values,
     s_packages_Function1D_1, s_packages_Function1D_2]
such that
    and([s_inside_Function1DPartial_Flags[q7] -> false | q7 : int(1..2)]),
    and([s_inside_Function1DPartial_Flags[q2] = false -> s_inside_Function1DPartial_Values[q2] = 1 | q2 : int(1..2)])

language Essence 1.3

letting s be
        record {inside = function(), packages = function(i1 --> (0, 0), i2 --> (0, 0)),
                trucks = function(t1 --> (0, 0), t2 --> (0, 0))}
Generating models for 448-3.essence
Generated models: model000001.eprime
Saved under: conjure-output
Savile Row: conjure-output/model000001.eprime
Running minion for domain filtering.
Running solver: minion
Copying solution to: 448-3.solution
language ESSENCE' 1.0

find s_trucks_Function1D_1: matrix indexed by [int(1..2)] of int(0..5)
find s_trucks_Function1D_2: matrix indexed by [int(1..2)] of int(0..5)
find s_packages_Function1D_1: matrix indexed by [int(1..2)] of int(0..5)
find s_packages_Function1D_2: matrix indexed by [int(1..2)] of int(0..5)
branching on [s_trucks_Function1D_1, s_trucks_Function1D_2, s_packages_Function1D_1, s_packages_Function1D_2]
such that
    and([sum([1 | 1 = q4]) + sum([2 | 2 = q4]) = s_trucks_Function1D_1[q4] /\ (1 = q4 \/ 2 = q4) /\
         (sum([1 | 1 = q4]) + sum([2 | 2 = q4]) = s_trucks_Function1D_2[q4] /\ (1 = q4 \/ 2 = q4))
             | q4 : int(1..2)]),
    s_trucks_Function1D_1[1] = 1,
    s_trucks_Function1D_2[1] = 1,
    s_trucks_Function1D_1[2] = 2,
    s_trucks_Function1D_2[2] = 2

language Essence 1.3

letting s be record {packages = function(i1 --> (0, 0), i2 --> (0, 0)), trucks = function(t1 --> (1, 1), t2 --> (2, 2))}
