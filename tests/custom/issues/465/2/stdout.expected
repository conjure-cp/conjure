language Essence 1.3

given m_min: int(1..20)
given m_max: int(1..20)
find m: int(1..20)
such that
    m >= m_min,
    m <= m_max
given f_cardMin: int(1..20)
given f_cardMax: int(1..20)
given f_defined_min: int(1..20)
given f_defined_max: int(1..20)
given f_range_min: int(1..20)
given f_range_max: int(1..20)
find f: function (minSize 1, maxSize 20) int(1..20) --> int(1..20)
such that
    |f| >= f_cardMin /\ |f| <= f_cardMax,
    |f| >= 1,
    and([q1[1] >= f_defined_min | q1 <- f]),
    and([q1[1] <= f_defined_max | q1 <- f]),
    and([q1[1] <= m | q1 <- f]),
    and([q1[2] >= f_range_min | q1 <- f]),
    and([q1[2] <= f_range_max | q1 <- f])
language Essence 1.3

given m_min: int(1..20)
given m_max: int(1..20)
find repaired_m_min: int(1..20)
find repaired_m_max: int(1..20)
such that repaired_m_min <= repaired_m_max
given f_cardMin: int(1..20)
given f_cardMax: int(1..20)
given f_defined_min: int(1..20)
given f_defined_max: int(1..20)
given f_range_min: int(1..20)
given f_range_max: int(1..20)
find repaired_f_cardMin: int(1..20)
find repaired_f_cardMax: int(1..20)
find repaired_f_defined_min: int(1..20)
find repaired_f_defined_max: int(1..20)
find repaired_f_range_min: int(1..20)
find repaired_f_range_max: int(1..20)
such that
    repaired_f_cardMin <= repaired_f_cardMax,
    repaired_f_defined_max - repaired_f_defined_min + 1 >= repaired_f_cardMax,
    repaired_f_defined_min >= 1,
    repaired_f_defined_max <= repaired_m_max,
    repaired_f_defined_min <= repaired_f_defined_max,
    repaired_f_range_min <= repaired_f_range_max
minimising
    sum([|repaired_m_min - m_min|, |repaired_m_max - m_max|, |repaired_f_cardMin - f_cardMin|,
         |repaired_f_cardMax - f_cardMax|, |repaired_f_defined_min - f_defined_min|,
         |repaired_f_defined_max - f_defined_max|, |repaired_f_range_min - f_range_min|,
         |repaired_f_range_max - f_range_max|;
             int(1..8)])
