language Essence 1.3

given m1_min: int(1..20)
given m1_max: int(1..20)
find m1: int(1..20)
such that
    m1 >= m1_min,
    m1 <= m1_max
given m2_min: int(1..20)
given m2_max: int(1..20)
find m2: int(1..20)
such that
    m2 >= m2_min,
    m2 <= m2_max
given f_cardMin: int(0..400)
given f_cardMax: int(0..400)
given f_defined_tuple1_min: int(1..20)
given f_defined_tuple1_max: int(1..20)
given f_defined_tuple2_min: int(1..20)
given f_defined_tuple2_max: int(1..20)
given f_percentage_min: int(0..100)
given f_percentage_max: int(0..100)
find f: function (maxSize 20) (int(1..20), int(1..20)) --> bool
such that
    |f| >= f_cardMin /\ |f| <= f_cardMax,
    and([q1[1, 1] >= f_defined_tuple1_min | q1 <- f]),
    and([q1[1, 1] <= f_defined_tuple1_max | q1 <- f]),
    and([q1[1, 1] <= m1 | q1 <- f]),
    and([q1[1, 2] >= f_defined_tuple2_min | q1 <- f]),
    and([q1[1, 2] <= f_defined_tuple2_max | q1 <- f]),
    and([q1[1, 2] <= m2 | q1 <- f]),
    sum([toInt(q1[2]) | q1 <- f]) <= f_percentage_max * |defined(f)| / 100 /\
    sum([toInt(q1[2]) | q1 <- f]) >= f_percentage_min * |defined(f)| / 100
language Essence 1.3

given m1_min: int(1..20)
given m1_max: int(1..20)
find repaired_m1_min: int(1..20)
find repaired_m1_max: int(1..20)
such that repaired_m1_min <= repaired_m1_max
given m2_min: int(1..20)
given m2_max: int(1..20)
find repaired_m2_min: int(1..20)
find repaired_m2_max: int(1..20)
such that repaired_m2_min <= repaired_m2_max
given f_cardMin: int(0..400)
given f_cardMax: int(0..400)
given f_defined_tuple1_min: int(1..20)
given f_defined_tuple1_max: int(1..20)
given f_defined_tuple2_min: int(1..20)
given f_defined_tuple2_max: int(1..20)
given f_percentage_min: int(0..100)
given f_percentage_max: int(0..100)
find repaired_f_cardMin: int(0..400)
find repaired_f_cardMax: int(0..400)
find repaired_f_defined_tuple1_min: int(1..20)
find repaired_f_defined_tuple1_max: int(1..20)
find repaired_f_defined_tuple2_min: int(1..20)
find repaired_f_defined_tuple2_max: int(1..20)
find repaired_f_percentage_min: int(0..100)
find repaired_f_percentage_max: int(0..100)
such that
    repaired_f_cardMin <= repaired_f_cardMax,
    (repaired_f_defined_tuple1_max - repaired_f_defined_tuple1_min + 1) *
    (repaired_f_defined_tuple2_max - repaired_f_defined_tuple2_min + 1)
    >= repaired_f_cardMax,
    repaired_f_defined_tuple1_min >= 1,
    repaired_f_defined_tuple1_max <= repaired_m1_max,
    repaired_f_defined_tuple2_min >= 1,
    repaired_f_defined_tuple2_max <= repaired_m2_max,
    repaired_f_percentage_max >= repaired_f_percentage_min,
    repaired_f_defined_tuple1_min <= repaired_f_defined_tuple1_max,
    repaired_f_defined_tuple2_min <= repaired_f_defined_tuple2_max
minimising
    sum([|repaired_m1_min - m1_min|, |repaired_m1_max - m1_max|, |repaired_m2_min - m2_min|, |repaired_m2_max - m2_max|,
         |repaired_f_cardMin - f_cardMin|, |repaired_f_cardMax - f_cardMax|,
         |repaired_f_defined_tuple1_min - f_defined_tuple1_min|, |repaired_f_defined_tuple1_max - f_defined_tuple1_max|,
         |repaired_f_defined_tuple2_min - f_defined_tuple2_min|, |repaired_f_defined_tuple2_max - f_defined_tuple2_max|,
         |repaired_f_percentage_min - f_percentage_min|, |repaired_f_percentage_max - f_percentage_max|;
             int(1..12)])
