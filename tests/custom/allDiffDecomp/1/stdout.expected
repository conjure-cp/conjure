Generating models for allDiffDecomp.essence
Generated models: model000001.eprime
Saved under: conjure-output
Savile Row: conjure-output/model000001.eprime
Running minion for domain filtering.
Running solver: minion
conjure-output/model000001-solution000001.solution:letting x be [(1, 6), (1, 7), (1, 8); int(1..3)]
conjure-output/model000001-solution000002.solution:letting x be [(1, 6), (1, 7), (1, 9); int(1..3)]
conjure-output/model000001-solution000003.solution:letting x be [(1, 6), (1, 8), (1, 7); int(1..3)]
conjure-output/model000001-solution000004.solution:letting x be [(1, 6), (1, 8), (1, 9); int(1..3)]
conjure-output/model000001-solution000005.solution:letting x be [(1, 6), (1, 9), (1, 7); int(1..3)]
conjure-output/model000001-solution000006.solution:letting x be [(1, 6), (1, 9), (1, 8); int(1..3)]
conjure-output/model000001-solution000007.solution:letting x be [(1, 7), (1, 6), (1, 8); int(1..3)]
conjure-output/model000001-solution000008.solution:letting x be [(1, 7), (1, 6), (1, 9); int(1..3)]
conjure-output/model000001-solution000009.solution:letting x be [(1, 7), (1, 8), (1, 6); int(1..3)]
conjure-output/model000001-solution000010.solution:letting x be [(1, 7), (1, 8), (1, 9); int(1..3)]
conjure-output/model000001-solution000011.solution:letting x be [(1, 7), (1, 9), (1, 6); int(1..3)]
conjure-output/model000001-solution000012.solution:letting x be [(1, 7), (1, 9), (1, 8); int(1..3)]
conjure-output/model000001-solution000013.solution:letting x be [(1, 8), (1, 6), (1, 7); int(1..3)]
conjure-output/model000001-solution000014.solution:letting x be [(1, 8), (1, 6), (1, 9); int(1..3)]
conjure-output/model000001-solution000015.solution:letting x be [(1, 8), (1, 7), (1, 6); int(1..3)]
conjure-output/model000001-solution000016.solution:letting x be [(1, 8), (1, 7), (1, 9); int(1..3)]
conjure-output/model000001-solution000017.solution:letting x be [(1, 8), (1, 9), (1, 6); int(1..3)]
conjure-output/model000001-solution000018.solution:letting x be [(1, 8), (1, 9), (1, 7); int(1..3)]
conjure-output/model000001-solution000019.solution:letting x be [(1, 9), (1, 6), (1, 7); int(1..3)]
conjure-output/model000001-solution000020.solution:letting x be [(1, 9), (1, 6), (1, 8); int(1..3)]
conjure-output/model000001-solution000021.solution:letting x be [(1, 9), (1, 7), (1, 6); int(1..3)]
conjure-output/model000001-solution000022.solution:letting x be [(1, 9), (1, 7), (1, 8); int(1..3)]
conjure-output/model000001-solution000023.solution:letting x be [(1, 9), (1, 8), (1, 6); int(1..3)]
conjure-output/model000001-solution000024.solution:letting x be [(1, 9), (1, 8), (1, 7); int(1..3)]
conjure-output/model000001-solution000025.solution:letting x be [(1, 6), (1, 7), (2, 6); int(1..3)]
conjure-output/model000001-solution000026.solution:letting x be [(1, 6), (1, 7), (2, 7); int(1..3)]
conjure-output/model000001-solution000027.solution:letting x be [(1, 6), (1, 7), (2, 8); int(1..3)]
conjure-output/model000001-solution000028.solution:letting x be [(1, 6), (1, 7), (2, 9); int(1..3)]
conjure-output/model000001-solution000029.solution:letting x be [(1, 6), (1, 8), (2, 6); int(1..3)]
conjure-output/model000001-solution000030.solution:letting x be [(1, 6), (1, 8), (2, 7); int(1..3)]
conjure-output/model000001-solution000031.solution:letting x be [(1, 6), (1, 8), (2, 8); int(1..3)]
conjure-output/model000001-solution000032.solution:letting x be [(1, 6), (1, 8), (2, 9); int(1..3)]
conjure-output/model000001-solution000033.solution:letting x be [(1, 6), (1, 9), (2, 6); int(1..3)]
conjure-output/model000001-solution000034.solution:letting x be [(1, 6), (1, 9), (2, 7); int(1..3)]
conjure-output/model000001-solution000035.solution:letting x be [(1, 6), (1, 9), (2, 8); int(1..3)]
conjure-output/model000001-solution000036.solution:letting x be [(1, 6), (1, 9), (2, 9); int(1..3)]
conjure-output/model000001-solution000037.solution:letting x be [(1, 7), (1, 6), (2, 6); int(1..3)]
conjure-output/model000001-solution000038.solution:letting x be [(1, 7), (1, 6), (2, 7); int(1..3)]
conjure-output/model000001-solution000039.solution:letting x be [(1, 7), (1, 6), (2, 8); int(1..3)]
conjure-output/model000001-solution000040.solution:letting x be [(1, 7), (1, 6), (2, 9); int(1..3)]
conjure-output/model000001-solution000041.solution:letting x be [(1, 7), (1, 8), (2, 6); int(1..3)]
conjure-output/model000001-solution000042.solution:letting x be [(1, 7), (1, 8), (2, 7); int(1..3)]
conjure-output/model000001-solution000043.solution:letting x be [(1, 7), (1, 8), (2, 8); int(1..3)]
conjure-output/model000001-solution000044.solution:letting x be [(1, 7), (1, 8), (2, 9); int(1..3)]
conjure-output/model000001-solution000045.solution:letting x be [(1, 7), (1, 9), (2, 6); int(1..3)]
conjure-output/model000001-solution000046.solution:letting x be [(1, 7), (1, 9), (2, 7); int(1..3)]
conjure-output/model000001-solution000047.solution:letting x be [(1, 7), (1, 9), (2, 8); int(1..3)]
conjure-output/model000001-solution000048.solution:letting x be [(1, 7), (1, 9), (2, 9); int(1..3)]
conjure-output/model000001-solution000049.solution:letting x be [(1, 8), (1, 6), (2, 6); int(1..3)]
conjure-output/model000001-solution000050.solution:letting x be [(1, 8), (1, 6), (2, 7); int(1..3)]
