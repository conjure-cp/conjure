Generating models for knapsack.essence
Generated models: model000001.eprime
Saved under: conjure-output
Savile Row: conjure-output/model000001.eprime knapsack.param
Running minion for domain filtering.
Running solver: minion
Copying solution to: knapsack-knapsack-000001.solution
Copying solution to: knapsack-knapsack-000002.solution
File: conjure-output/model000001.eprime
language ESSENCE' 1.0

given items_EnumSize: int
given capacity: int
given fin1: int
given gain_Function1D:
        matrix indexed by [int(1..items_EnumSize)] of int(0..capacity)
given fin2: int
given weight_Function1D:
        matrix indexed by [int(1..items_EnumSize)] of int(0..capacity)
find knapsack_Occurrence: matrix indexed by [int(1..items_EnumSize)] of bool
branching on [knapsack_Occurrence]
such that
    sum([toInt(knapsack_Occurrence[i]) * catchUndef(weight_Function1D[i], 0)
             | i : int(1..items_EnumSize)])
    <= capacity,
    sum([toInt(knapsack_Occurrence[i]) * catchUndef(gain_Function1D[i], 0)
             | i : int(1..items_EnumSize)])
    >= 80

--------------------

File: conjure-output/model000001-knapsack-solution000001.solution
language Essence 1.3

letting knapsack be {c, d}
--------------------

File: conjure-output/model000001-knapsack-solution000002.solution
language Essence 1.3

letting knapsack be {a, b, e}
--------------------

