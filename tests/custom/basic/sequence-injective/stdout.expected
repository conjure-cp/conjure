Generating models for sequence-injective.essence
Generated models: model000001.eprime
Saved under: conjure-output
Savile Row: conjure-output/model000001.eprime
Running minion for domain filtering.
Running solver: minion
language ESSENCE' 1.0

letting n be 3
find s_ExplicitBounded_Length: int(0..3)
find s_ExplicitBounded_Values: matrix indexed by [int(1..3)] of int(1..3)
branching on [s_ExplicitBounded_Length, s_ExplicitBounded_Values]
such that
    and([q1 > s_ExplicitBounded_Length -> s_ExplicitBounded_Values[q1] = 1 | q1 : int(1..3)]),
    s_ExplicitBounded_Length <= 3,
    alldifferent_except([toInt(q2 <= s_ExplicitBounded_Length) * catchUndef(s_ExplicitBounded_Values[q2], 0)
                             | q2 : int(1..3)],
                        0)
conjure-output/model000001-solution000001.solution:letting s be sequence()
conjure-output/model000001-solution000002.solution:letting s be sequence(1)
conjure-output/model000001-solution000003.solution:letting s be sequence(2)
conjure-output/model000001-solution000004.solution:letting s be sequence(3)
conjure-output/model000001-solution000005.solution:letting s be sequence(1, 2)
conjure-output/model000001-solution000006.solution:letting s be sequence(1, 3)
conjure-output/model000001-solution000007.solution:letting s be sequence(2, 1)
conjure-output/model000001-solution000008.solution:letting s be sequence(2, 3)
conjure-output/model000001-solution000009.solution:letting s be sequence(3, 1)
conjure-output/model000001-solution000010.solution:letting s be sequence(3, 2)
conjure-output/model000001-solution000011.solution:letting s be sequence(1, 2, 3)
conjure-output/model000001-solution000012.solution:letting s be sequence(1, 3, 2)
conjure-output/model000001-solution000013.solution:letting s be sequence(2, 1, 3)
conjure-output/model000001-solution000014.solution:letting s be sequence(2, 3, 1)
conjure-output/model000001-solution000015.solution:letting s be sequence(3, 1, 2)
conjure-output/model000001-solution000016.solution:letting s be sequence(3, 2, 1)
