Generating models for function.essence
Generated models: model000001.eprime
Saved under: conjure-output-complete
Savile Row: conjure-output-complete/model000001.eprime
Running minion for domain filtering.
Running solver: minion
Copying solution to: function-000001.solution
Copying solution to: function-000002.solution
Copying solution to: function-000003.solution
Copying solution to: function-000004.solution
Copying solution to: function-000005.solution
Copying solution to: function-000006.solution
Copying solution to: function-000007.solution
Copying solution to: function-000008.solution
Copying solution to: function-000009.solution
Copying solution to: function-000010.solution
language ESSENCE' 1.0

find i_ExplicitVarSizeWithMarkerR2_Marker: int(0..6)
find i_ExplicitVarSizeWithMarkerR2_Values_Occurrence: matrix indexed by [int(1..6), int(1..4)] of bool
branching on [i_ExplicitVarSizeWithMarkerR2_Marker, i_ExplicitVarSizeWithMarkerR2_Values_Occurrence]
find conjure_aux1_ExplicitVarSizeWithMarkerR2_Marker: matrix indexed by [int(1..4)] of int(0..6)
find conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence:
        matrix indexed by [int(1..4), int(1..6), int(1..4)] of bool
such that
    and([and([q3 + 1 <= conjure_aux1_ExplicitVarSizeWithMarkerR2_Marker[q1] ->
              [-toInt(conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1, q3, q7]) | q7 : int(1..4)] <lex
              [-toInt(conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1, q3 + 1, q8]) | q8 : int(1..4)]
                  | q3 : int(1..5)])
             | q1 : int(1..4), q1 < 4]),
    and([and([q4 > conjure_aux1_ExplicitVarSizeWithMarkerR2_Marker[q1] ->
              and([conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1, q4, q9] = false | q9 : int(1..4)])
                  | q4 : int(1..6)])
             | q1 : int(1..4), q1 < 4]),
    and([conjure_aux1_ExplicitVarSizeWithMarkerR2_Marker[q1] <= 6 | q1 : int(1..4), q1 < 4]),
    and([and([q17 <= i_ExplicitVarSizeWithMarkerR2_Marker ->
              or([q19 <= conjure_aux1_ExplicitVarSizeWithMarkerR2_Marker[q1] /\
                  (and([conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1, q19, q20] ->
                        or([i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q17, q22] /\
                            catchUndef([q22, q1 + 1, q1; int(0..2)][toInt(q1 = q22) + toInt(q1 + 1 = q22) * 2], 1) = q20
                                | q22 : int(1..4)])
                            | q20 : int(1..4)])
                   /\
                   and([i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q17, q28] ->
                        conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence
                            [q1, q19,
                             catchUndef([q28, q1 + 1, q1; int(0..2)][toInt(q1 = q28) + toInt(q1 + 1 = q28) * 2], 1)]
                            | q28 : int(1..4)]))
                      | q19 : int(1..6)])
                  | q17 : int(1..6)])
             | q1 : int(1..4), q1 < 4]),
    and([and([q37 <= conjure_aux1_ExplicitVarSizeWithMarkerR2_Marker[q1] ->
              or([q39 <= i_ExplicitVarSizeWithMarkerR2_Marker /\
                  (and([i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q39, q40] ->
                        or([conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1, q37, q42] /\
                            catchUndef([q42, q1 + 1, q1; int(0..2)][toInt(q1 = q42) + toInt(q1 + 1 = q42) * 2], 1) = q40
                                | q42 : int(1..4)])
                            | q40 : int(1..4)])
                   /\
                   and([conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1, q37, q48] ->
                        i_ExplicitVarSizeWithMarkerR2_Values_Occurrence
                            [q39,
                             catchUndef([q48, q1 + 1, q1; int(0..2)][toInt(q1 = q48) + toInt(q1 + 1 = q48) * 2], 1)]
                            | q48 : int(1..4)]))
                      | q39 : int(1..6)])
                  | q37 : int(1..6)])
             | q1 : int(1..4), q1 < 4]),
    and([flatten([[i_ExplicitVarSizeWithMarkerR2_Marker; int(1)],
                  flatten([[-toInt(i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q59, q60]) | q60 : int(1..4)]
                               | q59 : int(1..6)]);
                      int(1..2)])
         <=lex
         flatten([[conjure_aux1_ExplicitVarSizeWithMarkerR2_Marker[q1]; int(1)],
                  flatten([[-toInt(conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1, q61, q62])
                                | q62 : int(1..4)]
                               | q61 : int(1..6)]);
                      int(1..2)])
             | q1 : int(1..4), q1 < 4]),
    and([conjure_aux1_ExplicitVarSizeWithMarkerR2_Marker[q1] = 0 /\
         and([conjure_aux1_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1, q68, q69] = false
                  | q68 : int(1..6), q69 : int(1..4)])
             | q1 : int(1..4), !(q1 < 4)]),
    and([q10 + 1 <= i_ExplicitVarSizeWithMarkerR2_Marker ->
         [-toInt(i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q10, q14]) | q14 : int(1..4)] <lex
         [-toInt(i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q10 + 1, q15]) | q15 : int(1..4)]
             | q10 : int(1..5)]),
    and([q11 > i_ExplicitVarSizeWithMarkerR2_Marker ->
         and([i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q11, q16] = false | q16 : int(1..4)])
             | q11 : int(1..6)]),
    i_ExplicitVarSizeWithMarkerR2_Marker <= 6

Generating models for function.essence
Generated models: model000001.eprime
Saved under: conjure-output-quick
Savile Row: conjure-output-quick/model000001.eprime
Running minion for domain filtering.
Running solver: minion
Copying solution to: function-000001.solution
Copying solution to: function-000002.solution
Copying solution to: function-000003.solution
Copying solution to: function-000004.solution
Copying solution to: function-000005.solution
Copying solution to: function-000006.solution
Copying solution to: function-000007.solution
Copying solution to: function-000008.solution
Copying solution to: function-000009.solution
Copying solution to: function-000010.solution
language ESSENCE' 1.0

find i_ExplicitVarSizeWithMarkerR2_Marker: int(0..6)
find i_ExplicitVarSizeWithMarkerR2_Values_Occurrence: matrix indexed by [int(1..6), int(1..4)] of bool
branching on [i_ExplicitVarSizeWithMarkerR2_Marker, i_ExplicitVarSizeWithMarkerR2_Values_Occurrence]
such that
    and([flatten([[i_ExplicitVarSizeWithMarkerR2_Marker; int(1)],
                  flatten([[-toInt(i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q9, q10]) | q10 : int(1..4)]
                               | q9 : int(1..6)]);
                      int(1..2)])
         <=lex
         flatten([[i_ExplicitVarSizeWithMarkerR2_Marker; int(1)],
                  flatten([[-toInt(i_ExplicitVarSizeWithMarkerR2_Values_Occurrence
                                       [q11,
                                        catchUndef([q12, q1 + 1, q1; int(0..2)]
                                                       [toInt(q1 = q12) + toInt(q1 + 1 = q12) * 2],
                                                   1)])
                                | q12 : int(1..4)]
                               | q11 : int(1..6)]);
                      int(1..2)])
             | q1 : int(1..4), q1 < 4]),
    and([q2 + 1 <= i_ExplicitVarSizeWithMarkerR2_Marker ->
         [-toInt(i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q2, q6]) | q6 : int(1..4)] <lex
         [-toInt(i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q2 + 1, q7]) | q7 : int(1..4)]
             | q2 : int(1..5)]),
    and([q3 > i_ExplicitVarSizeWithMarkerR2_Marker ->
         and([i_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q3, q8] = false | q8 : int(1..4)])
             | q3 : int(1..6)]),
    i_ExplicitVarSizeWithMarkerR2_Marker <= 6

