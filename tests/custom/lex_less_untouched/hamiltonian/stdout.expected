language ESSENCE' 1.0
given n: int(1..)
letting U be n - 1
letting W be n - 2
letting N be n * n
letting M be U * U
letting V be M - 1
letting let1 be N - 1
find p_ExplicitBounded_Length: int(N)
find p_ExplicitBounded_Values: matrix indexed by [int(1..N)] of int(0..let1)
find P: matrix indexed by [int(0..V)] of bool
branching on [p_ExplicitBounded_Length, p_ExplicitBounded_Values, P]
such that
    and([and([|p_ExplicitBounded_Values[k] / n - p_ExplicitBounded_Values[k % N + 1] / n| +
              |p_ExplicitBounded_Values[k] % n - p_ExplicitBounded_Values[k % N + 1] % n|
              = 1,
              k <= N, k % N + 1 <= N, k <= N, k % N + 1 <= N;
                  int(1..5)])
             | k : int(1..N)]),
    p_ExplicitBounded_Values[1] = 0,
    1 <= N,
    p_ExplicitBounded_Values[2] = 1,
    2 <= N,
    p_ExplicitBounded_Values[N] = n,
    P[0],
    and([(and([p_ExplicitBounded_Values[k] / n = p_ExplicitBounded_Values[k % N + 1] / n, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\
          and([p_ExplicitBounded_Values[k] % n = p_ExplicitBounded_Values[k % N + 1] % n - 1, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\ (p_ExplicitBounded_Values[k] / n < W /\ k <= N)
          -> and([P[p_ExplicitBounded_Values[k] / n * U + p_ExplicitBounded_Values[k] % n], k <= N, k <= N; int(1..3)]))
         /\
         (and([p_ExplicitBounded_Values[k] / n = p_ExplicitBounded_Values[k % N + 1] / n - 1, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\
          and([p_ExplicitBounded_Values[k] % n = p_ExplicitBounded_Values[k % N + 1] % n, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\ (p_ExplicitBounded_Values[k] % n > 0 /\ k <= N)
          ->
          and([P[p_ExplicitBounded_Values[k] / n * U + p_ExplicitBounded_Values[k] % n - 1], k <= N, k <= N;
                   int(1..3)]))
         /\
         (and([p_ExplicitBounded_Values[k] / n = p_ExplicitBounded_Values[k % N + 1] / n, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\
          and([p_ExplicitBounded_Values[k] % n = p_ExplicitBounded_Values[k % N + 1] % n + 1, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\ (p_ExplicitBounded_Values[k] / n > 0 /\ k <= N)
          ->
          and([P[(p_ExplicitBounded_Values[k] / n - 1) * U + p_ExplicitBounded_Values[k] % n - 1], k <= N, k <= N;
                   int(1..3)]))
         /\
         (and([p_ExplicitBounded_Values[k] / n = p_ExplicitBounded_Values[k % N + 1] / n + 1, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\
          and([p_ExplicitBounded_Values[k] % n = p_ExplicitBounded_Values[k % N + 1] % n, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\ (p_ExplicitBounded_Values[k] % n < W /\ k <= N)
          ->
          and([P[(p_ExplicitBounded_Values[k] / n - 1) * U + p_ExplicitBounded_Values[k] % n], k <= N, k <= N;
                   int(1..3)]))
             | k : int(1..N)]),
    and([(and([p_ExplicitBounded_Values[k] / n = p_ExplicitBounded_Values[k % N + 1] / n, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\
          and([p_ExplicitBounded_Values[k] % n = p_ExplicitBounded_Values[k % N + 1] % n - 1, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\ (p_ExplicitBounded_Values[k] / n > 0 /\ k <= N)
          ->
          !and([P[(p_ExplicitBounded_Values[k] / n - 1) * U + p_ExplicitBounded_Values[k] % n], k <= N, k <= N;
                    int(1..3)]))
         /\
         (and([p_ExplicitBounded_Values[k] / n = p_ExplicitBounded_Values[k % N + 1] / n - 1, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\
          and([p_ExplicitBounded_Values[k] % n = p_ExplicitBounded_Values[k % N + 1] % n, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\ (p_ExplicitBounded_Values[k] % n < W /\ k <= N)
          ->
          !and([P[p_ExplicitBounded_Values[k] / n * U + p_ExplicitBounded_Values[k] % n], k <= N, k <= N; int(1..3)]))
         /\
         (and([p_ExplicitBounded_Values[k] / n = p_ExplicitBounded_Values[k % N + 1] / n, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\
          and([p_ExplicitBounded_Values[k] % n = p_ExplicitBounded_Values[k % N + 1] % n + 1, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\ (p_ExplicitBounded_Values[k] / n < W /\ k <= N)
          ->
          !and([P[p_ExplicitBounded_Values[k] / n * U + p_ExplicitBounded_Values[k] % n - 1], k <= N, k <= N;
                    int(1..3)]))
         /\
         (and([p_ExplicitBounded_Values[k] / n = p_ExplicitBounded_Values[k % N + 1] / n + 1, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\
          and([p_ExplicitBounded_Values[k] % n = p_ExplicitBounded_Values[k % N + 1] % n, k <= N, k % N + 1 <= N;
                   int(1..3)])
          /\ (p_ExplicitBounded_Values[k] % n > 0 /\ k <= N)
          ->
          !and([P[(p_ExplicitBounded_Values[k] / n - 1) * U + p_ExplicitBounded_Values[k] % n - 1], k <= N, k <= N;
                    int(1..3)]))
             | k : int(1..N)]),
    and([k >= U /\ k < W * U /\ k % U > 0 /\ k % U < W ->
         (P[k - U] /\ P[k + U] /\ P[k - 1] /\ P[k + 1] -> P[k]) /\
         (!P[k - U] /\ !P[k + U] /\ !P[k - 1] /\ !P[k + 1] -> !P[k])
             | k : int(0..V)]),
    P <=lex [P[(W - k / U) * U + k % U] | k : int(0..V)],
    P <=lex [P[(W - k % U) * U + k / U] | k : int(0..V)],
    P <=lex [P[k % U * U + k / U] | k : int(0..V)],
    P <=lex [P[(W - k / U) * U + W - k % U] | k : int(0..V)],
    P <=lex [P[k / U * U + W - k % U] | k : int(0..V)],
    P <=lex [P[k % U * U + W - k / U] | k : int(0..V)],
    P <=lex [P[(W - k % U) * U + W - k / U] | k : int(0..V)],
    allDiff(p_ExplicitBounded_Values),
    and([or([p_ExplicitBounded_Values[q2] = q1 | q2 : int(1..N)]) | q1 : int(0..let1)])
