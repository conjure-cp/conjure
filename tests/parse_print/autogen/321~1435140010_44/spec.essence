language Essence 1.3

find var1:
        relation (minSize 2 , maxSize 2) of
            (partition (maxNumParts 2, partSize 4, regular) from bool)
such that
    allDiff([relation(([false, false, false, true, true; int(12, 6, 9..11)],
                       partition({true, true, true}, {true, true, false}, {true, true, true},
                                 {false, true}, {false, true}),
                       (mset() : `mset of bool`)),
                      ([false, true; int(2, 0..0)], partition({true}, {false, true, true}),
                       mset(true)),
                      ([true, true, false, true; int(0, 4, 5..6)],
                       partition({true, false, true, true, false}, {true}), mset(false, false, false)),
                      ([false, false, false, true, false; int(10..14)],
                       partition({false, false}, {true, false, true, true, true},
                                 {true, true, true, false, true}, {false, true}, {true, false, true, false}),
                       (mset() : `mset of bool`)),
                      ([true, false, true, false; int(0, 10, 7, 11..11)],
                       partition({true}, {true, false}), mset(true, true, true))),
             relation(([true, false, false, false, true; int(1..5)],
                       partition({false, false}, {false}), mset(true, true, false)),
                      ([false, false, true, false; int(9, 6..8)],
                       partition({true, false, false, false, false}, {true, false, true, true},
                                 {false, true}, {false, false, true, false}),
                       mset(true))),
             relation(([false, false, true, false; int(10, 6..8)],
                       partition({true}, {true, true}, {true, false, false, false},
                                 {false, false, false}),
                       mset(true, false)),
                      ([false, true, true; int(2, 3, 8..8)],
                       partition({true, false, false, true, false}, {false, true, false, true},
                                 {true, false}, {true, true, true, false, false}),
                       mset(false, false, true)),
                      ([false, true, false, true, false; int(1, 7..8, 9..10)],
                       partition({true, false}, {true, true, false, true}, {false}),
                       mset(false, false, true)),
                      ([false, true, true; int(7..8, 6..6)], partition({true, true}), mset(true)),
                      ([true, true, true; int(5..6, 1..1)],
                       partition({true, true, true, true}, {false}, {true, true},
                                 {true, false, false, true}, {false, false, true, true}),
                       mset(false, true, true))),
             relation(([true, true, true; int(8, 1, 5..5)],
                       partition({true, true}, {true, false, false}), (mset() : `mset of bool`)),
                      ([true, false; int(3, 5..5)], partition({false, false}), mset(true)),
                      (([] : `matrix indexed by [int] of bool`),
                       partition({false, false}, {true, true, true, false}),
                       mset(false, false, true))); int(9, 0..2)]),
    image((function() : `function (bool,
                                   bool) --> matrix indexed by [int] of bool`),
          (true -> true, false -> false))[sum([l_2 % l_1
                                                   | l_1 : int(2..4, 1..5), l_2 : int(3..3, 2)])],
    (mset() : `mset of mset of function bool --> bool`) subsetEq
    (mset() : `mset of mset of function bool --> bool`),
    together({and([true, true, false, true; int(2, 11, 4, 3..3)]),
              false >= false <-> false >= false, (true <-> false) < (false > false)},
             partition({true -> true}, {true <= false, false <-> false, false <-> false},
                       {false -> true, true >= false, false <= true, false <-> true},
                       {false -> false, true > false, true >= true, true <-> true},
                       {true != true, !true, false <-> false, true <= false, true >= false})
             -
             (partition({false, false, false, true, false}, {true, true},
                        {false, false, false, false}, {true, true, false, false, true})
              -
              partition({true}, {true, true, true}, {false, true, false},
                        {false, true, true, true}))),
    apart({({false}, mset(true)), ({true, true, true}, mset(true, false))},
          (partition() : `partition from (set of bool, mset of bool)`)),
    false,
    flatten([[false, false, true; int(0..2)],
             [false, false, false, true; int(7..10)],
             [false, false, false, false, true; int(1..3, 10..11)],
             [false, false, true, true, true; int(2, 10, 0, 12, 7..7)]; int(9..10, 3, 7..7)])
    .<= ([] : `matrix indexed by [int] of bool`)
