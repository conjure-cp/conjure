language Essence 1.3

find var1: set of bool
find var2: mset (minSize 5, maxSize 5, maxOccur 3) of int(0, 5)
find var3: partition (maxNumParts 1, maxPartSize 4, regular) from bool
find var4: mset (minOccur 1, maxOccur 4) of bool
such that
    (mset(false) subsetEq mset(false)) < (!false > (5 < 5)),
    apart({0, 1} union {2, 3},
          partition({5}, {2, 2, 2, 4}, {2, 3, 2, 5}, {3}) - partition({5, 2, 5, 4}, {1, 2, 0, 1, 3}, {3, 5, 1, 4, 3})),
    inverse(function(mset(false)
                         --> partition({false, true, true, false}, {true, false, false, false},
                                       {false, true, false, false, true}, {false}),
                     mset(true, true, true) --> partition({false}, {false, false, true, false, false}),
                     (mset() : `mset of bool`) --> partition({true, true, true, true}, {false, false, false})),
            function(partition({false, true, true}) --> mset(false, false),
                     partition({false, true}, {false, false}, {true}, {false, false, true},
                               {false, true, false, true, true})
                         --> mset(true))),
    inverse(function(true --> tuple (true)), (function() : `function tuple(bool) --> bool`)),
    mset((false, false), (true, true), (true, true)) subsetEq mset((true, false), (true, false)),
    true,
    false
