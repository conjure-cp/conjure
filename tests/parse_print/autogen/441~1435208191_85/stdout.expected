language Essence 1.3

find var1:
        (partition (maxNumParts 3, minPartSize 4) from bool,
         mset (minSize 0, maxSize 4, minOccur 2, maxOccur 4) of bool,
         function (minSize 4, maxSize 5, surjective) bool --> bool)
find var2:
        (bool, matrix indexed by [int(5, 4)] of bool, set (minSize 1) of bool,
         mset (maxSize 0, minOccur 0, maxOccur 5) of bool)
find var3: tuple (mset (size 3, minOccur 5, maxOccur 5) of bool)
such that
    !!false > image(function(true --> true, false --> false, false --> true, false --> false), false != false),
    together({false, true, false}, partition({false, true, true, true}) - (partition() : `partition from bool`)),
    allDiff([[false, true; int(1..2)], [true, false, true; int(3, 8, 6)]; int(3..4)]),
    apart({function(true --> false), function(true --> false), function(true --> false, false --> true)},
          partition({function(true --> true, false --> false, true --> false, true --> true),
                     function(true --> false, false --> true), (function() : `function bool --> bool`),
                     (function() : `function bool --> bool`)})),
    [l_1 | l_1 : bool][freq(mset(false), true >= true)],
    true
