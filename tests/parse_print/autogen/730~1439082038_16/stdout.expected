language Essence 1.3

find var1: int(0, 0)
such that
    function(({} : `set of matrix indexed by [int] of partition from int`)
                 --> [mset(mset(true), (mset() : `mset of bool`)), (mset() : `mset of mset of bool`),
                      (mset() : `mset of mset of bool`), mset(mset(false, false), mset(false, true, true));
                          int(7, 12, 9, 2)],
             {[partition({4, 4, 4, 4, 1}, {4, 5}); int(1)],
              [partition({5}, {2}, {2, 1, 3, 5}, {4}), (partition() : `partition from int`); int(3, 2)],
              [partition({3, 1, 5, 4}, {3, 1, 4, 3, 5}, {5, 1, 1, 5, 0}, {2, 5, 5, 3}); int(1)]}
                 --> [(mset() : `mset of mset of bool`), (mset() : `mset of mset of bool`),
                      mset(mset(false, true, false), mset(false)), mset(mset(true, true, false), mset(false, true)),
                      (mset() : `mset of mset of bool`);
                          int(3..5, 13..14)],
             {[partition({2, 4, 1, 3, 3}, {1, 4, 1, 2, 3}, {2, 2, 5, 5, 3}),
               partition({2, 1, 0}, {0, 2, 5, 5}, {5, 5, 2, 2}, {2, 1}, {1, 0, 2, 4}),
               partition({3, 4, 5, 2, 1}, {2}, {4, 1}, {3, 4}, {2}), partition({3, 5, 5}, {0, 5, 5, 5, 4}, {2});
                   int(0, 9..10, 6)],
              [partition({5, 1}, {2, 1}), partition({2}), partition({0, 4, 1, 0, 2}, {2, 2, 1, 3, 3}),
               partition({2, 4, 4, 4, 5});
                   int(6..7, 10..11)],
              [partition({4, 3, 4, 4}, {4, 4, 4, 5}, {3, 0}, {3, 1, 2, 2, 0}), partition({2, 2}, {0}); int(6, 4)]}
                 --> ([] : `matrix indexed by [int] of mset of mset of bool`),
             {[partition({4, 1, 5}, {4, 2, 4, 2, 5}, {0}, {2, 3, 2, 0}, {3, 5, 5}), partition({0, 0}, {0, 1}),
               partition({0, 4, 1}, {0, 3, 5}, {2}, {0}, {4, 2, 1, 2, 2}), (partition() : `partition from int`);
                   int(5, 8, 6..7)],
              [(partition() : `partition from int`), partition({1, 3, 3, 2}, {0, 0, 4}, {1}); int(1..2)]}
                 --> ([] : `matrix indexed by [int] of mset of mset of bool`))
    =
    function({([] : `matrix indexed by [int] of partition from int`),
              [partition({0, 1}, {3, 0, 0, 5, 3}, {0, 2}, {5, 5, 2, 3}), partition({2}),
               partition({1, 3, 5}, {3}, {4, 3, 1, 2}), (partition() : `partition from int`);
                   int(9, 6, 1..2)]}
                 --> [mset((mset() : `mset of bool`), mset(false, true, true), mset(true, false, false)),
                      mset((mset() : `mset of bool`), mset(false, false));
                          int(3..4)],
             {[partition({3, 1}, {1, 3, 3, 2}), partition({1, 1}, {5}),
               partition({4, 2, 3, 0}, {5, 0, 0, 4}, {4, 2, 2, 2}, {5, 0, 1, 4}),
               partition({1, 2}, {5, 3}, {3, 3, 1, 1, 1}), partition({2, 3, 3, 5}, {4, 2, 4, 3, 5}, {5, 0, 1}, {0});
                   int(0, 10..13)]}
                 --> [(mset() : `mset of mset of bool`), mset(mset(false), mset(false)),
                      mset(mset(false), mset(true, false, true), mset(false)),
                      mset(mset(true, true, false), mset(true), mset(true, false));
                          int(2..3, 8..9)],
             {[partition({2, 1}, {2, 2, 4}, {5, 4, 4, 0, 4}, {3, 0, 2, 5}, {5, 5}),
               partition({3, 5, 0, 0}, {2, 0, 0}, {3, 1, 5, 0}, {5, 2, 0, 0}, {1, 3}),
               partition({5, 4, 2, 2, 1}, {5, 1, 5, 4});
                   int(1..3)]}
                 --> [mset((mset() : `mset of bool`), mset(false)), mset(mset(true), mset(false)),
                      mset((mset() : `mset of bool`), mset(true, false, true)), mset(mset(true)),
                      mset(mset(true), mset(false), mset(true, true));
                          int(2..3, 15, 11, 9)],
             {[partition({0}, {3, 2, 2}); int(2)],
              [partition({4, 2}, {4, 4, 5}, {2}, {5, 3, 1}, {0}), partition({1}, {4}); int(3, 1)],
              [partition({5, 1, 2}), partition({4, 5, 0}, {5}, {1, 1}, {5}),
               partition({5, 4, 1, 1}, {0, 2, 0, 3}, {2, 3});
                   int(0..2)]}
                 --> [mset(mset(false, false)), mset(mset(true, false), mset(false, true, true)),
                      mset(mset(true, false), (mset() : `mset of bool`), mset(false, false, true)),
                      mset(mset(false, false, true));
                          int(8, 6, 3..4)]),
    apart({{mset({1}, {2, 3})}, {mset({3}, {1, 0, 0}), mset({2})}},
          partition({({} : `set of mset of set of int`),
                     {mset({4, 2, 1}, {4}, {5, 1}), (mset() : `mset of set of int`), mset({4, 4, 3}, {4, 2, 4})},
                     {mset(({} : `set of int`), {2}, ({} : `set of int`))},
                     {mset({2, 1}, {3, 4}, {5, 2, 4}), mset({2}, {5, 0, 4}, ({} : `set of int`)),
                      mset(({} : `set of int`), {5, 1, 5})}},
                    {{mset(({} : `set of int`), ({} : `set of int`)), mset({5})},
                     {mset(({} : `set of int`)), mset(({} : `set of int`), {2})}, ({} : `set of mset of set of int`),
                     {mset({1})}},
                    {{(mset() : `mset of set of int`), mset(({} : `set of int`))}})),
    image(function(([] : `matrix indexed by [int] of set of mset of bool`)
                       --> together({[0, 3, 2, 1; int(10, 3, 8, 0)], ([] : `matrix indexed by [int] of int`)},
                                    (partition() : `partition from matrix indexed by [int] of int`)),
                   [{mset(true, true, true)}, {mset(false)}, {mset(false), mset(false, true, false)}; int(6..7, 4)]
                       --> [5 != 1 | l_1 : bool, true <-> false][min((mset() : `mset of int`))],
                   ([] : `matrix indexed by [int] of set of mset of bool`) --> and(flatten([false, false; int(1..2)])),
                   [{mset(false, false)}, {mset(false, true, false)}; int(0, 5)] --> !!(true -> true)),
          [({} : `set of mset of bool`)
               | l_2 : set (minSize var1) of mset (minSize 2, maxSize 3, minOccur var1 ** var1) of bool,
                 l_3 : set of mset (minSize 1, maxSize 2, maxOccur var1 % var1) of bool, max({3}) >= 3 ** 3 ** (-0)])
minimising var1
