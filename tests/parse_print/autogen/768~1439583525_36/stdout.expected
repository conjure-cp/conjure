language Essence 1.3

find var1: bool
such that
    var1,
    var1,
    var1,
    [l_1 | l_1 : set (maxSize freq(mset(var1), var1) - (1 - 3) % 1 ** 3) of int(1, 4),
           apart({function(3 --> true, 2 --> true)},
                 partition({function(0 --> true, 2 --> true, 5 --> false, 1 --> true),
                            function(1 --> true, 2 --> true)},
                           {function(1 --> true), function(5 --> true, 3 --> true)}))
           -> sum([3, 2, 1, 5; int(3, 9, 2, 5)]) <= 0 ** 5 ** factorial(3),
           or([together({false, true}, partition({true, false, true, true})) | l_2 : bool, l_3 : bool, l_3])]
    in
    [{[{4, 1, 3}; int(2)]}, {[{0}; int(2)]},
     {[{1, 2, 0}, {1, 0}, {4, 3, 4}, {2, 1, 5}, ({} : `set of int`); int(1..5)],
      [{0, 1}, {3, 0}, {4, 1, 0}, {0}; int(7, 4, 6..7)], [{1, 1, 3}; int(0)]};
         int(2, 6..7)]
        [product([factorial(-l_4)
                      | l_4 : int(2, 4), l_5 : int(2, 0), allDiff(([] : `matrix indexed by [int] of int`)),
                        l_5 < l_5 <-> !false])],
    var1,
    var1
