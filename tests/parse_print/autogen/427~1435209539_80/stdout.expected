language Essence 1.3

find var1: bool
find var2: bool
such that
    mset([var1, var1; int(3, 4)], [var2, var1, var1, var2, var1; int(1, 8..9, 5..6)]) supset
    mset([var2, var2; int(1..2)], ([] : `matrix indexed by [int] of bool`), [var2; int(1)]),
    false <= var1,
    image(function(partition({false}, {true, false}) --> !false,
                   partition({true}, {true, false, true, false}, {false, false}) --> !false,
                   partition({false}, {true, false, false, false}, {true, false}, {true}) --> true = false,
                   partition({false}, {true, false}, {true}, {true, true}, {false, false, false}) --> true),
          partition({true, false, true}) - (partition() : `partition from bool`)),
    image(function(function(false --> false, false --> true, true --> true, true --> true) --> true,
                   function(true --> false, true --> true) --> false <-> true),
          function(true <= true --> false = true, false <-> true --> true = false)),
    (({} : `set of bool`) supsetEq {var2}) > (mset(var1) supsetEq mset(var1, var1, var2))
