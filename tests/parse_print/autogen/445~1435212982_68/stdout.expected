language Essence 1.3

find var1:
        mset (maxSize -2 / toInt(true), maxOccur 5 / 1 - -3) of
            function (maxSize 0 / 4, total, bijective)
                (bool, bool, bool, bool) --> function (size 3, total, surjective) bool --> bool
such that
    ([] : `matrix indexed by [int] of bool`)[5] <=
    (function(false --> true, true --> true, false --> false) = function(false --> false)),
    function([false, false, false; int(0, 2, 1)] --> {false, false}, [false, true; int(3, 2)] --> {true},
             [true, false; int(4..5)] --> {true}, [false, true, true; int(8, 0, 2)] --> {false, false, true})
    subset function([true; int(0)] --> {true}, [true; int(2)] --> {false}),
    partition({false}) - (partition() : `partition from bool`) =
    partition({false, true, true}) - partition({false, false}, {false, true, false, true}, {true}, {true, false, true}),
    true,
    and([true, false, false, false, false; int(1..5)]) >= allDiff(([] : `matrix indexed by [int] of bool`)),
    !false
