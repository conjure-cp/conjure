language Essence 1.3

find var1:
        (int(5, 0), matrix indexed by [int(3, 3..4)] of mset (maxOccur 5) of bool,
         ((bool, bool, bool, bool), set (minSize 4) of bool, bool))
find var2:
        relation (size product([2, 0, 5; int(4..5, 7)])) of
            (matrix indexed by [int(4, 2)] of function (maxSize 2) bool --> bool *
             mset (maxSize toInt(false), minOccur 5, maxOccur 5) of matrix indexed by [int(5, 3..4)] of bool *
             function (size 1, surjective) set (maxSize 1) of int(2..4, 4) -->
                 matrix indexed by [int(0..2, 3..5)] of int(2..4, 0..3))
find var3:
        set (size min([4, 1, 3, 1, 0; int(5..9)])) of
            matrix indexed by [int(5, 1..4)] of relation of (int(2..5, 2) * bool)
find var4:
        mset (size 4, minOccur 5, maxOccur 5) of
            (partition (maxNumParts 1, maxPartSize 0) from bool, relation (maxSize 0) of (bool * bool * bool),
             int(5, 5))
find var5:
        function (minSize 0) relation (size 2 ** 5) of (mset (maxSize 1, maxOccur 1) of int(3, 4..5)) -->
            relation (size 4 % 4) of
                (relation (minSize 5, maxSize 5) of (int(2, 2..3) * int(4, 3) * bool * bool) * bool)
such that
    false,
    toInt(true) in {5, 1},
    (false -> true) <-> false
