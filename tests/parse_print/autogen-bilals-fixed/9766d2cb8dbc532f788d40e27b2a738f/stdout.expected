language Essence 1.3

find var1: relation (minSize 1, maxSize 5) of (bool)
find var2: mset (minSize 2, maxOccur 5) of int(1, 2..3)
find var3: relation (minSize 4, maxSize 4) of (int(0, 1) * int(2, 0..5) * int(2, 4..5))
such that
    function([false, false; int(0, 1)] --> partition({1, 4, 3}, {0}, {0, 5, 4, 4}, {3, 4, 1, 1, 3}),
             [true, false, false; int(0..1, 4)] --> partition({3, 5}, {3, 0, 0, 2}, {3, 4, 3, 0}),
             [true, true, false, false; int(0..3)] --> partition({2}), [false; int(1)] --> partition({3, 0, 0, 5}))
    subset function([true; int(1)] --> partition({3, 3, 1, 4}, {5}, {1, 3, 1, 0, 2}, {2, 2, 3, 4, 4})),
    !({false} supsetEq {true}),
    together(({} : `set of partition from int`),
             partition({partition({5, 5, 1}), partition({3}, {2})},
                       {partition({3, 4, 2, 2}), partition({0, 2}, {1}, {0, 2, 0, 0, 3}, {3}, {4, 2})},
                       {partition({2}, {4, 4}, {4, 4, 4, 4}, {5, 1, 1, 2})},
                       {partition({1, 3, 1, 2}, {3, 1, 1}), partition({1}, {2, 3, 5}, {1, 5, 4}, {5, 2, 3}),
                        partition({3, 2, 4, 5, 1}, {3}, {1, 2, 2}, {0, 3, 0, 0}, {1})},
                       {partition({0, 1, 1, 1}, {4, 2}, {1, 2, 5}, {2}, {2, 1, 2, 4}),
                        partition({1, 3}, {0, 0, 3, 4, 0}, {5, 1, 4})})),
    or([l_1 | l_1 : bool, l_1]),
    max(var2) in party(4 / 2, partition({1, 2, 1, 1, 4}, {2, 1, 5, 5}, {2, 3, 0, 3}, {3, 1})),
    true,
    ((false -> true) <-> false <= false) ->
    [true; int(2)] <=lex [false, true, false, true, false; int(11..12, 7, 13, 14)]
