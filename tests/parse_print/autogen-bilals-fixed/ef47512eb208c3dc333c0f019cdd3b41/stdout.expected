language Essence 1.3

find var1: set (minSize 1, maxSize 2) of int(4, 0)
such that
    true,
    true,
    allDiff([[mset(true, false), mset(false), mset(false, true), mset(false), mset(true, true, false);
                  int(14, 9, 4, 12, 8)],
             [mset(true, false), mset(false, false, false); int(2..3)],
             [mset(true), mset(false, true), mset(false), mset(true); int(8..9, 10, 4)],
             [mset(true, true, true), mset(false, true), mset(false); int(3, 6..7)];
                 int(2..3, 7, 9)]),
    true,
    ([false; int(0)], (false, 1), {5, 3}, [true, false; int(0..1)]) in
    (mset() : `mset of (matrix indexed by [int] of bool, (bool, int), set of int, matrix indexed by [int] of bool)`),
    [true; int(2)] <lex
    flatten([([] : `matrix indexed by [int] of bool`), [false, true, false; int(2..4)],
             [false, true, true, true, true; int(4..5, 9..11)], ([] : `matrix indexed by [int] of bool`),
             [true; int(0)];
                 int(6..8, 0..1)]),
    inverse(function(partition({5, 3, 2}, {5, 5}, {0}) --> false,
                     partition({4, 0}, {3, 0, 1}, {1, 5, 3, 1, 5}, {5, 5, 2, 1}, {2}) --> false),
            function((0 > 5) in {false, false}
                         --> partition({1 % 3, 0 % 1, 3}, {1, 0}, {0, 3}, {2 - 3}, {factorial(1), 5 - 0}),
                     image(function(true --> true, false --> true, true --> true), true)
                         --> partition({3, 5, 0, 5}, {3}, {5, 0, 1, 3}, {2, 1, 3}))),
    [l_2 | l_1 : int(5, 0), l_2 : int(5, 1..5), false, true] <=lex
    image((function() : `function mset of bool --> matrix indexed by [int] of int`), mset(false))
