language Essence 1.3

find var1: bool
such that
    apart({mset([5; int(2)]), mset([2; int(0)])},
          partition({mset([0, 3, 3; int(6..8)], [1, 5; int(1..2)]), mset([5; int(1)], [2, 4, 2; int(7..8, 2)]),
                     mset([5; int(1)], [2, 1, 1, 0; int(7..10)], [3, 0; int(3..4)]),
                     mset([1; int(0)], [0, 3, 4, 3; int(9, 0..1, 3)], [1; int(0)]),
                     mset([4, 4; int(0..1)], [4, 0, 0, 2; int(7, 9, 4, 8)], [5, 2, 5; int(8, 4, 5)])},
                    {mset([4, 0, 4, 1, 0; int(5..9)], [2; int(1)]), mset([2, 4; int(2, 1)])},
                    {mset([2, 1, 1, 5; int(11, 12, 4..5)], [2, 0, 3, 3; int(7..10)]),
                     mset([4; int(0)], [3, 5; int(5, 1)]),
                     mset([5; int(0)], [4, 4, 0, 5; int(7, 4..6)], [0, 0; int(3..4)]),
                     mset([5, 0, 0, 5; int(5..6, 8, 4)])},
                    {mset([2, 1; int(1..2)], [3, 5, 5, 5, 3; int(4, 7, 12..14)])})),
    var1,
    var1,
    var1 <-> var1,
    !(!var1 > (var1 -> var1)),
    apart({partition({(1, true, false), (2, false, false)},
                     {(0, false, false), (3, false, true), (1, true, false), (5, true, false), (1, false, false)},
                     {(3, false, false), (2, true, false), (2, false, false)},
                     {(5, true, true), (1, false, true), (4, false, true)}),
           partition({(2, false, false), (4, true, true), (0, false, false), (5, true, true)}, {(4, true, true)},
                     {(1, false, false), (0, false, false), (4, true, true), (5, false, true), (1, true, false)},
                     {(4, true, false), (0, false, false), (1, false, false), (0, true, false)},
                     {(5, true, true), (0, true, true), (0, true, false), (5, false, true), (1, true, true)})},
          partition({partition({(1, false, false), (3, true, false), (0, false, true)},
                               {(1, false, false), (0, true, false), (5, false, true), (1, true, false),
                                (1, true, false)},
                               {(4, true, false), (5, false, false), (5, true, true)}),
                     partition({(1, true, true), (2, false, false)},
                               {(3, false, true), (4, false, true), (0, true, false), (3, false, false),
                                (1, true, true)},
                               {(4, true, false), (0, true, false), (5, false, false)}, {(4, false, true)},
                               {(5, true, false), (4, true, false)})})),
    [3 - 5, 0 ** 3, 3 / 0, 2 / 5; int(2..5)][3 ** 1 ** (-1)] >
    max(party(toInt(var1), partition({1, 1, 1}, {2, 2, 5}, {1, 2, 2}, {2, 5, 4}, {5, 3})))
