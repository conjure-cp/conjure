language Essence 1.3

find var1: bool
find var2: int(4)
such that
    or([(relation((-10, true, 1, -4), (10, true, -7, -1), (-6, false, 4, -6)), partition({partition({5, 7})}),
         relation((10, 7, -6, 7), (6, -1, -5, -5), (-9, 5, -3, 2)),
         [partition({false}), partition({false}), partition({true, false}), partition({false}); int(2..5)], 0)
        !=
        (relation((5, true, 10, -9), (-4, true, 7, 0), (-8, true, 10, 5)),
         partition({partition({-7})}, {partition({-2, 6})}, {partition({-10})}),
         relation((9, -10, -3, 2), (10, -3, 0, -6), (-9, -4, 1, 1)),
         [partition({false}), partition({true}), partition({true}, {false}), partition({true}), partition({false}),
          partition({false}), partition({false, false}), partition({false});
              int(5, -5..1)],
         -10 * 3 + 9)
            | q_3 : int(4)]),
    {[(mset(6, 1), var2, (mset() : `mset of bool`), {-1}); int(-4)],
     [(mset(5, -3), -5 + 10, mset(false), ({} : `set of int`)); int(3)],
     [(mset(5, 1), 1 / -3, mset(false, true), ({} : `set of int`)), (mset(-10), var2, mset(true), ({} : `set of int`)),
      (mset(10), toInt(true), (mset() : `mset of bool`), ({} : `set of int`)),
      (mset(-6, -3), var2, (mset() : `mset of bool`), {10, 0}),
      ((mset() : `mset of int`), 2, mset(false, true), {-7, 5}), (mset(-6, -4), 10, mset(true, true), {-1, 4}),
      (mset(-2, 4), var2, (mset() : `mset of bool`), {10, 0}), (mset(-5, 9), var2, mset(true, true), {9});
          int(-4..2, -5)],
     [((mset() : `mset of int`), 1, mset(false), ({} : `set of int`)), (mset(-7), var2, mset(false), {-8, -7}),
      (mset(3, 9), -4, (mset() : `mset of bool`), {-1}),
      ((mset() : `mset of int`), var2, mset(false, true), ({} : `set of int`)),
      (mset(8, 2), toInt(false), (mset() : `mset of bool`), {-3}),
      (mset(-5, -2), 6 / -4, mset(false, false), ({} : `set of int`)), (mset(2), toInt(false), mset(true), {-3}),
      (mset(-7, 8), toInt(false), mset(false, true), {3}),
      ((mset() : `mset of int`), var2, mset(true), ({} : `set of int`)),
      ((mset() : `mset of int`), 3, (mset() : `mset of bool`), {7}),
      ((mset() : `mset of int`), toInt(true), mset(true), {1});
          int(2, -5..5)],
     [(mset(-2), var2, mset(true), {7, -5}), (mset(-1, -8), -4 * -4, (mset() : `mset of bool`), {5}),
      (mset(10, 1), toInt(true), (mset() : `mset of bool`), {2, -10}),
      (mset(-4, -10), -3, mset(false, true), ({} : `set of int`)),
      (mset(5, 10), toInt(false), mset(false), ({} : `set of int`)),
      ((mset() : `mset of int`), var2, mset(false, true), {8, 5});
          int(5, -2..2)],
     [((mset() : `mset of int`), var2, (mset() : `mset of bool`), {-6}); int(-5)],
     [((mset() : `mset of int`), var2, (mset() : `mset of bool`), {-5}),
      (mset(-4, -9), 10 ** (-4), mset(true), {3, -10}), (mset(-3), toInt(true), mset(true), {-8, 4}),
      ((mset() : `mset of int`), var2, (mset() : `mset of bool`), {-5}),
      ((mset() : `mset of int`), var2, mset(true, true), {-10, -5});
          int(-2, -1..2)]}
    !=
    {[(mset(-7, -10), 7 * -8, (mset() : `mset of bool`), {-2}), (mset(8), 8, mset(true, false), {-7, 5}); int(-4, 2)],
     [((mset() : `mset of int`), 3, mset(false, true), ({} : `set of int`)); int(1)],
     [(mset(3, 10), 1 + -8, mset(true, false), ({} : `set of int`)), (mset(-3), 9, mset(true, false), {-3}),
      (mset(-10), 3, mset(true), ({} : `set of int`)),
      (mset(6), toInt(true), (mset() : `mset of bool`), ({} : `set of int`));
          int(4, -2..0)],
     [(mset(9, 5), 5 ** (-4), (mset() : `mset of bool`), {8}); int(-3)]}
