language Essence 1.3

find var1:
        partition (numParts toInt(true), maxPartSize factorial(4), regular) from matrix indexed by [int(1, 4)] of bool
find var2: set (maxSize factorial(5)) of function (injective) bool --> bool
find var3: set (maxSize 4 / 5) of function (minSize 2, total, bijective) bool --> bool
find var4: tuple (partition (minNumParts 1, maxNumParts 5, maxPartSize 4) from bool)
find var5: mset (minOccur 5, maxOccur 5) of bool
such that
    function((false, false, true) --> function(false --> false, true --> false),
             (false, true, true) --> function(false --> false), (true, false, true) --> function(true --> true),
             (true, true, false) --> (function() : `function bool --> bool`))
    supset
    function((true, true, true) --> function(true --> true, false --> true, true --> true),
             (true, true, false) --> function(true --> true, true --> true, false --> false),
             (true, true, false)
                 --> function(false --> false, false --> true, true --> false, false --> true, true --> false)),
    function(mset(false, false, true)
                 --> relation((true, true, true, true), (true, false, true, false), (false, true, true, true)),
             (mset() : `mset of bool`)
                 --> relation((true, false, true, false), (true, true, false, true), (false, false, false, false),
                              (true, true, false, false), (true, true, false, false)),
             mset(true) --> relation((true, false, true, false), (false, false, true, true)),
             mset(true)
                 --> relation((false, true, false, false), (true, true, false, false), (true, false, false, false)))
    subsetEq function((mset() : `mset of bool`) --> relation((false, false, true, true), (false, false, false, false)))
