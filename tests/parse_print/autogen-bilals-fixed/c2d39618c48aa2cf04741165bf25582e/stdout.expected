language Essence 1.3

find var1: int(3)
find var2: relation of (int(2, -5..3) * bool * function int(4) --> int(-3) * int(0))
find var3: (function int(5, 0..3) --> int(4), tuple (int(0..5)))
such that
    and([partition({{function(true --> 1, true --> -8), function(false --> -8, false --> 1),
                     function(true --> 10, false --> -2)},
                    {function(true --> -2), function(true --> -6, false --> 0), function(true --> -8),
                     function(true --> 2)}},
                   {{function(true --> 4, true --> 9), function(false --> 9, false --> -5), function(true --> 7),
                     function(false --> 10)}},
                   {({} : `set of function bool --> int`)})
         =
         partition({{function(true --> 6), function(false --> -3), function(false --> 10, true --> -2)}},
                   {({} : `set of function bool --> int`)})
             | q_4 : int(3)]),
    function(var1
                 --> [function(tuple (false) --> tuple (-5), tuple (true) --> tuple (-1), tuple (false) --> tuple (-4),
                               tuple (false) --> tuple (9));
                          int(-5)])
    !=
    function(2   --> [function(tuple (true) --> tuple (-8), tuple (true) --> tuple (-1), tuple (false) --> tuple (-4)),
                      function(tuple (false) --> tuple (-8), tuple (true) --> tuple (-9), tuple (false) --> tuple (-4));
                          int(-2, -2..-1)],
             max(mset(toInt(false), toInt(true), var1, var1) - (mset() : `mset of int`))
                 --> [function(tuple (false) --> tuple (-5), tuple (false) --> tuple (0)); int(4)],
             min(mset(-3, 3 / 1, var1))
                 --> [function(tuple (false) --> tuple (-8), tuple (false) --> tuple (6)),
                      function(tuple (false) --> tuple (4), tuple (true) --> tuple (-5)),
                      function(tuple (true) --> tuple (1), tuple (true) --> tuple (-7), tuple (false) --> tuple (-5),
                               tuple (false) --> tuple (9)),
                      function(tuple (true) --> tuple (-5)),
                      function(tuple (false) --> tuple (4), tuple (false) --> tuple (0), tuple (true) --> tuple (6)),
                      function(tuple (false) --> tuple (6), tuple (false) --> tuple (-8), tuple (true) --> tuple (4),
                               tuple (false) --> tuple (4));
                          int(-5..0)],
             toInt(toInt(true) in {6, -5 / -6, 7})
                 --> [function(tuple (false) --> tuple (-3), tuple (true) --> tuple (7)),
                      function(tuple (false) --> tuple (-8)),
                      function(tuple (true) --> tuple (6), tuple (true) --> tuple (4), tuple (true) --> tuple (-2),
                               tuple (true) --> tuple (1)),
                      function(tuple (true) --> tuple (-10), tuple (false) --> tuple (-3)),
                      function(tuple (false) --> tuple (-8), tuple (false) --> tuple (-2),
                               tuple (false) --> tuple (-10));
                          int(5, 0..3)],
             -9  --> [function(tuple (true) --> tuple (-6), tuple (true) --> tuple (0), tuple (false) --> tuple (-2),
                               tuple (true) --> tuple (-9)),
                      function(tuple (false) --> tuple (-9), tuple (false) --> tuple (-3), tuple (true) --> tuple (1),
                               tuple (true) --> tuple (-9)),
                      function(tuple (false) --> tuple (-2), tuple (false) --> tuple (3), tuple (false) --> tuple (5),
                               tuple (false) --> tuple (-10)),
                      function(tuple (false) --> tuple (-9)), function(tuple (true) --> tuple (4)),
                      function(tuple (false) --> tuple (9), tuple (true) --> tuple (8), tuple (true) --> tuple (-1)),
                      function(tuple (false) --> tuple (-10)), function(tuple (false) --> tuple (6)),
                      function(tuple (true) --> tuple (-5)),
                      function(tuple (true) --> tuple (-3), tuple (false) --> tuple (-5), tuple (true) --> tuple (2));
                          int(-5..4)]),
    and([false | q_5 : int(3), var1 % -9 * q_5 < q_5]),
    true,
    var1 in {var1} <-> true,
    true
