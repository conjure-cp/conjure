language Essence 1.3

find var1:
        (mset (minSize sum([1; int(1)]), maxSize 5, maxOccur |mset(true, true, false)|) of
             mset (maxSize 1 ** 3, maxOccur 5 % 1) of partition (maxNumParts 4, regular) from bool,
         relation (minSize [3, 4; int(4, 0)][0], maxSize 4) of
             (function (size toInt(true), total) set (minSize 1, maxSize 1) of bool -->
                  matrix indexed by [int(4, 2)] of bool *
              tuple (relation (size 2) of (bool * bool * bool * int(4, 2)))),
         relation (maxSize [1, 4, 4, 0; int(9, 8, 11, 0)][2 / 0]) of
             ((mset (maxSize 4, minOccur 1) of int(3, 1..5), matrix indexed by [int(3, 0..5)] of int(1, 5),
               relation (size 5) of (bool * bool * bool * bool)) *
              function (size 4, injective) set (minSize 0, maxSize 4) of bool -->
                  relation (minSize 4) of (int(4..5, 4..5) * bool * bool) *
              bool),
         function (maxSize 3, total)
             function (minSize 4, maxSize 5, total, surjective) (bool, int(4..5, 1), int(2, 1), bool) -->
                 relation of (bool)
             -->
             partition (minNumParts 0, maxNumParts 3, partSize 4, regular) from int(2..5, 0))
find var2:
        ((relation (minSize 1, maxSize 1) of
              (relation (maxSize 1, connex) of (bool * bool) * (bool, int(3, 2), bool, bool) *
               function (minSize 5, total, bijective) int(4..5, 1) --> int(1, 4) *
               partition (numParts 2, partSize 2) from int(5, 5)),
          (partition (minNumParts 4, maxNumParts 5, partSize 1, regular) from bool,
           relation (minSize 5, maxSize 5) of (bool)),
          tuple (set of bool), mset (minSize -3, maxOccur 2) of matrix indexed by [int(0, 4)] of bool),
         partition (numParts 3 / 1 / 0 ** 5,
                    minPartSize |(partition() : `partition from int`)|, maxPartSize toInt(0 > 0), regular) from
             relation (minSize 2, maxSize 5) of
                 (partition (minNumParts 1, maxNumParts 3, minPartSize 0) from bool *
                  matrix indexed by [int(1, 4)] of int(4, 3) *
                  mset (minSize 3, maxSize 4, minOccur 5, maxOccur 5) of bool *
                  partition (minNumParts 3, maxNumParts 4, minPartSize 1) from bool),
         matrix indexed by [int(4, 2..5)] of
             (relation (minSize 1) of (bool * int(2..5, 1) * bool * bool),
              partition (minNumParts 5, maxNumParts 5, regular) from int(3..5, 5), int(1, 5),
              partition (numParts 4, partSize 4) from int(4..5, 5)),
         partition (maxNumParts factorial(factorial(1)), minPartSize 1, maxPartSize factorial(3) ** (3 % 4),
                    regular) from
             mset (size 0, maxOccur 0 / 3) of function (minSize 3, maxSize 3, injective) int(3..5, 0..1) --> bool)
find var3:
        partition (maxPartSize max(flatten(([] : `matrix indexed by [int] of int`)))) from
            partition (numParts 2, minPartSize 1 ** 1 - 2 + 1, maxPartSize 0 / (4 / 2), regular) from
                set (size 5) of tuple (int(2..4, 2..3))
find var4:
        relation (maxSize toInt(false)) of
            (partition (maxNumParts factorial(0) - factorial(0),
                        minPartSize toInt(false), maxPartSize 3 % 5 - (2 - 4)) from
                 set (minSize -3) of relation (minSize 4, maxSize 5) of (int(1, 3..5) * bool * bool * bool))
find var5: bool
find var6:
        matrix indexed by [int(4, 1..4)] of
            set (minSize 0, maxSize 4) of
                partition (minNumParts 5 / 1, partSize 2) from matrix indexed by [int(0, 0)] of bool
find var7: int(3, 5)
such that
    var5,
    var5,
    true
minimising var7
