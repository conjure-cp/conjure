language Essence 1.3

find var1: int(-2..3, 0)
find var2: bool
find var3: relation of (int(4, -5..0) * bool)
find var4: partition from int(-4..5)
such that
    and([false /\
         (function(true --> -5, false --> 6), {true}, mset(10, 1), var1) =
         (function(false --> 3, false --> 2), {false, false}, mset(6), -7 * 1)
             | q_5 : int(-2..3, 0), q_5 < q_5]),
    false,
    toMSet(toSet(toMSet({false}))) !=
    toMSet({var2}) intersect
    (mset(false) -
     mset(true = true <-> false, true, false, (true <-> false) -> 10 != -1, (false <-> true) /\ (false \/ true),
          toInt(false) in mset(-3))
     union mset(var4 != var4, var4 = var4, false, {false} != ({} : `set of bool`), var1 in mset(8, -2)))
