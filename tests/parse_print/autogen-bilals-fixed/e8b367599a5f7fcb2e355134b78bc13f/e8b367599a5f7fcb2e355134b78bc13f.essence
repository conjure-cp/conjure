language Essence 1.3

given given1: partition (maxNumParts 3 / 4, minPartSize -1) from function (maxSize 0, bijective) int(1, 3) --> bool
find var1: function (total, injective) set (size 0) of int(4..4, 3) --> set (minSize 5) of bool
find var2:
        (matrix indexed by [int(3, 5)] of bool, (int(0, 0), bool, int(2, 0..3), int(3, 3)),
         relation (size 5) of (bool * bool * int(1..2, 3)),
         relation (minSize 3, maxSize 5) of (int(2..2, 0..5) * int(3, 1) * bool))
find var3: relation (minSize 0, maxSize 0) of (relation (minSize 2, maxSize 3) of (int(1..4, 0)))
such that
    or([true, true, false, true; int(2..3, 8..9)]) <-> or([false, false, false, true, false; int(11..12, 3, 0, 8..8)]),
    flatten([0, 2, 0, 2, 1; int(12..13, 7, 6, 8..8)]) .< [2 % 2, 3 ** 0, -2; int(0..2)],
    [false; int(0..0)] .< [false; int(1..1)] ->
    together({false, true, false}, partition({false}, {true}, {false, true, false}, {false, false, true, false, true}))
