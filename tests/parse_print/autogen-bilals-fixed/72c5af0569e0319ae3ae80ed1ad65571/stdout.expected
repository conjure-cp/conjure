language Essence 1.3

find unused: bool
such that
    inverse(function(function(tuple (false) --> function(false --> 3, false --> 2),
                              tuple (false) --> function(true --> 4, false --> 2, true --> 2, false --> 1, false --> 4))
                         --> function(3 --> true, 4 --> false, 3 --> true, 4 --> false) supsetEq function(1 --> false),
                     function(tuple (false) --> function(true --> 2, false --> 2, true --> 0, false --> 3, false --> 4))
                         --> true,
                     function(tuple (true) --> function(true --> 0, false --> 5),
                              tuple (false) --> function(true --> 3, true --> 0, false --> 3),
                              tuple (false) --> function(false --> 3),
                              tuple (false) --> function(false --> 4, true --> 0, false --> 2, true --> 0, false --> 4))
                         --> apart({0, 0}, partition({1, 5, 3, 2}, {3, 2, 0, 1, 2}, {2, 1, 5}, {5}, {0, 0, 3, 1, 5})),
                     function(tuple (false) --> (function() : `function bool --> int`),
                              tuple (true) --> function(false --> 4, true --> 2), tuple (true) --> function(true --> 1),
                              tuple (true) --> function(true --> 3, true --> 1, false --> 4, true --> 0),
                              tuple (true) --> function(false --> 5, true --> 0, true --> 2, true --> 0))
                         --> false),
            function(image(function(true --> false, false --> false), false)
                         --> function(tuple (false) --> function(false --> 0),
                                      tuple (false)
                                          --> function(true --> 1, false --> 0, false --> 4, true --> 1, false --> 4),
                                      tuple (true) --> (function() : `function bool --> int`),
                                      tuple (true) --> function(true --> 3, false --> 0, false --> 5),
                                      tuple (true) --> function(false --> 3)),
                     {true, true} subsetEq {true}
                         --> function(tuple (false) --> function(false --> 3, false --> 1),
                                      tuple (true) --> (function() : `function bool --> int`),
                                      tuple (false) --> function(false --> 1)),
                     !false < (true = false) --> function(tuple (true) --> function(false --> 0)),
                     true
                         --> function(tuple (false)
                                          --> function(true --> 4, false --> 5, false --> 4, false --> 5, false --> 2),
                                      tuple (true) --> function(true --> 1, true --> 0, false --> 5, true --> 4),
                                      tuple (true) --> function(true --> 2))))
