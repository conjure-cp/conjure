language Essence 1.3

find var1: set (size factorial(4)) of set (minSize 4) of bool
find var2: partition (numParts 2 / 2, minPartSize 5 / 1, regular) from mset (maxSize 4, maxOccur 0) of bool
such that
    and([l_2 | l_1 : bool, l_2 : bool]),
    [(partition() : `partition from function bool --> bool`),
     partition({function(true --> true), function(false --> true, true --> true, true --> false, true --> true),
                function(false --> true, false --> false, false --> true, false --> true, false --> false),
                function(true --> true, false --> false, true --> true, true --> true, false --> true)},
               {function(false --> true, false --> true, false --> true, true --> false, true --> true),
                function(true --> false), function(true --> true)}),
     partition({function(false --> false, false --> true, false --> true),
                function(false --> false, false --> false, true --> true, false --> true)});
         int(3..4, 8)]
    =
    [partition({function(false --> false, true --> false, false --> false, true --> true, true --> true)},
               {function(true --> false, false --> true), (function() : `function bool --> bool`),
                function(false --> true, true --> false, true --> true, true --> false, false --> false)},
               {(function() : `function bool --> bool`),
                function(true --> false, false --> true, false --> false, true --> false, true --> true)},
               {(function() : `function bool --> bool`),
                function(false --> false, false --> false, false --> false, true --> false, true --> true),
                function(false --> false, true --> false, false --> true, true --> true, true --> false),
                function(true --> false, false --> false, false --> true, false --> true), function(false --> false)}),
     partition({function(false --> false, true --> false), function(true --> false, false --> false, true --> true)},
               {function(true --> false), function(true --> false), function(true --> true, true --> true),
                function(true --> true, false --> false)}),
     (partition() : `partition from function bool --> bool`);
         int(2..3, 1)],
    relation(({[false, false, true, false; int(4, 7, 11, 9)]}, [function(false --> false); int(2)],
              [l_4 | l_3 : bool, l_4 : bool, l_4 -> l_3, l_3],
              partition({(relation() : `relation of (bool)`),
                         relation(tuple (false), tuple (false), tuple (true), tuple (false))},
                        {relation(tuple (true)),
                         relation(tuple (true), tuple (true), tuple (false), tuple (false), tuple (false)),
                         relation(tuple (false)),
                         relation(tuple (true), tuple (false), tuple (true), tuple (false), tuple (false))},
                        {(relation() : `relation of (bool)`), relation(tuple (true), tuple (false)),
                         relation(tuple (false), tuple (false), tuple (true), tuple (true)),
                         relation(tuple (false), tuple (false), tuple (false), tuple (true)),
                         relation(tuple (false), tuple (true), tuple (false))},
                        {relation(tuple (false), tuple (false), tuple (false), tuple (true), tuple (false)),
                         relation(tuple (true), tuple (true), tuple (false), tuple (false)),
                         relation(tuple (false), tuple (true), tuple (false), tuple (false), tuple (true)),
                         relation(tuple (false), tuple (false), tuple (true), tuple (true)),
                         relation(tuple (false), tuple (true))})),
             ({([] : `matrix indexed by [int] of bool`), [true, true, true, true; int(7, 1..2, 11)], [true; int(0)]},
              ([] : `matrix indexed by [int] of function bool --> bool`),
              [false -> false, true >= false, true <-> true; int(2..4)],
              partition({relation(tuple (false), tuple (true), tuple (false))}, {relation(tuple (true))},
                        {relation(tuple (true), tuple (true), tuple (true)), (relation() : `relation of (bool)`),
                         relation(tuple (true), tuple (false), tuple (true))},
                        {(relation() : `relation of (bool)`),
                         relation(tuple (true), tuple (false), tuple (true), tuple (true), tuple (true)),
                         relation(tuple (false), tuple (true), tuple (false), tuple (false), tuple (true)),
                         relation(tuple (true), tuple (true), tuple (true))},
                        {relation(tuple (true), tuple (false), tuple (false)), (relation() : `relation of (bool)`),
                         relation(tuple (false), tuple (false), tuple (true), tuple (true)),
                         relation(tuple (true), tuple (true), tuple (true), tuple (false)),
                         relation(tuple (true), tuple (true))})),
             ({([] : `matrix indexed by [int] of bool`)},
              [function(false --> false), (function() : `function bool --> bool`),
               function(true --> false, false --> true, false --> false, true --> true, true --> false),
               function(false --> true);
                   int(1..4)],
              flatten([true, false, false; int(3..5)]),
              partition({relation(tuple (true), tuple (true), tuple (false), tuple (false))},
                        {relation(tuple (false), tuple (true)), relation(tuple (false))})))
    subset
    relation(({[false, false, false, true, false; int(5..9)]},
              [(function() : `function bool --> bool`), (function() : `function bool --> bool`),
               function(true --> true, false --> true);
                   int(3, 9, 6)],
              flatten([true, true; int(0..1)]),
              partition({relation(tuple (false), tuple (false), tuple (true), tuple (true)),
                         relation(tuple (true), tuple (true), tuple (false), tuple (false)),
                         relation(tuple (false), tuple (true), tuple (true), tuple (true), tuple (true)),
                         (relation() : `relation of (bool)`)},
                        {relation(tuple (true), tuple (false)),
                         relation(tuple (false), tuple (true), tuple (true), tuple (false), tuple (true)),
                         relation(tuple (true)), relation(tuple (false))},
                        {relation(tuple (false), tuple (true)),
                         relation(tuple (true), tuple (true), tuple (true), tuple (true)),
                         relation(tuple (false), tuple (true), tuple (false), tuple (false))},
                        {relation(tuple (true), tuple (false)), relation(tuple (false))})),
             ({[false, true, false, false, true; int(7, 4, 10, 9, 2)]},
              [function(true --> true, false --> false, false --> true, false --> false),
               (function() : `function bool --> bool`), function(true --> true, true --> true);
                   int(9, 2, 1)],
              [false > false, true > true, true = true; int(2..4)],
              (partition() : `partition from relation of (bool)`)),
             (({} : `set of matrix indexed by [int] of bool`),
              [function(true --> true, true --> true, true --> true, true --> false), function(true --> false),
               function(true --> true, true --> true), function(false --> false, false --> false);
                   int(4, 3, 10, 0)],
              [false > true; int(2)],
              partition({relation(tuple (false)), (relation() : `relation of (bool)`)}, {relation(tuple (true))}))),
    together(({} : `set of bool`),
             partition({!(true > false), {false} supsetEq ({} : `set of bool`),
                        (mset() : `mset of bool`) subsetEq mset(true), and([false, true, false; int(1..3)])},
                       {(true > true) in mset(true, true)})),
    apart({function(false --> false) subset
           function(false --> true, false --> false, false --> false, true --> true, false --> false),
           (function() : `function bool --> bool`) supsetEq function(false --> true),
           and([false, true, true, true; int(9..10, 5..6)])},
          partition({[false, false; int(5, 3)][3 - 1],
                     together(({} : `set of bool`),
                              partition({true, false}, {false, true}, {false, true, false, true, false},
                                        {false, true})),
                     !(true > false),
                     together({true, true, false},
                              partition({true, true}, {false}, {false, true, false}, {false}, {true, false, true})),
                     (false != true) > (true <-> false)},
                    {(true, false, false, true)[3]},
                    {(true = true) >= (true = true),
                     (relation() : `relation of (bool * bool)`) supset relation((false, true), (true, false)),
                     image(function(true --> true, false --> true), true != false), !(true -> true),
                     1 <= 3 -> true <= false},
                    {true, true \/ false, !(false > false)})),
    [l_6 | l_5 : bool, l_6 : bool,
           inverse(function(true --> false, true --> false, false --> true, true --> true),
                   function(false --> true, false --> false, false --> false)),
           l_6]
        [min(({} : `set of int`))],
    [l_8 | l_7 : bool, l_8 : bool, l_8, l_7][(3 % 2 - 0 ** 5) % -1 ** 0]
