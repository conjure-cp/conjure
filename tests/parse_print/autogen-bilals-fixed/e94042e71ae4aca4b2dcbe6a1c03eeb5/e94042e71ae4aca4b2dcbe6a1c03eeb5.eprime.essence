language ESSENCE' 1.0

given nnodes: int(1..20)
given nrings: int(1..20)
given capacity: int(1..20)
given fin1: int
given demand_ExplicitR2_Occurrence:
        matrix indexed by [int(1..fin1), int(1..nnodes)] of bool
find network_ExplicitWithFlagsR2_Flags:
        matrix indexed by [int(1..nrings)] of int(0..nrings)
find network_ExplicitWithFlagsR2_Values_Occurrence:
        matrix indexed by [int(1..nrings), int(1..nnodes)] of bool
minimising
    sum([toInt(network_ExplicitWithFlagsR2_Flags[q9] > 0) *
         sum([toInt(network_ExplicitWithFlagsR2_Values_Occurrence[q9, q10])
                  | q10 : int(1..nnodes)])
             | q9 : int(1..nrings)])
such that
    and([or([network_ExplicitWithFlagsR2_Flags[q12] > 0 /\
             and([network_ExplicitWithFlagsR2_Values_Occurrence[q12, q13]
                      | q13 : int(1..nnodes), demand_ExplicitR2_Occurrence[q11, q13]])
                 | q12 : int(1..nrings)])
             | q11 : int(1..fin1)]),
    and([network_ExplicitWithFlagsR2_Flags[q1 + 1] > 0 ->
         network_ExplicitWithFlagsR2_Values_Occurrence[q1, ..] .<
         network_ExplicitWithFlagsR2_Values_Occurrence[q1 + 1, ..]
             | q1 : int(1..nrings - 1)]),
    and([network_ExplicitWithFlagsR2_Flags[q2] = 0 ->
         and([network_ExplicitWithFlagsR2_Values_Occurrence[q2, q8] = false
                  | q8 : int(1..nnodes)])
             | q2 : int(1..nrings)]),
    and([network_ExplicitWithFlagsR2_Flags[q3 + 1] > 0 ->
         network_ExplicitWithFlagsR2_Flags[q3] > 0
             | q3 : int(1..nrings - 1)]),
    nrings = sum([network_ExplicitWithFlagsR2_Flags[q5] | q5 : int(1..nrings)]),
    and([network_ExplicitWithFlagsR2_Flags[q6] > 0 ->
         sum([toInt(network_ExplicitWithFlagsR2_Values_Occurrence[q6, q7])
                  | q7 : int(1..nnodes)])
         <= capacity
             | q6 : int(1..nrings)])

