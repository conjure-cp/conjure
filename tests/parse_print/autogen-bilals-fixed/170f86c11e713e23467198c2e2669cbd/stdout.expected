language Essence 1.3

find var1: set of (bool, bool)
find var2: function partition from bool --> (bool, bool)
find var3: int(4)
find var4: set of partition from int(1, -2)
find var5: relation of (partition from bool)
find var6: partition from bool
find var7: function int(4, -4..-2) --> partition from int(2, -1..3)
such that
    or([function({true, true} --> q_8, {true, true} --> image(var7, var3), {false} --> partition({-5}),
                 {true, false} --> partition({3}))
        !=
        function({true, true} --> image(var7, var3), ({} : `set of bool`) --> partition({-1}, {6}),
                 {true} --> partition({3}, {2}))
            | q_8 <- var4, q_8 = partition({|(mset() : `mset of bool`)|, var3}, {-9})]),
    -4 != |({} : `set of int`)| / -9,
    false,
    or([true | q_9 : set of partition from int(1, -2), var4 supsetEq q_9]),
    and([(mset() : `mset of partition from bool`) = mset(var6, var6)
             | q_10 <- var4, q_10 = partition({var3 ** 8, var3, toInt(false) / 2 ** 10})]),
    and([true | q_11 : int(4), q_11 <= -7]),
    and([relation(tuple (8), tuple (5), tuple (-10)) != relation(tuple (10), tuple (0), tuple (-5))
             | q_12 : int(4), 0 <= q_12]),
    relation((4 != 0, tuple (false), tuple (false), {-6}, function(-6 --> -8)),
             (false = true, tuple (false), tuple (false), {6}, function(-4 --> 5, 4 --> 9)),
             (false <-> true, tuple (true), tuple (false), {-9, 2}, function(-8 --> -5, -4 --> -7)))
    =
    relation((false = false, tuple (true), tuple (false), ({} : `set of int`), function(-3 --> 6, 0 --> 8)),
             (true <-> true, tuple (false), tuple (true), {-3}, function(4 --> -2, 2 --> 0)),
             (false /\ true, tuple (false), tuple (true), ({} : `set of int`), function(4 --> 9)))
