language Essence 1.3

find var1: partition from set of int(-1..2, 1..5)
find var2: bool
such that
    function((6 = 9) in {true} --> partition({partition({true})}, {partition({false})}),
             toInt(false) in ({} : `set of int`)
                 --> partition({partition({false}), partition({false})}, {partition({false, true})}))
    =
    function(var1 = var1 --> partition({partition({false})}, {partition({true})}),
             3 != 5 + 0
                 --> partition({partition({false})}, {partition({false}, {true})}, {partition({false}, {true})},
                               {partition({false, false})}),
             (false /\ true) in (mset() : `mset of bool`)
                 --> partition({partition({false, false})}, {partition({true})}, {partition({false})},
                               {partition({false})}),
             false --> partition({partition({false, true}), partition({true})}),
             var2 != (false -> true)
                 --> partition({partition({true}), partition({true})},
                               {partition({false, false}), partition({true, true})}),
             true \/ false --> partition({partition({true})}, {partition({false})}, {partition({false, false})}))
