;;
;; Simple EF-solver test
;; Source: Chih-Hong Cheng (efsmt.cpp)
;;

(define a<a :: bool )
(define a<b :: bool )
(define a<c :: bool )
(define a<d :: bool )
(define a<e :: bool )
(define b<a :: bool )
(define b<b :: bool )
(define b<c :: bool )
(define b<d :: bool )
(define b<e :: bool )
(define c<a :: bool )
(define c<b :: bool )
(define c<c :: bool )
(define c<d :: bool )
(define c<e :: bool )
(define d<a :: bool )
(define d<b :: bool )
(define d<c :: bool )
(define d<d :: bool )
(define d<e :: bool )
(define e<a :: bool )
(define e<b :: bool )
(define e<c :: bool )
(define e<d :: bool )
(define e<e :: bool )
(define mValid :: bool )
(define m1 :: bool )
(define m2 :: bool )
(define nValid :: bool )
(define n1 :: bool )
(define n2 :: bool )
(define oValid :: bool )
(define o1 :: bool )
(define pValid :: bool )
(define p2 :: bool )
(define mValid' :: bool )
(define m1' :: bool )
(define m2' :: bool )
(define nValid' :: bool )
(define n1' :: bool )
(define n2' :: bool )
(define oValid' :: bool )
(define o1' :: bool )
(define pValid' :: bool )
(define p2' :: bool )

(assert
 (forall (s1 :: bool s2 :: bool s1' :: bool s2' :: bool)
  (and
   (not a<a)
   (not b<b)
   (not c<c)
   (not d<d)
   (not e<e)
   mValid
   (not nValid)
   (not oValid)
   (not pValid)
   (or mValid nValid oValid pValid)
   (or
    (or s1 s2)
    (and (=> mValid (or (or s1 s2) (and (= m1 s1) (= m2 s2)))) (=> nValid (or (or s1 s2) (and (= n1 s1) (= n2 s2))))
	 (=> oValid (or (or s1 s2) (= o1 s1))) (=> pValid (or (or s1 s2) (= p2 s2)))))
   (=>
    (and s1 s2)
    (and (=> mValid (and (and s1 s2) (or (/= m1 s1) (/= m2 s2)))) (=> nValid (and (and s1 s2) (or (/= n1 s1) (/= n2 s2))))
	 (=> (=> (and s1 s2) (= o1 s1)) (not oValid)) (=> (=> (and s1 s2) (= p2 s2)) (not pValid))))
   (or
    (and
     (=> mValid' (and (= m1' s1') (= m2' s2')))
     (=> nValid' (and (= n1' s1') (= n2' s2')))
     (=> oValid' (= o1' s1'))
     (=> pValid' (= p2' s2')))
    (=>
     (and (=> mValid (and (= m1 s1) (= m2 s2))) (=> nValid (and (= n1 s1) (= n2 s2))) (=> oValid (= o1 s1)) (=> pValid (= p2 s2)))
     (=>
      (and (=> a<a (or s1 (=> (= s2 s2') (=> s1' s1)))) (=> a<c (or (or s1 s2) (=> (= s2 s2') (=> s1' s1))))
	   (=> a<d (or (=> (= s2 s2') (=> s1' s1)) (=> s2 s1))) (=> a<e (or s1 (=> (= s2 s2') (=> s1' s1))))
	   (=> b<b (=> s1 (=> (= s2 s2') (=> s1 s1')))) (=> b<c (or (=> (= s2 s2') (=> s1 s1')) (=> s1 s2)))
	   (=> b<d (=> (and s1 s2) (=> (= s2 s2') (=> s1 s1')))) (=> c<a (or (or s1 s2) (=> (= s1 s1') (=> s2' s2))))
	   (=> c<b (or (=> (= s1 s1') (=> s2' s2)) (=> s1 s2))) (=> c<c (or s2 (=> (= s1 s1') (=> s2' s2))))
	   (=> c<e (or (or s1 s2) (=> (= s1 s1') (=> s2' s2)))) (=> d<a (or (=> (= s1 s1') (=> s2 s2')) (=> s2 s1)))
	   (=> d<b (=> (and s1 s2) (=> (= s1 s1') (=> s2 s2')))) (=> d<d (=> s2 (=> (= s1 s1') (=> s2 s2'))))
	   (=> d<e (or (=> (= s1 s1') (=> s2 s2')) (=> s2 s1))) (=> e<a (or s1 (=> (= s2 s2') (or s1 s1'))))
	   (=> e<c (or (or s1 s2) (=> (= s2 s2') (or s1 s1')))) (=> e<d (or (=> (= s2 s2') (or s1 s1')) (=> s2 s1)))
	   (=> e<e (or s1 (=> (= s2 s2') (or s1 s1')))))
      (and (=> (= s2 s2') (=> s1' s1)) (=> (= s2 s2') (=> s1 s1')) (=> (= s1 s1') (=> s2' s2)) (=> (= s1 s1') (=> s2 s2'))
	   (=> (= s2 s2') (or s1 s1'))))))
   (=> (and a<a a<b) a<b)
   (=> (and a<a a<c) a<c)
   (=> (and a<a a<d) a<d)
   (=> (and a<a a<e) a<e)
   (=> (and a<b b<a) a<a)
   (=> (and a<b b<b) a<b)
   (=> (and a<b b<c) a<c)
   (=> (and a<b b<d) a<d)
   (=> (and a<b b<e) a<e)
   (=> (and a<c c<a) a<a)
   (=> (and a<c c<b) a<b)
   (=> (and a<c c<c) a<c)
   (=> (and a<c c<d) a<d)
   (=> (and a<c c<e) a<e)
   (=> (and a<d d<a) a<a)
   (=> (and a<d d<b) a<b)
   (=> (and a<d d<c) a<c)
   (=> (and a<d d<d) a<d)
   (=> (and a<d d<e) a<e)
   (=> (and a<e e<a) a<a)
   (=> (and a<e e<b) a<b)
   (=> (and a<e e<c) a<c)
   (=> (and a<e e<d) a<d)
   (=> (and a<e e<e) a<e)
   (=> (and a<a b<a) b<a)
   (=> (and a<b b<a) b<b)
   (=> (and a<c b<a) b<c)
   (=> (and a<d b<a) b<d)
   (=> (and a<e b<a) b<e)
   (=> (and b<a b<b) b<a)
   (=> (and b<b b<c) b<c)
   (=> (and b<b b<d) b<d)
   (=> (and b<b b<e) b<e)
   (=> (and b<c c<a) b<a)
   (=> (and b<c c<b) b<b)
   (=> (and b<c c<c) b<c)
   (=> (and b<c c<d) b<d)
   (=> (and b<c c<e) b<e)
   (=> (and b<d d<a) b<a)
   (=> (and b<d d<b) b<b)
   (=> (and b<d d<c) b<c)
   (=> (and b<d d<d) b<d)
   (=> (and b<d d<e) b<e)
   (=> (and b<e e<a) b<a)
   (=> (and b<e e<b) b<b)
   (=> (and b<e e<c) b<c)
   (=> (and b<e e<d) b<d)
   (=> (and b<e e<e) b<e)
   (=> (and a<a c<a) c<a)
   (=> (and a<b c<a) c<b)
   (=> (and a<c c<a) c<c)
   (=> (and a<d c<a) c<d)
   (=> (and a<e c<a) c<e)
   (=> (and b<a c<b) c<a)
   (=> (and b<b c<b) c<b)
   (=> (and b<c c<b) c<c)
   (=> (and b<d c<b) c<d)
   (=> (and b<e c<b) c<e)
   (=> (and c<a c<c) c<a)
   (=> (and c<b c<c) c<b)
   (=> (and c<c c<d) c<d)
   (=> (and c<c c<e) c<e)
   (=> (and c<d d<a) c<a)
   (=> (and c<d d<b) c<b)
   (=> (and c<d d<c) c<c)
   (=> (and c<d d<d) c<d)
   (=> (and c<d d<e) c<e)
   (=> (and c<e e<a) c<a)
   (=> (and c<e e<b) c<b)
   (=> (and c<e e<c) c<c)
   (=> (and c<e e<d) c<d)
   (=> (and c<e e<e) c<e)
   (=> (and a<a d<a) d<a)
   (=> (and a<b d<a) d<b)
   (=> (and a<c d<a) d<c)
   (=> (and a<d d<a) d<d)
   (=> (and a<e d<a) d<e)
   (=> (and b<a d<b) d<a)
   (=> (and b<b d<b) d<b)
   (=> (and b<c d<b) d<c)
   (=> (and b<d d<b) d<d)
   (=> (and b<e d<b) d<e)
   (=> (and c<a d<c) d<a)
   (=> (and c<b d<c) d<b)
   (=> (and c<c d<c) d<c)
   (=> (and c<d d<c) d<d)
   (=> (and c<e d<c) d<e)
   (=> (and d<a d<d) d<a)
   (=> (and d<b d<d) d<b)
   (=> (and d<c d<d) d<c)
   (=> (and d<d d<e) d<e)
   (=> (and d<e e<a) d<a)
   (=> (and d<e e<b) d<b)
   (=> (and d<e e<c) d<c)
   (=> (and d<e e<d) d<d)
   (=> (and d<e e<e) d<e)
   (=> (and a<a e<a) e<a)
   (=> (and a<b e<a) e<b)
   (=> (and a<c e<a) e<c)
   (=> (and a<d e<a) e<d)
   (=> (and a<e e<a) e<e)
   (=> (and b<a e<b) e<a)
   (=> (and b<b e<b) e<b)
   (=> (and b<c e<b) e<c)
   (=> (and b<d e<b) e<d)
   (=> (and b<e e<b) e<e)
   (=> (and c<a e<c) e<a)
   (=> (and c<b e<c) e<b)
   (=> (and c<c e<c) e<c)
   (=> (and c<d e<c) e<d)
   (=> (and c<e e<c) e<e)
   (=> (and d<a e<d) e<a)
   (=> (and d<b e<d) e<b)
   (=> (and d<c e<d) e<c)
   (=> (and d<d e<d) e<d)
   (=> (and d<e e<d) e<e)
   (=> (and e<a e<e) e<a)
   (=> (and e<b e<e) e<b)
   (=> (and e<c e<e) e<c)
   (=> (and e<d e<e) e<d)
   (= mValid mValid')
   (= m1 m1')
   (= m2 m2')
   (= nValid nValid')
   (= n1 n1')
   (= n2 n2')
   (= oValid oValid')
   (= o1 o1')
   (= pValid pValid')
   (= p2 p2'))))

(ef-solve)
(show-model)
