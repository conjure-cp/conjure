/*
 * This file is part of the Yices SMT Solver.
 * Copyright (C) 2017 SRI International.
 *
 * Yices is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Yices is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Yices.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * CLAUSAL ENCODING OF BIT-VECTOR CONSTRAINTS
 *
 * TRACE must be enabled in bit_blaster.c for something
 * to be displayed when running these tests.
 */

#include <stdbool.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <inttypes.h>
#include <assert.h>

#include "bit_solver.h"
#include "remap_table.h"
#include "bit_blaster.h"
#include "solver_printer.h"


#ifdef MINGW

/*
 * Need some version of random()
 * rand() exists on mingw
 */
static inline long int random(void) {
  return rand();
}

#endif




/*
 * Global variables
 */
static bit_solver_t solver;
static remap_table_t remap;
static bit_blaster_t blaster;


/*
 * Initialize all
 */
static void init(void) {
  init_bit_solver(&solver, 0);
  init_remap_table(&remap);
  init_bit_blaster(&blaster, false, &solver, &remap);
}

/*
 * Delete all
 */
static void cleanup(void) {
  delete_bit_blaster(&blaster);
  delete_remap_table(&remap);
  delete_bit_solver(&solver);
}


/*
 * Create a new literal
 */
static inline literal_t fresh_lit(void) {
  return pos_lit(bit_solver_new_var(&solver));
}




/*
 * Test individual gate encoding
 * - enable TRACE in bit_blaster to see the generated clauses
 */
static void test_eq(literal_t a, literal_t b) {
  printf("Assertion: ");
  print_literal(stdout, a);
  printf(" == ");
  print_literal(stdout, b);
  printf("\n");

  bit_blaster_eq(&blaster, a, b);
  printf("\n");
}

static void test_xor2(literal_t a, literal_t b, literal_t x) {
  printf("Assertion: ");
  print_literal(stdout, x);
  printf(" == (xor ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(")\n");

  bit_blaster_xor2_gate(&blaster, a, b, x);
  printf("\n");
}

static void test_xor3(literal_t a, literal_t b, literal_t c, literal_t x) {
  printf("Assertion: ");
  print_literal(stdout, x);
  printf(" == (xor ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(" ");
  print_literal(stdout, c);
  printf(")\n");

  bit_blaster_xor3_gate(&blaster, a, b, c, x);
  printf("\n");
}

static void test_or2(literal_t a, literal_t b, literal_t x) {
  printf("Assertion: ");
  print_literal(stdout, x);
  printf(" == (or ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(")\n");

  bit_blaster_or2_gate(&blaster, a, b, x);
  printf("\n");
}

static void test_or3(literal_t a, literal_t b, literal_t c, literal_t x) {
  printf("Assertion: ");
  print_literal(stdout, x);
  printf(" == (or ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(" ");
  print_literal(stdout, c);
  printf(")\n");

  bit_blaster_or3_gate(&blaster, a, b, c, x);
  printf("\n");
}

static void test_mux(literal_t c, literal_t a, literal_t b, literal_t x) {
  printf("Assertion: ");
  print_literal(stdout, x);
  printf(" == (ite ");
  print_literal(stdout, c);
  printf(" ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(")\n");

  bit_blaster_mux(&blaster, c, a, b, x);
  printf("\n");
}

static void test_cmp(literal_t a, literal_t b, literal_t c, literal_t x) {
  printf("Assertion: ");
  print_literal(stdout, x);
  printf(" == (cmp ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(" ");
  print_literal(stdout, c);
  printf(")\n");

  bit_blaster_cmp(&blaster, a, b, c, x);
  printf("\n");
}

static void test_maj3(literal_t a, literal_t b, literal_t c, literal_t x) {
  printf("Assertion: ");
  print_literal(stdout, x);
  printf(" == (maj ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(" ");
  print_literal(stdout, c);
  printf(")\n");

  bit_blaster_maj3(&blaster, a, b, c, x);
  printf("\n");
 }


// xor with n input, 1 output
static void test_xor(uint32_t n, literal_t *a, literal_t x) {
  uint32_t i;

  printf("Assertion: ");
  print_literal(stdout, x);
  printf(" == (xor");
  for (i=0; i<n; i++) {
    printf(" ");
    print_literal(stdout, a[i]);
  }
  printf(")\n");

  bit_blaster_xor_gate(&blaster, n, a, x);
  printf("\n");
}

// or with n input, 1 output
static void test_or(uint32_t n, literal_t *a, literal_t x) {
  uint32_t i;

  printf("Assertion: ");
  print_literal(stdout, x);
  printf(" == (or");
  for (i=0; i<n; i++) {
    printf(" ");
    print_literal(stdout, a[i]);
  }
  printf(")\n");

  bit_blaster_or_gate(&blaster, n, a, x);
  printf("\n");
}



/*
 * Eval tests
 */
static void test_eval_eq(literal_t a, literal_t b) {
  literal_t x;

  printf("(eq ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(")");
  x = bit_blaster_eval_eq(&blaster, a, b);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
}

static void test_eval_xor2(literal_t a, literal_t b) {
  literal_t x;

  printf("(xor ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(")");
  x = bit_blaster_eval_xor2(&blaster, a, b);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
}

static void test_eval_xor3(literal_t a, literal_t b, literal_t c) {
  literal_t x;

  printf("(xor ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(" ");
  print_literal(stdout, c);
  printf(")");
  x = bit_blaster_eval_xor3(&blaster, a, b, c);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
}

static void test_eval_or2(literal_t a, literal_t b) {
  literal_t x;

  printf("(or ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(")");
  x = bit_blaster_eval_or2(&blaster, a, b);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
}

static void test_eval_or3(literal_t a, literal_t b, literal_t c) {
  literal_t x;

  printf("(or ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(" ");
  print_literal(stdout, c);
  printf(")");
  x = bit_blaster_eval_or3(&blaster, a, b, c);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
}

static void test_eval_mux(literal_t a, literal_t b, literal_t c) {
  literal_t x;

  printf("(ite ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(" ");
  print_literal(stdout, c);
  printf(")");
  x = bit_blaster_eval_mux(&blaster, a, b, c);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
}

static void test_eval_cmp(literal_t a, literal_t b, literal_t c) {
  literal_t x;

  printf("(cmp ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(" ");
  print_literal(stdout, c);
  printf(")");
  x = bit_blaster_eval_cmp(&blaster, a, b, c);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
}

static void test_eval_maj3(literal_t a, literal_t b, literal_t c) {
  literal_t x;

  printf("(maj ");
  print_literal(stdout, a);
  printf(" ");
  print_literal(stdout, b);
  printf(" ");
  print_literal(stdout, c);
  printf(")");
  x = bit_blaster_eval_maj3(&blaster, a, b, c);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
}


// xor with n input, 1 output
static void test_eval_xor(uint32_t n, literal_t *a) {
  literal_t x;
  uint32_t i;

  printf("(xor");
  for (i=0; i<n; i++) {
    printf(" ");
    print_literal(stdout, a[i]);
  }
  printf(")");
  x = bit_blaster_eval_xor(&blaster, n, a);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
}

// or with n input, 1 output
static void test_eval_or(uint32_t n, literal_t *a) {
  literal_t x;
  uint32_t i;

  printf("(or");
  for (i=0; i<n; i++) {
    printf(" ");
    print_literal(stdout, a[i]);
  }
  printf(")");
  x = bit_blaster_eval_or(&blaster, n, a);
  if (x == null_literal) {
    printf(" --> nothing\n");
  } else {
    printf(" --> ");
    print_literal(stdout, x);
    printf("\n");
  }
  printf("\n");
}




/*
 * Truth table tests: try all combinations of true/false literals
 */

// 2 input
static void truth_table_test2(void (*f)(literal_t, literal_t)) {
  literal_t a, b;

  for (a = true_literal; a <= false_literal; a++) {
    for (b = true_literal; b <= false_literal; b++) {
      f(a, b);
    }
  }
}

// 3 input
static void truth_table_test3(void (*f)(literal_t, literal_t, literal_t)) {
  literal_t a, b, c;

  for (a = true_literal; a <= false_literal; a++) {
    for (b = true_literal; b <= false_literal; b++) {
      for (c = true_literal; c <= false_literal; c++) {
	f(a, b, c);
      }
    }
  }
}

// 4 input
static void truth_table_test4(void (*f)(literal_t, literal_t, literal_t, literal_t)) {
  literal_t a, b, c, d;

  for (a = true_literal; a <= false_literal; a++) {
    for (b = true_literal; b <= false_literal; b++) {
      for (c = true_literal; c <= false_literal; c++) {
	for (d = true_literal; d <= false_literal; d++) {
	  f(a, b, c, d);
	}
      }
    }
  }
}


/*
 * Variant: set input to true/false, last literal to x
 */

// 2 input
static void output_test2(void (*f)(literal_t, literal_t)) {
  literal_t a, x;

  for (a = true_literal; a <= false_literal; a++) {
    x = fresh_lit();
    f(a, x);
  }
}

// 3 input
static void output_test3(void (*f)(literal_t, literal_t, literal_t)) {
  literal_t a, b, x;

  for (a = true_literal; a <= false_literal; a++) {
    for (b = true_literal; b <= false_literal; b++) {
      x = fresh_lit();
      f(a, b, x);
    }
  }
}

// 4 input
static void output_test4(void (*f)(literal_t, literal_t, literal_t, literal_t)) {
  literal_t a, b, c, x;

  for (a = true_literal; a <= false_literal; a++) {
    for (b = true_literal; b <= false_literal; b++) {
      for (c = true_literal; c <= false_literal; c++) {
	x = fresh_lit();
	f(a, b, c, x);
      }
    }
  }
}


/*
 * Input is distinct literals, output is true or false
 */
// 2 input
static void input_test2(void (*f)(literal_t, literal_t)) {
  literal_t a;

  a = fresh_lit();
  f(a, true_literal);
  a = fresh_lit();
  f(a, false_literal);
}

// 3 input
static void input_test3(void (*f)(literal_t, literal_t, literal_t)) {
  literal_t a, b;

  a = fresh_lit();
  b = fresh_lit();
  f(a, b, true_literal);

  a = fresh_lit();
  b = fresh_lit();
  f(a, b, false_literal);
}

// 4 input
static void input_test4(void (*f)(literal_t, literal_t, literal_t, literal_t)) {
  literal_t a, b, c;

  a = fresh_lit();
  b = fresh_lit();
  c = fresh_lit();
  f(a, b, c, true_literal);

  a = fresh_lit();
  b = fresh_lit();
  c = fresh_lit();
  f(a, b, c, false_literal);
}




/*
 * MORE INPUTS
 */

/*
 * Convert x to an n-bit literal array a[0 .. n-1]
 * - if n is more than 32, the high-order bits are all 0 (false_literal)
 */
static void uint32_to_litarray(uint32_t x, uint32_t n, literal_t *a) {
  uint32_t i;

  for (i=0; i<n; i++) {
    if ((x & 1) == 0) {
      a[i] = false_literal;
    } else {
      a[i] = true_literal;
    }
    x >>= 1;
  }
}

/*
 * Print a[0 .. n-1] as an unsigned integer
 * - n must be no more than 32
 */
static void print_litarray_as_uint32(uint32_t n, literal_t *a) {
  uint32_t i, x;

  assert(n <= 32);

  x = 0;
  i = n;
  while (i > 0) {
    i --;
    x <<= 1;
    if (a[i] == true_literal) {
      x ++;
    } else if (a[i] != false_literal) {
      printf("not an integer");
      return;
    }
  }

  printf("%"PRIu32, x);
}


/*
 * Print a[0 .. n-1] as a signed integer
 * - n must be positive and no more than 32
 */
static void print_litarray_as_int32(uint32_t n, literal_t *a) {
  uint32_t i;
  int32_t x;

  assert(0 < n && n <= 32);

  x = 0;
  i = n-1;
  while (i > 0) {
    i --;
    x <<= 1;
    if (a[i] == true_literal) {
      x ++;
    } else if (a[i] != false_literal) {
      printf("not an integer");
      return;
    }
  }

  if (a[n-1] == true_literal) {
    x -= (1 << (n-1));
  } else if (a[n-1] != false_literal) {
    printf("not an integer");
    return;
  }

  printf("%"PRId32, x);
}


/*
 * Truth-table tests: 8 input literals
 */
static void truth_table_test8(void (*f)(uint32_t, literal_t *)) {
  literal_t a[8];
  uint32_t x;

  for (x=0; x<256; x++) {
    uint32_to_litarray(x, 8, a);
    printf("tst[%"PRIu32"] --> as uint: ", x);
    print_litarray_as_uint32(8, a);
    printf(", as int: ");
    print_litarray_as_int32(8, a);
    printf("\n");
    f(8, a);
  }
}

// 8 input + 1 output
static void truth_table_test8var(void (*f)(uint32_t, literal_t *, literal_t)) {
  literal_t a[8];
  uint32_t x;

  for (x=0; x<256; x++) {
    uint32_to_litarray(x, 8, a);
    f(8, a, false_literal);
    f(8, a, true_literal);
  }
}





/*
 * RANDOM TESTS
 */

/*
 * Support for random tests
 * - lit = array of 30 literals
 * - used = array of 30 booleans
 */
#define MAX_SAMPLE 30

static literal_t lit[MAX_SAMPLE];
static bool used[MAX_SAMPLE];


/*
 * Create n distinct literals and store them in lit
 */
static void init_random(uint32_t n) {
  uint32_t i;

  assert(2 <= n && n < MAX_SAMPLE);

  lit[0] = true_literal;
  lit[1] = false_literal;
  for (i=2; i<n; i += 2) {
    lit[i] = fresh_lit();
    lit[i+1] = not(lit[i]);
  }

  for (i=0; i<n; i++) {
    used[i] = false;
  }
}


/*
 * Pick a random literal among lit[0 ... n-1]
 */
static literal_t pick(uint32_t n) {
  uint32_t i;

  i = (uint32_t) (random() % n);
  used[i] = true;
  return lit[i];
}

/*
 * Refresh: replace all used lit by a new literal
 * - lit[2i] and lit[2i+1] are refreshed in pairs
 */
static void refresh_random(uint32_t n) {
  uint32_t i;

  assert(2 <= n && n < MAX_SAMPLE);
  for (i=2; i<n; i += 2) {
    if (used[i] || used[i+1]) {
      lit[i] = fresh_lit();
      lit[i+1] = not(lit[i]);
      used[i] = false;
      used[i+1] = false;
    }
  }
}



/*
 * n = number of tests to run
 */
// 2 input
static void random_tests2(uint32_t n, void (*f)(literal_t, literal_t)) {
  literal_t a, b;

  init_random(6);
  while (n > 0) {
    a = pick(6);
    b = pick(6);
    f(a, b);
    refresh_random(6);
    n --;
  }
}

// 3 input
static void random_tests3(uint32_t n, void (*f)(literal_t, literal_t, literal_t)) {
  literal_t a, b, c;

  init_random(8);
  while (n > 0) {
    a = pick(8);
    b = pick(8);
    c = pick(8);
    f(a, b, c);
    refresh_random(8);
    n --;
  }
}

// 4 input
static void random_tests4(uint32_t n, void (*f)(literal_t, literal_t, literal_t, literal_t)) {
  literal_t a, b, c, d;

  init_random(10);
  while (n > 0) {
    a = pick(10);
    b = pick(10);
    c = pick(10);
    d = pick(10);
    f(a, b, c, d);
    refresh_random(10);
    n --;
  }
}



// 8 input
static void random_tests8(uint32_t n, void (*f)(uint32_t, literal_t *)) {
  literal_t a[8];
  uint32_t i;

  init_random(24);
  while (n > 0) {
    for (i=0; i<8; i++) {
      a[i] = pick(24);
    }
    f(8, a);
    refresh_random(24);
    n --;
  }
}


// 8 input + 1 output
static void random_tests8var(uint32_t n, void (*f)(uint32_t, literal_t *, literal_t)) {
  literal_t a[8];
  literal_t x;
  uint32_t i;

  init_random(24);
  while (n > 0) {
    for (i=0; i<8; i++) {
      a[i] = pick(24);
    }
    x = pick(24);
    f(8, a, x);
    refresh_random(24);
    n --;
  }
}




/*
 * TESTS
 */
static void all_eq_tests(void) {
  printf("\n"
	 "******************\n"
	 "*    EQ TESTS    *\n"
	 "******************\n\n");

  init();
  truth_table_test2(test_eq);
  output_test2(test_eq);
  input_test2(test_eq);
  random_tests2(100, test_eq);
  cleanup();
}

static void all_xor2_tests(void) {
  printf("\n"
	 "******************\n"
	 "*   XOR2 TESTS   *\n"
	 "******************\n\n");
  init();
  truth_table_test3(test_xor2);
  output_test3(test_xor2);
  input_test3(test_xor2);
  random_tests3(100, test_xor2);
  cleanup();
}

static void all_xor3_tests(void) {
  printf("\n"
	 "******************\n"
	 "*   XOR3 TESTS   *\n"
	 "******************\n\n");
  init();
  truth_table_test4(test_xor3);
  output_test4(test_xor3);
  input_test4(test_xor3);
  random_tests4(100, test_xor3);
  cleanup();
}

static void all_or2_tests(void) {
  printf("\n"
	 "******************\n"
	 "*   OR2 TESTS    *\n"
	 "******************\n\n");
  init();
  truth_table_test3(test_or2);
  output_test3(test_or2);
  input_test3(test_or2);
  random_tests3(100, test_or2);
  cleanup();
}

static void all_or3_tests(void) {
  printf("\n"
	 "******************\n"
	 "*   OR3 TESTS    *\n"
	 "******************\n\n");
  init();
  truth_table_test4(test_or3);
  output_test4(test_or3);
  input_test4(test_or3);
  random_tests4(100, test_or3);
  cleanup();
}

static void all_mux_tests(void) {
  printf("\n"
	 "******************\n"
	 "*   MUX TESTS    *\n"
	 "******************\n\n");
  init();
  truth_table_test4(test_mux);
  output_test4(test_mux);
  input_test4(test_mux);
  random_tests4(100, test_mux);
  cleanup();
}

static void all_cmp_tests(void) {
  printf("\n"
	 "******************\n"
	 "*   CMP TESTS    *\n"
	 "******************\n\n");
  init();
  truth_table_test4(test_cmp);
  output_test4(test_cmp);
  input_test4(test_cmp);
  random_tests4(100, test_cmp);
  cleanup();
}

static void all_maj_tests(void) {
  printf("\n"
	 "******************\n"
	 "*   MAJ TESTS    *\n"
	 "******************\n\n");
  init();
  truth_table_test4(test_maj3);
  output_test4(test_maj3);
  input_test4(test_maj3);
  random_tests4(100, test_maj3);
  cleanup();
}


/*
 * Generic or/xor: tested with 8 input
 */
static void all_xor_tests(void) {
  printf("\n"
	 "******************\n"
	 "*   XOR TESTS    *\n"
	 "******************\n\n");
  init();
  truth_table_test8var(test_xor);
  random_tests8var(1000, test_xor);
  cleanup();
}


static void all_or_tests(void) {
  printf("\n"
	 "******************\n"
	 "*    OR TESTS    *\n"
	 "******************\n\n");
  init();
  truth_table_test8var(test_or);
  random_tests8var(1000, test_or);
  cleanup();
}


/*
 * EVAL TESTS
 */
static void all_eval_eq_tests(void) {
  printf("\n"
	 "*******************\n"
	 "*  EVAL EQ TESTS  *\n"
	 "*******************\n\n");

  init();
  truth_table_test2(test_eval_eq);
  random_tests2(100, test_eval_eq);
  cleanup();
}

static void all_eval_xor2_tests(void) {
  printf("\n"
	 "********************\n"
	 "*  EVAL XOR2 TESTS  *\n"
	 "*********************\n\n");
  init();
  truth_table_test2(test_eval_xor2);
  random_tests2(100, test_eval_xor2);
  cleanup();
}

static void all_eval_xor3_tests(void) {
  printf("\n"
	 "*********************\n"
	 "*  EVAL XOR3 TESTS  *\n"
	 "*********************\n\n");
  init();
  truth_table_test3(test_eval_xor3);
  random_tests3(100, test_eval_xor3);
  cleanup();
}

static void all_eval_or2_tests(void) {
  printf("\n"
	 "********************\n"
	 "*  EVAL OR2 TESTS  *\n"
	 "********************\n\n");
  init();
  truth_table_test2(test_eval_or2);
  random_tests2(100, test_eval_or2);
  cleanup();
}

static void all_eval_or3_tests(void) {
  printf("\n"
	 "********************\n"
	 "*  EVAL OR3 TESTS  *\n"
	 "********************\n\n");
  init();
  truth_table_test3(test_eval_or3);
  random_tests3(100, test_eval_or3);
  cleanup();
}

static void all_eval_mux_tests(void) {
  printf("\n"
	 "********************\n"
	 "*  EVAL MUX TESTS  *\n"
	 "********************\n\n");
  init();
  truth_table_test3(test_eval_mux);
  random_tests3(100, test_eval_mux);
  cleanup();
}

static void all_eval_cmp_tests(void) {
  printf("\n"
	 "********************\n"
	 "*  EVAL CMP TESTS  *\n"
	 "********************\n\n");
  init();
  truth_table_test3(test_eval_cmp);
  random_tests3(100, test_eval_cmp);
  cleanup();
}

static void all_eval_maj_tests(void) {
  printf("\n"
	 "********************\n"
	 "*  EVAL MAJ TESTS  *\n"
	 "********************\n\n");
  init();
  truth_table_test3(test_eval_maj3);
  random_tests3(100, test_eval_maj3);
  cleanup();
}


/*
 * Generic or/xor: tested with 8 input
 */
static void all_eval_xor_tests(void) {
  printf("\n"
	 "********************\n"
	 "*  EVAL XOR TESTS  *\n"
	 "********************\n\n");
  init();
  truth_table_test8(test_eval_xor);
  random_tests8(1000, test_eval_xor);
  cleanup();
}


static void all_eval_or_tests(void) {
  printf("\n"
	 "*******************\n"
	 "*  EVAL OR TESTS  *\n"
	 "*******************\n\n");
  init();
  truth_table_test8(test_eval_or);
  random_tests8(1000, test_eval_or);
  cleanup();
}





int main(void) {
  all_eq_tests();
  all_xor2_tests();
  all_xor3_tests();
  all_or2_tests();
  all_or3_tests();
  all_mux_tests();
  all_cmp_tests();
  all_maj_tests();

  all_eval_eq_tests();
  all_eval_xor2_tests();
  all_eval_xor3_tests();
  all_eval_or2_tests();
  all_eval_or3_tests();
  all_eval_mux_tests();
  all_eval_cmp_tests();
  all_eval_maj_tests();

  all_xor_tests();
  all_or_tests();
  all_eval_xor_tests();
  all_eval_or_tests();

  return 0;
}
