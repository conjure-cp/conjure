(define p::bool)
(define q::bool)
(define r::bool)
(define f::(-> bool bool bool))
(assert (and (let ((x true)(y true)(z true)) (=> ( and ( f x y ) ( f y z ) ) ( f x z ))) (let ((x false)(y true)(z true)) (=> ( and ( f x y ) ( f y z ) ) ( f x z ))) (let ((x true)(y false)(z true)) (=> ( and ( f x y ) ( f y z ) ) ( f x z ))) (let ((x false)(y false)(z true)) (=> ( and ( f x y ) ( f y z ) ) ( f x z ))) (let ((x true)(y true)(z false)) (=> ( and ( f x y ) ( f y z ) ) ( f x z ))) (let ((x false)(y true)(z false)) (=> ( and ( f x y ) ( f y z ) ) ( f x z ))) (let ((x true)(y false)(z false)) (=> ( and ( f x y ) ( f y z ) ) ( f x z ))) (let ((x false)(y false)(z false)) (=> ( and ( f x y ) ( f y z ) ) ( f x z ))) ) )
(assert ( f p q ) )
(assert ( f q r ) )
(assert ( not ( f p r ) ) )
(check)
