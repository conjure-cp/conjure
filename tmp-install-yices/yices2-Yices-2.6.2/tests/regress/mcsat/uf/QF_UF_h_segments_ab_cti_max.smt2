(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_segments
query-maker: "Yices 2"
query-time: 1.289000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$8 0)
(declare-sort utt$24 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_8_24 (utt$8 utt$24 ) utt$32)
(declare-fun Extract_8_7_0_32 (utt$32 ) utt$8)
(declare-fun y$116 () Bool)
(declare-fun y$117 () Bool)
(declare-fun y$118 () Bool)
(declare-fun y$119 () Bool)
(declare-fun y$120 () Bool)
(declare-fun y$121 () Bool)
(declare-fun y$132 () Bool)
(declare-fun y$133 () Bool)
(declare-fun y$148 () Bool)
(declare-fun y$153 () Bool)
(declare-fun y$158 () Bool)
(declare-fun y$166 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$171 () Bool)
(declare-fun y$172 () Bool)
(declare-fun y$173 () Bool)
(declare-fun y$174 () Bool)
(declare-fun y$183 () Bool)
(declare-fun y$184 () Bool)
(declare-fun y$185 () Bool)
(declare-fun y$186 () Bool)
(declare-fun y$188 () Bool)
(declare-fun y$189 () Bool)
(declare-fun y$197 () Bool)
(declare-fun y$198 () Bool)
(declare-fun y$199 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$200 () Bool)
(declare-fun y$208 () Bool)
(declare-fun y$209 () Bool)
(declare-fun y$212 () Bool)
(declare-fun y$219 () Bool)
(declare-fun y$220 () Bool)
(declare-fun y$221 () Bool)
(declare-fun y$222 () Bool)
(declare-fun y$23 () utt$8)
(declare-fun y$230 () Bool)
(declare-fun y$231 () Bool)
(declare-fun y$26 () utt$8)
(declare-fun y$32 () utt$8)
(declare-fun y$35 () utt$8)
(declare-fun y$43 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$62 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$71 () Bool)
(declare-fun y$74 () Bool)
(declare-fun y$75 () Bool)
(declare-fun y$78 () Bool)
(declare-fun y$81 () Bool)
(declare-fun y$84 () Bool)
(declare-fun y$87 () Bool)
(declare-fun y$88 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$90 () Bool)
(declare-fun y$92 () Bool)
(declare-fun y$94 () Bool)
(declare-fun y$96 () Bool)
(declare-fun y$i () Bool)
(declare-fun y$i$next () Bool)
(declare-fun y$n0s24 () utt$24)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n2s8 () utt$8)
(declare-fun y$n3s32 () utt$32)
(declare-fun y$n3s8 () utt$8)
(declare-fun y$n4s32 () utt$32)
(declare-fun y$n4s8 () utt$8)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0$next () Bool)
(declare-fun y$prop0$next_op () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$s$1 () Bool)
(declare-fun y$s$11 () Bool)
(declare-fun y$s$11$next () Bool)
(declare-fun y$s$11$next_op () Bool)
(declare-fun y$s$11_op () Bool)
(declare-fun y$s$13 () Bool)
(declare-fun y$s$13$next () Bool)
(declare-fun y$s$13$next_op () Bool)
(declare-fun y$s$13_op () Bool)
(declare-fun y$s$14 () Bool)
(declare-fun y$s$14$next () Bool)
(declare-fun y$s$14$next_op () Bool)
(declare-fun y$s$14_op () Bool)
(declare-fun y$s$1_op () Bool)
(declare-fun y$s$2 () utt$8)
(declare-fun y$s$20 () utt$32)
(declare-fun y$s$20_op () utt$32)
(declare-fun y$s$21 () utt$32)
(declare-fun y$s$21_op () utt$32)
(declare-fun y$s$2_op () utt$8)
(declare-fun y$s$3 () utt$8)
(declare-fun y$s$3_op () utt$8)
(declare-fun y$s$4 () utt$8)
(declare-fun y$s$4_op () utt$8)
(declare-fun y$s$5 () utt$8)
(declare-fun y$s$5_op () utt$8)
(declare-fun y$state () utt$8)
(declare-fun y$state$next () utt$8)
(declare-fun y$state$next_rhs () utt$8)
(declare-fun y$state$next_rhs_op () utt$8)
(declare-fun y$w$1 () utt$8)
(declare-fun y$w$2 () utt$8)
(declare-fun y$w$3 () utt$32)
(declare-fun y$w$3$next () utt$32)
(declare-fun y$w$3$next_op () utt$32)
(declare-fun y$w$3_op () utt$32)
(assert (distinct y$n0s8 y$n2s8 y$n3s8 y$n4s8 y$n1s8))
(assert (distinct y$n2s32 y$n3s32 y$n1s32 y$n0s32 y$n4s32))
(assert (= y$w$3_op (Concat_32_8_24 y$state y$n0s24)))
(assert (= y$48 (= y$n0s32 y$w$3_op)))
(assert (= y$49 (= y$n1s32 y$w$3_op)))
(assert (= y$s$13_op (or y$48 y$49)))
(assert (= y$52 (= y$n2s32 y$w$3_op)))
(assert (= y$s$14_op (or y$s$13_op y$52)))
(assert (= y$55 (= y$n3s32 y$w$3_op)))
(assert (= y$s$11_op (or y$s$14_op y$55)))
(assert (= y$59 (= y$n4s32 y$w$3_op)))
(assert (= y$prop0_op (or y$s$11_op y$59)))
(assert (= y$62 (= y$prop y$prop0_op)))
(assert (= y$5 (= y$n2s8 y$state)))
(assert (= y$7 (= y$n3s8 y$state)))
(assert (= y$9 (= y$n4s8 y$state)))
(assert (= y$s$1_op (or y$5 y$7 y$9)))
(assert (= y$s$2_op (ite y$7 y$n4s8 y$n1s8)))
(assert (= y$s$3_op (ite y$9 y$n4s8 y$s$2_op)))
(assert (= y$17 (= y$n1s8 y$state)))
(assert (= y$s$21_op (ite y$i y$n2s32 y$n3s32)))
(assert (= y$26 (ite y$i y$n2s8 y$n3s8)))
(assert (= y$23 (Extract_8_7_0_32 y$s$21_op)))
(assert (= y$26 y$23))
(assert (= y$2 (= y$n0s8 y$state)))
(assert (= y$s$20_op (ite y$i y$n1s32 y$n0s32)))
(assert (= y$35 (ite y$i y$n1s8 y$n0s8)))
(assert (= y$32 (Extract_8_7_0_32 y$s$20_op)))
(assert (= y$35 y$32))
(assert (= y$s$4_op (ite y$2 y$32 y$state)))
(assert (= y$s$5_op (ite y$17 y$23 y$s$4_op)))
(assert (= y$state$next_rhs_op (ite y$s$1_op y$s$3_op y$s$5_op)))
(assert (= y$43 (= y$state$next y$state$next_rhs_op)))
(assert (= y$w$3$next_op (Concat_32_8_24 y$state$next y$n0s24)))
(assert (= (= y$n0s32 y$w$3$next_op) y$74))
(assert (= y$75 (= y$n1s32 y$w$3$next_op)))
(assert (= y$s$13$next_op (or y$74 y$75)))
(assert (= y$78 (= y$n2s32 y$w$3$next_op)))
(assert (= y$s$14$next_op (or y$s$13$next_op y$78)))
(assert (= y$81 (= y$n3s32 y$w$3$next_op)))
(assert (= y$s$11$next_op (or y$s$14$next_op y$81)))
(assert (= y$84 (= y$n4s32 y$w$3$next_op)))
(assert (= y$prop0$next_op (or y$s$11$next_op y$84)))
(assert (= y$87 (= y$prop$next y$prop0$next_op)))
(assert (= y$prop$next (not y$71)))
(assert (= y$117 (= y$n0s8 y$state$next)))
(assert (= y$118 (not (= y$n0s32 y$w$3$next_op))))
(assert (= y$119 (and y$117 y$118)))
(assert (= y$119 (not y$121)))
(assert (= (not (= y$n0s32 y$w$3_op)) y$90))
(assert (= y$116 (and y$2 y$90)))
(assert (= y$116 (not y$120)))
(assert (= (not (= y$n1s32 y$w$3_op)) y$92))
(assert (= y$172 (and y$17 y$92)))
(assert (= y$172 (not y$174)))
(assert (= (not (= y$n1s32 y$w$3$next_op)) y$148))
(assert (= y$166 (= y$n1s8 y$state$next)))
(assert (= y$171 (and y$148 y$166)))
(assert (= y$171 (not y$173)))
(assert (= y$184 (and y$prop y$62 y$121 y$120 y$43 y$87 y$71 y$174 y$173)))
(assert y$184)
(assert (distinct y$n0s8 y$n2s8 y$n3s8 y$n4s8 y$n1s8))
(assert (distinct y$n2s32 y$n3s32 y$n1s32 y$n0s32 y$n4s32))
(assert (= y$w$3$next_op (Concat_32_8_24 y$state$next y$n0s24)))
(assert (= (not (= y$n3s32 y$w$3$next_op)) y$158))
(assert (= y$188 (= y$n3s8 y$state$next)))
(assert (= y$197 (and y$158 y$188)))
(assert (= y$197 (not y$199)))
(assert y$199)
(assert (= y$w$3_op (Concat_32_8_24 y$state y$n0s24)))
(assert (= (not (= y$n3s32 y$w$3_op)) y$96))
(assert (= y$7 (= y$n3s8 y$state)))
(assert (= y$198 (and y$7 y$96)))
(assert (= y$198 (not y$208)))
(assert y$208)
(assert (distinct y$n0s8 y$n2s8 y$n3s8 y$n4s8 y$n1s8))
(assert (distinct y$n2s32 y$n3s32 y$n1s32 y$n0s32 y$n4s32))
(assert (= y$w$3$next_op (Concat_32_8_24 y$state$next y$n0s24)))
(assert (= (not (= y$n2s32 y$w$3$next_op)) y$153))
(assert (= y$212 (= y$n2s8 y$state$next)))
(assert (= y$219 (and y$153 y$212)))
(assert (= y$219 (not y$221)))
(assert y$221)
(assert (= y$w$3_op (Concat_32_8_24 y$state y$n0s24)))
(assert (= (not (= y$n2s32 y$w$3_op)) y$94))
(assert (= y$5 (= y$n2s8 y$state)))
(assert (= y$220 (and y$5 y$94)))
(assert (= y$220 (not y$230)))
(assert y$230)
(assert (distinct y$n0s8 y$n2s8 y$n3s8 y$n4s8 y$n1s8))
(assert (distinct y$n2s32 y$n3s32 y$n1s32 y$n0s32 y$n4s32))
(check-sat)
(exit)
