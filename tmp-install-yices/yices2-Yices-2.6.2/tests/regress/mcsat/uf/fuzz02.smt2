(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_UF)
(declare-sort S0 0)
(declare-fun v0 () S0)
(declare-fun v1 () S0)
(declare-fun v2 () S0)
(declare-fun f0 ( S0) S0)
(declare-fun p0 ( S0) Bool)
(assert 
(let ((e3 (f0 v2)))
(let ((e4 (f0 v0)))
(let ((e5 (f0 v1)))
(let ((e6 (p0 e5)))
(let ((e7 true))
(let ((e9 true))
(let ((e10 true))
(let ((e11 true))
(let ((e12 true))
(let ((e13 true))
(let ((e14 (= e4 e5)))
(let ((e15 false))
(let ((e23 e5))
(let ((e27 (p0 e4)))
(let ((e28 (distinct v0 v1)))
(let ((e29 true))
(let ((e30 true))
(let ((e31 (= e23 v2)))
(let ((e32 true))
(let ((e33 true))
(let ((e34 (distinct v1 e4)))
(let ((e35 true))
(let ((e36 true))
(let ((e37 true))
(let ((e38 true))
(let ((e39 true))
(let ((e40 true))
(let ((e41 true))
(let ((e42 true))
(let ((e43 true))
(let ((e44 true))
(let ((e45 true))
(let ((e46 true))
(let ((e47 false))
(let ((e48 true))
(let ((e49 true))
(let ((e50 true))
(let ((e51 true))
(let ((e52 false))
(let ((e53 true))
(let ((e54 true))
(let ((e55 false))
(let ((e56 true))
(let ((e57 (= e34 e14)))
(let ((e58 (ite e27 e55 e57)))
(let ((e59 true))
(let ((e60 (and e6 e54)))
(let ((e61 (and e60 e58)))
(let ((e62 (xor e59 e47)))
(let ((e63 (and e61 e62)))
e63
)))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
