
.. _cli:

Command Line Interface
======================

Conjure supports a number of commands.
A command is provided as the first argument to Conjure on the command line.
It is followed by a number of mandatory arguments (if any) depending on the command, and a number of optional arguments.

Some command line arguments to Conjure are positional, for example the command name.
Another example of positional arguments is the path to a file required by the ``conjure pretty`` command.
This argument can just be provided after the command name, like: ``conjure pretty myfile.essence``.

Non-positional arguments are provided using options.
Some options require an additional value to be provided.
Other options are flags and do not expect additional values.
For example the ``conjure pretty`` command takes a flag called ``--remove-unused``, which removes unused decision variables from the model before pretty printing it.
This option is a flag that takes no values.
However, the ``conjure modelling`` command takes an option called ``--output-directory``, which specifies the directory under which Conjure places its output files.
This option requires a value.

Options can have short or long names. Following the common convention, short option names are preceded by a single dash and long options names are preceded by two dashes.
For example ``--output-directory`` is a long name for an option, and ``-o`` is a short name for the same option.

The general form of a Conjure run is as follows: ``conjure [COMMAND] ... [OPTIONS]``.

Following is the list of primary commands provided by Conjure.
They can be used to generate Essence' models from Essence files, translate parameter files and solution files for a specific Essence' model, and more.

modelling
    The main act. Given a problem specification in Essence, produce constraint programming models in Essence'.
translate-parameter
    Refinement of parameter files written in Essence for a particular Essence' model. The Essence' model needs to be generated by Conjure.
translate-solution
    Translation of solutions back to Essence.
validate-solution
    Validating a solution.
solve
    This is a combined mode, and it is available for convenience.
    It runs conjure in the modelling mode followed by parameter refinement if required, then Savile Row + Minion to solve, and then solution translation.

If no primary command is provided, ``modelling`` is assumed.

Conjure also supports a few additional commands on top of the primary commands listed above.
These commands are not required for the normal operation of the tool.
They are implemented to aid development and testing.

pretty
    Pretty print as Essence file to stdout. This mode can be used to view a binary Essence file in textual form.
diff
    Diff on two Essence files. Works on models, parameters, and solutions.
type-check
    Type-checking a single Essence file.
split
    Split an Essence files to various smaller files. Useful for testing.
symmetry-detection
    Dump some JSON to be used as input to ferret for symmetry detection.
parameter-generator
    Generate an Essence model describing the instances of the problem class defined in the input Essence model. An error will be printed if the model has infinitely many instances.


Commands typically take additional arguments.
Each command provides a separate help message.
To see the command specific help message, run: ``conjure COMMAND --help``.

Help output
-----------

The following is Conjure's full help message for each command, provided for reference.
These messages may change between releases of Conjure.

.. include:: conjure-help.txt
