
@article{frisch2008essence,
  doi={10.1007/s10601-008-9047-y},
  title={Essence: A Constraint Language for Specifying Combinatorial Problems},
  author={Frisch, Alan M and Harvey, Warwick and Jefferson, Chris and Mart{\'\i}nez-Hern{\'a}ndez, Bernadette and Miguel, Ian},
  journal={Constraints},
  volume={13},
  number={3},
  pages={268--306},
  year={2008},
  publisher={Springer}
}

@article{dudeney1924puzzle,
  author={H. E. Dudeney},
  title={Perplexities},
  journal={Strand Magazine},
  volume={68},
  year={1924},
  month=jul,
  pages={94,214},
}

@article{ceschia2019second,
  author={Ceschia, Sara and Dang, Nguyen and De Causmaecker, Patrick and Haspeslagh, Stefaan and Schaerf, Andrea},
  doi={10.1007/s10479-018-2816-0},
  journal={Annals of Operations Research},
  pages={171--186},
  title={The Second International Nurse Rostering Competition},
  volume={274},
  year={2019}
}

@inproceedings{akgun2019instance,
  author={Akg{\"u}n, {\"O}zg{\"u}r and Dang, Nguyen and Miguel, Ian and Salamon, Andr{\'a}s Z. and Stone, Christopher},
  booktitle={CP 2019: Proceedings of the 25th International Conference on Principles and Practice of Constraint Programming},
  doi={10.1007/978-3-030-30048-7_1},
  editor={Schiex, Thomas and de Givry, Simon},
  Pages={3--19},
  publisher={Springer},
  series={Lecture Notes in Computer Science},
  title={Instance generation via generator instances},
  volume={11802},
  year={2019}
}

@phdthesis{hoffmann2015thesis,
  author={Hoffmann, Ruth},
  title={On dots in boxes, or Permutation pattern classes and regular languages},
  url={https://research-repository.st-andrews.ac.uk/handle/10023/7034},
  year={2015},
  school={University of St Andrews}
}









@article{ba536fe7d91a49a8924844c107ffd83e,
  title = {CONJURE: automatic generation of constraint models from problem specifications},
  abstract = {When solving a combinatorial problem, the formulation or model of the problem is critical tothe efficiency of the solver. Automating the modelling process has long been of interest because of the expertise and time required to produce an effective model of a given problem. We describe a method to automatically produce constraint models from a problem specification written in the abstract constraint specification language Essence. Our approach is to incrementally refine the specification into a concrete model by applying a chosen refinement rule at each step. Any nontrivial specification may be refined in multiple ways, creating a space of models to choose from.The handling of symmetries is a particularly important aspect of automated modelling. Many combinatorial optimisation problems contain symmetry, which can lead to redundant search. If a partial assignment is shown to be invalid, we are wasting time if we ever consider a symmetric equivalent of it. A particularly important class of symmetries are those introduced by the constraint modelling process: modelling symmetries. We show how modelling symmetries may be broken automatically as they enter a model during refinement, obviating the need for an expensive symmetry detection step following model formulation.Our approach is implemented in a system called Conjure. We compare the models producedby Conjure to constraint models from the literature that are known to be effective. Our empirical results confirm that Conjure can reproduce successfully the kernels of the constraint models of 42 benchmark problems found in the literature.},
  keywords = {Constraint satisfaction problem, Constraint modelling, Constraint programming, Combinatorial optimization},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Frisch, {Alan M.} and Gent, {Ian P.} and Christopher Jefferson and Miguel, {Ian J.} and Peter Nightingale},
  year = {2022},
  month = {sep},
  doi = {10.1016/j.artint.2022.103751},
  language = {English},
  volume = {310},
  journal = {Artificial Intelligence},
  issn = {0004-3702},
  publisher = {Elsevier},
}

@inproceedings{1436930e0d004c7fa6adee33e4c98bd6,
  title = {Understanding how people approach constraint modelling and solving},
  abstract = {Research in constraint programming typically focuses on problem solving efficiency. However, the way users conceptualise problems and communicate with constraint programming tools is often sidelined. How humans think about constraint problems can be important for the development of efficient tools that are useful to a broader audience. For example, a system incorporating knowledge on how people think about constraint problems can provide explanations to users and improve the communication between the human and the solver.We present an initial step towards a better understanding of the human side of the constraint solving process. To our knowledge, this is the first human-centred study addressing how people approach constraint modelling and solving. We observed three sets of ten users each (constraint programmers, computer scientists and non-computer scientists) and analysed how they find solutions for well-known constraint problems. We found regularities offering clues about how to design systems that are more intelligible to humans.},
  keywords = {Constraint modelling, HCI, User study, Grounded theory},
  author = {Ruth Hoffmann and Xu Zhu and {\"O}zg{\"u}r Akg{\"u}n and Miguel Nacenta},
  year = {2022},
  month = {jul},
  day = {23},
  doi = {10.4230/LIPIcs.CP.2022.28},
  language = {English},
  publisher = {Schloss Dagstuhl- Leibniz-Zentrum fur Informatik GmbH, Dagstuhl Publishing},
  editor = {Christine Solnon},
  booktitle = {28th International Conference on Principles and Practice of Constraint Programming (CP 2022)},
  url = {https://cp2022.a4cp.org/},
}

@inproceedings{c341e68df4c14ab5b77b0693aa1cc90f,
  title = {A framework for generating informative benchmark instances},
  abstract = {Benchmarking is an important tool for assessing the relative performance of alternative solving approaches. However, the utility of benchmarking is limited by the quantity and quality of the available problem instances. Modern constraint programming languages typically allow the specification of a class-level model that is parameterised over instance data. This separation presents an opportunity for automated approaches to generate instance data that define instances that are graded (solvable at a certain difficulty level for a solver) or can discriminate between two solving approaches. In this paper, we introduce a framework that combines these two properties to generate a large number of benchmark instances, purposely generated for effective and informative benchmarking. We use five problems that were used in the MiniZinc competition to demonstrate the usage of our framework. In addition to producing a ranking among solvers, our framework gives a broader understanding of the behaviour of each solver for the whole instance space; for example by finding subsets of instances where the solver performance significantly varies from its average performance.},
  keywords = {Instance generation, Benchmarking, Constraint programming},
  author = {Nguyen Dang and {\"O}zg{\"u}r Akg{\"u}n and {Espasa}, Joan and Miguel, {Ian} and Peter Nightingale},
  year = {2022},
  month = {jul},
  day = {23},
  doi = {10.4230/LIPIcs.CP.2022.18},
  language = {English},
  publisher = {Schloss Dagstuhl- Leibniz-Zentrum fur Informatik GmbH, Dagstuhl Publishing},
  editor = {Christine Solon},
  booktitle = {28th International Conference on Principles and Practice of Constraint Programming (CP 2022)},
}

@inproceedings{36323c314240451291f8377d5a4f9668,
  title = {Towards reformulating Essence specifications for robustness},
  abstract = {The Essence language allows a user to specify a constraint problem at a level of abstraction above that at which constraint modelling decisions are made. Essence specifications are refined into constraint models using the Conjure automated modelling tool, which employs a suite of refinement rules. However, Essence is a rich language in which there are many equivalent ways to specify a given problem. A user may therefore omit the use of domain attributes or abstract types, resulting in fewer refinement rules being applicable and therefore a reduced set of output models from which to select. This paper addresses the problem of recovering this information automatically to increase the robustness of the quality of the output constraint models in the face of variation in the input Essence specification. We present reformulation rules that can change the type of a decision variable or add attributes that shrink its domain. We demonstrate the efficacy of this approach in terms of the quantity and quality of models Conjure can produce from the transformed specification compared with the original. },
  author = {{\"O}zg{\"u}r Akg{\"u}n and Frisch, {Alan M.} and Gent, {Ian P.} and Christopher Jefferson and Ian Miguel and Peter Nightingale and Salamon, {Andr{\'a}s Z.}},
  year = {2021},
  month = {oct},
  day = {25},
  language = {English},
  booktitle = {ModRef 2021 - The 20th workshop on Constraint Modelling and Reformulation (ModRef)},
  url = {https://modref.github.io/ModRef2021.html},
}

@inproceedings{ae7faa006d3d4ecbb19a14df924e2088,
  title = {Efficient incremental modelling and solving},
  abstract = {In various scenarios, a single phase of modelling and solving is either not sufficient or not feasible to solve the problem at hand. A standard approach to solving AI planning problems, for example, is to incrementally extend the planning horizon and solve the problem of trying to find a plan of a particular length. Indeed, any optimization problem can be solved as a sequence of decision problems in which the objective value is incrementally updated. Another example is constraint dominance programming (CDP), in which search is organized into a sequence of levels. The contribution of this work is to enable a native interaction between SAT solvers and the automated modelling system Savile Row to support efficient incremental modelling and solving. This allows adding new decision variables, posting new constraints and removing existing constraints (via assumptions) between incremental steps. Two additional benefits of the native coupling of modelling and solving are the ability to retain learned information between SAT solver calls and to enable SAT assumptions, further improving flexibility and efficiency. Experiments on one optimisation problem and five pattern mining tasks demonstrate that the native interaction between the modelling system and SAT solver consistently improves performance significantly. },
  keywords = {Constraint programming, Constraint modelling, Incremental solving, Constraint optimization, Planning, Data mining, Itemset mining, Pattern mining, Dominance programming},
  author = {G{\"o}kberk Ko{\c c}ak and {\"O}zg{\"u}r Akg{\"u}n and Nguyen Dang and Ian Miguel},
  year = {2020},
  month = {sep},
  day = {7},
  language = {English},
  booktitle = {ModRef 2020 - The 19th workshop on Constraint Modelling and Reformulation},
  url = {https://modref.github.io/ModRef2020.html},
}


@inproceedings{d868096c9b0a428f83a1d508f98736a5,
  title = {Towards portfolios of streamlined constraint models: a case study with the balanced academic curriculum problem},
  abstract = {Augmenting a base constraint model with additional constraints can strengthen the inferences made by a solver and therefore reduce search effort. We focus on the automatic addition of streamliner constraints, derived from the types present in an abstract Essence specification of a problem class of interest, which trade completeness for potentially very significant reduction in search. The refinement of streamlined Essence specifications into constraint models suitable for input to constraint solvers gives rise to a large number of modelling choices in addition to those required for the base Essence specification. Previous automated streamlining approaches have been limited in evaluating only a single default model for each streamlined specification. In this paper we explore the effect of model selection in the context of streamlined specifications. We propose a new best-first search method that generates a portfolio of Pareto Optimal streamliner-model combinations by evaluating for each streamliner a portfolio of models to search and explore the variability in performance and find the optimal model. Various forms of racing are utilised to constrain the computational cost of training. },
  keywords = {Constraint programming, Streamliners},
  author = {Patrick Spracklen and Nguyen Dang and {\"O}zg{\"u}r Akg{\"u}n and Ian Miguel},
  year = {2020},
  month = {sep},
  day = {7},
  language = {English},
  booktitle = {ModRef 2020 - The 19th workshop on Constraint Modelling and Reformulation},
  url = {https://modref.github.io/ModRef2020.html},
}

@inproceedings{17528eb080e74cb6ac61a8387e9ac515,
  title = {Exploiting incomparability in solution dominance: improving general purpose constraint-based mining},
  abstract = {In data mining, finding interesting patterns is a challenging task. Constraint-based mining is a well-known approach to this, and one for which constraint programming has been shown to be a well-suited and generic framework. Constraint dominance programming (CDP) has been proposed as an extension that can capture an even wider class of constraint-based mining problems, by allowing us to compare relations between patterns. In this paper we improve CDP with the ability to specify an incomparability condition. This allows us to overcome two major shortcomings of CDP: finding dominated solutions that must then be filtered out after search, and unnecessarily adding dominance blocking constraints between incomparable solutions. We demonstrate the efficacy of our approach by extending the problem specification language ESSENCE and implementing it in a solver-independent manner on top of the constraint modelling tool CONJURE. Our experiments on pattern mining tasks with both a CP solver and a SAT solver show that using the incomparability condition during search significantly improves the efficiency of dominance programming and reduces (and often eliminates entirely) the need for post-processing to filter dominated solutions.},
  author = {Gokberk Kocak and {\"O}zg{\"u}r Akg{\"u}n and Tias Guns and Miguel, {Ian}},
  year = {2020},
  month = {aug},
  day = {29},
  doi = {10.3233/FAIA200110},
  language = {English},
  isbn = {9781643681009},
  publisher = {IOS Press},
  pages = {331--338},
  editor = {{De Giacomo}, Giuseppe and Alejandro Catala and Bistra Dilkina and Michela Milano and Sen{\'e}n Barro and Alberto Bugar{\'i}n and J{\'e}r{\^o}me Lang},
  booktitle = {ECAI 2020},
  address = {Netherlands},
  url = {https://ecai2020.eu/},
}

@inproceedings{04b6f9716a204104b26a8a664d101d92,
  title = {Discriminating instance generation from abstract specifications: a case study with CP and MIP},
  abstract = {We extend automatic instance generation methods to allow cross-paradigm comparisons. We demonstrate that it is possible to completely automate the search for benchmark instances that help to discriminate between solvers. Our system starts from a high level human-provided problem specification, which is translated into a specification for valid instances. We use the automated algorithm configuration tool irace to search for instances, which are translated into inputs for both MIP and CP solvers by means of the Conjure, Savile Row, and MiniZinc tools. These instances are then solved by CPLEX and Chuffed, respectively. We constrain our search for instances by requiring them to exhibit a significant advantage for MIP over CP, or vice versa. Experimental results on four optimisation problem classes demonstrate the effectiveness of our method in identifying instances that highlight differences in performance of the two solvers.},
  keywords = {Constraint Programming, Instance generation, MIP},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Nguyen Dang and Ian Miguel and Salamon, {Andr{\'a}s Z.} and Patrick Spracklen and Christopher Stone},
  year = {2020},
  doi = {10.1007/978-3-030-58942-4_3},
  language = {English},
  isbn = {9783030589417},
  publisher = {Springer},
  pages = {41--51},
  editor = {Emmanuel Hebrard and Nysret Musliu},
  booktitle = {Integration of Constraint Programming, Artificial Intelligence, and Operations Research},
  address = {Netherlands},
  url = {https://cpaior2020.dbai.tuwien.ac.at/},
}

@inproceedings{5d418525265e4c2189449a84ef9db61e,
  title = {Effective encodings of constraint programming models to SMT},
  abstract = {Satisfiability Modulo Theories (SMT) is a well-established methodology that generalises propositional satisfiability (SAT) by adding support for a variety of theories such as integer arithmetic and bit-vector operations. SMT solvers have made rapid progress in recent years. In part, the efficiency of modern SMT solvers derives from the use of specialised decision procedures for each theory. In this paper we explore how the Essence Prime constraint modelling language can be translated to the standard SMT-LIB language. We target four theories: bit-vectors (QF_BV), linear integer arithmetic (QF_LIA), non-linear integer arithmetic (QF_NIA), and integer difference logic (QF_IDL). The encodings are implemented in the constraint modelling tool Savile Row. In an extensive set of experiments, we compare our encodings for the four theories, showing some notable differences and complementary strengths. We also compare our new encodings to the existing work targeting SMT and SAT, and to a well-established learning CP solver. Our two proposed encodings targeting the theory of bit-vectors (QF_BV) both substantially outperform earlier work on encoding to QF_BV on a large and diverse set of problem classes.},
  keywords = {Constraint modelling, SMT, Automated reformulation},
  author = {Ewan Davidson and {\"O}zg{\"u}r Akg{\"u}n and {Espasa}, Joan and Peter Nightingale},
  year = {2020},
  doi = {10.1007/978-3-030-58475-7_9},
  language = {English},
  isbn = {9783030584740},
  publisher = {Springer},
  pages = {143--159},
  editor = {Helmut Simonis},
  booktitle = {Twenty-Sixth International Conference on Principles and Practice of Constraint Programming (CP 2020)},
  address = {Netherlands},
  url = {https://cp2020.a4cp.org/},
}

@inproceedings{e74974988ec540bab669443ad10422b3,
  title = {Towards improving solution dominance with incomparability conditions: a case-study using Generator Itemset Mining},
  abstract = {Finding interesting patterns is a challenging task in data mining. Constraint based mining is a well-known approach to this, and one for which constraint programming has been shown to be a well-suited and generic framework.Dominance programming has been proposed as an extension that can capture aneven wider class of constraint-based mining problems, by allowing to comparerelations between patterns. In this paper, in addition to specifying a dominancerelation, we introduce the ability to specify an incomparability condition. Usingthese two concepts we devise a generic framework that can do a batch-wise searchthat avoids checking incomparable solutions. We extend the ESSENCE languageand underlying modelling pipeline to support this. We use generator itemset mining problem as a test case and give a declarative specification for that. We alsopresent preliminary experimental results on this specific problem class with a CPsolver backend to show that using the incomparability condition during searchcan improve the efficiency of dominance programming and reduces the need forpost-processing to filter dominated solutions.},
  keywords = {Constraint programming, Constraint modelling, Data mining, Itemset mining, Pattern mining, Dominance programming},
  author = {Gokberk Kocak and {\"O}zg{\"u}r Akg{\"u}n and Ian Miguel and Tias Guns},
  year = {2019},
  month = {sep},
  day = {30},
  language = {English},
  booktitle = {The 18th workshop on Constraint Modelling and Reformulation (ModRef 2019), Proceedings},
  url = {http://cp2019.a4cp.org},
}

@article{4b54ed2e79924712bcf8e6fea3211d72,
  title = {How people visually represent discrete constraint problems},
  abstract = {Problems such as timetabling or personnel allocation can be modeled and solved using discrete constraint programming languages. However, while existing constraint solving software solves such problems quickly in many cases, these systems involve specialized languages that require significant time and effort to learn and apply. These languages are typically text-based and often difficult to interpret and understand quickly, especially for people without engineering or mathematics backgrounds. Visualization could provide an alternative way to model and understand such problems. Although many visual programming languages exist for procedural languages, visual encoding of problem specifications has not received much attention. Future problem visualization languages could represent problem elements and their constraints unambiguously, but without unnecessary cognitive burdens for those needing to translate their problem's mental representation into diagrams. As a first step towards such languages, we executed a study that catalogs how people represent constraint problems graphically. We studied three groups with different expertise: non-computer scientists, computer scientists and constraint programmers and analyzed their marks on paper (e.g., arrows), gestures (e.g., pointing) and the mappings to problem concepts (e.g., containers, sets). We provide foundations to guide future tool designs allowing people to effectively grasp, model and solve problems through visual representations.},
  keywords = {Problem visualization, Problem modeling, Problem solving, Constraint programming, Visual programming languages},
  author = {Xu Zhu and Miguel Nacenta and {\"O}zg{\"u}r Akg{\"u}n and Nightingale, {Peter}},
  year = {2019},
  month = {jan},
  day = {24},
  doi = {10.1109/TVCG.2019.2895085},
  language = {English},
  volume = {26},
  pages = {2603 -- 2619},
  journal = {IEEE Transactions on Visualization and Computer Graphics},
  issn = {1077-2626},
  publisher = {IEEE Computer Society},
  number = {8},
}

@inproceedings{ce8510eb25d34db48cd8c3c7682edfdf,
  title = {Automatic streamlining for constrained optimisation},
  abstract = {Augmenting a base constraint model with additional constraints can strengthen the inferences made by a solver and therefore reduce search effort. We focus on the automatic addition of streamliner constraints, which trade completeness for potentially very significant reduction in search. Recently an automated approach has been proposed, which produces streamliners via a set of streamliner generation rules. This existing automated approach to streamliner generation has two key limitations. First, it outputs a single streamlined model. Second, the approach is limited to satisfaction problems. We remove both limitations by providing a method to produce automatically a portfolio of streamliners, each representing a different balance between three criteria: how aggressively the search space is reduced, the proportion of training instances for which the streamliner admitted at least one solution, and the average reduction in quality of the objective value versus the unstreamlined model. In support of our new method, we present an automated approach to training and test instance generation, and provide several approaches to the selection and application of the streamliners from the portfolio. Empirical results demonstrate drastic improvements both to the time required to find good solutions early and to prove optimality on three problem classes.},
  keywords = {Constraint programming, Streamliners},
  author = {Patrick Spracklen and Nguyen Dang and {\"O}zg{\"u}r Akg{\"u}n and Miguel, {Ian}},
  year = {2019},
  doi = {10.1007/978-3-030-30048-7_22},
  language = {English},
  isbn = {9783030300470},
  publisher = {Springer},
  pages = {366--383},
  editor = {Thomas Schiex and {de Givry}, Simon},
  booktitle = {Twenty-Fifth International Conference on Principles and Practice of Constraint Programming (CP 2019)},
  address = {Netherlands},
  url = {http://cp2019.a4cp.org},
}

@inproceedings{b1d1e65f1ecf4431bc087cff9ef9b9dd,
  title = {Instance generation via generator instances},
  abstract = {Access to good benchmark instances is always desirable when developing new algorithms, new constraint models, or when comparing existing ones. Hand-written instances are of limited utility and are time-consuming to produce. A common method for generating instances is constructing special purpose programs for each class of problems. This can be better than manually producing instances, but developing such instance generators also has drawbacks. In this paper, we present a method for generating graded instances completely automatically starting from a class-level problem specification. A graded instance in our present setting is one which is neither too easy nor too difficult for a given solver. We start from an abstract problem specification written in the Essence language and provide a system to transform the problem specification, via automated type-specific rewriting rules, into a new abstract specification which we call a generator specification. The generator specification is itself parameterised by a number of integer parameters; these are used to characterise a certain region of the parameter space. The solutions of each such generator instance form valid problem instances. We use the parameter tuner irace to explore the space of possible generator parameters, aiming to find parameter values that yield graded instances. We perform an empirical evaluation of our system for five problem classes from CSPlib, demonstrating promising results.},
  keywords = {Automated modelling, Instance generation, Parameter tuning},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Nguyen Dang and Miguel, {Ian} and Salamon, {Andr{\'a}s Z.} and Stone, {Christopher}},
  year = {2019},
  doi = {10.1007/978-3-030-30048-7_1},
  language = {English},
  isbn = {9783030300470},
  publisher = {Springer},
  pages = {3--19},
  editor = {Thomas Schiex and {de Givry}, Simon},
  booktitle = {Twenty-Fifth International Conference on Principles and Practice of Constraint Programming (CP 2019)},
  address = {Netherlands},
  url = {http://cp2019.a4cp.org},
}

@inproceedings{921a03b374654acdb3cf8b608e1ef86a,
  title = {Closed frequent itemset mining with arbitrary side constraints},
  abstract = {Frequent itemset mining (FIM) is a method for finding regularities in transaction databases. It has several application areas, such as market basket analysis, genome analysis, and drug design. Finding frequent itemsets allows further analysis to focus on a small subset of the data. For large datasets the number of frequent itemsets can also be very large, defeating their purpose. Therefore, several extensions to FIM have been studied, such as adding high-utility (or low-cost) constraints and only finding closed (or maximal) frequent itemsets. This paper presents a constraint programming based approach that combines arbitrary side constraints with closed frequent itemset mining. Our approach allows arbitrary side constraints to be expressed in a high level and declarative language which is then translated automatically for efficient solution by a SAT solver. We compare our approach with state-of-the-art algorithms via the MiningZinc system (where possible) and show significant contributions in terms of performance and applicability.},
  keywords = {Data mining, Pattern mining, Frequent itemset mining, Closed frequent itemset mining, Constraint modelling},
  author = {Gokberk Kocak and {\"O}zg{\"u}r Akg{\"u}n and Miguel, {Ian} and Nightingale, {Peter}},
  year = {2018},
  month = {nov},
  day = {17},
  doi = {10.1109/ICDMW.2018.00175},
  language = {English},
  isbn = {9781538692899},
  pages = {1224 -- 1232},
  editor = {Hanghang Tong and Li, {Zhenhui (Jessie)} and Feida Zhu and Jeffrey Yu},
  booktitle = {2018 IEEE International Conference on Data Mining Workshops (ICDMW)},
  publisher = {IEEE Computer Society},
  address = {United States},
  url = {https://qizhiquan.github.io/OEDM-18/},
}

@inproceedings{8f516aac022d4bcdb34e5f63976bdd78,
  title = {Memory consistency models using constraints},
  abstract = {Memory consistency models (MCMs) are at the heart of concurrent programming. They represent the behaviour of concurrent programs at the chip level. To test these models small program snippets called litmus test are generated, which show allowed or forbidden behaviour of different MCMs. This paper is showcasing the use of constraint programming to automate the generation and testing of litmus tests for memory consistency models. We produce a few exemplary case studies for two MCMs, namely Sequential Consistency and Total Store Order. These studies demonstrate the flexibility of constrains programming in this context and lay foundation to the direct verification of MCMs against the software facing cache coherence protocols. },
  keywords = {Memory consistency, Concurrent programming, Litmus tests, Constraints programming, Modelling},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Ruth Hoffmann and Susmit Sarkar},
  year = {2018},
  month = {aug},
  day = {27},
  language = {English},
  booktitle = {The Seventeenth Workshop on Constraint Modelling and Reformulation (ModRef 2018), Proceedings},
  url = {http://cp2018.a4cp.org/},
}

@inproceedings{56bd918cab3c4a66b6fae5b71f88b1b6,
  title = {Modelling Langford's Problem: a viewpoint for search},
  abstract = {The performance of enumerating all solutions to an instance of Langford's Problem is sensitive to the model and the search strategy. In this paper we compare the performance of a large variety of models, all derived from two base viewpoints. We empirically show that a channelled model with a static branching order on one of the viewpoints offers the best performance out of all the options we consider. Surprisingly, one of the base models proves very effective for propagation, while the other provides an effective means of stating a static search order. },
  author = {{\"O}zg{\"u}r Akg{\"u}n and Ian Miguel},
  year = {2018},
  month = {aug},
  day = {27},
  language = {English},
  booktitle = {The Seventeenth Workshop on Constraint Modelling and Reformulation (ModRef 2018), Proceedings},
  url = {http://cp2018.a4cp.org/},
}

@inproceedings{413b9d1324cf4826b5ea1a130eb96159,
  title = {A framework for constraint based local search using ESSENCE},
  abstract = {Structured Neighbourhood Search (SNS) is a framework for constraint-based local search for problems expressed in the Essence abstract constraint specification language. The local search explores a structured neighbourhood, where each state in the neighbourhood preserves a high level structural feature of the problem. SNS derives highly structured problem-specific neighbourhoods automatically and directly from the features of the ESSENCE specification of the problem. Hence, neighbourhoods can represent important structural features of the problem, such as partitions of sets, even if that structure is obscured in the low-level input format required by a constraint solver. SNS expresses each neighbourhood as a constrained optimisation problem, which is solved with a constraint solver. We have implemented SNS, together with automatic generation of neighbourhoods for high level structures, and report high quality results for several optimisation problems.},
  keywords = {Constraints and SAT: constraint satisfaction, Constraints and SAT: modeling; formulation, Constraints and SAT: constraint ptimisation, Constraints and SAT: Constraints: solvers and tools},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Attieh, {Saad Wasim A} and Gent, {Ian Philip} and Jefferson, {Christopher} and Miguel, {Ian} and Nightingale, {Peter} and Salamon, {Andr{\'a}s Z.} and Patrick Spracklen and Wetter, {James Patrick}},
  year = {2018},
  month = {jul},
  day = {13},
  doi = {10.24963/ijcai.2018/173},
  language = {English},
  pages = {1242--1248},
  editor = {J{\'e}r{\^o}me Lang},
  booktitle = {Proceedings of the Twenty-Seventh International Joint Conference on Artificial Intelligence},
  publisher = {International Joint Conferences on Artificial Intelligence},
  url = {https://www.ijcai-18.org/},
}

@inproceedings{6eef5285c1a0471ebba55a9179298de8,
  title = {Automatic generation and selection of streamlined constraint models via Monte Carlo search on a model lattice},
  abstract = {Streamlined constraint reasoning is the addition of uninferred constraints to a constraint model to reduce the search space, while retaining at least one solution. Previously it has been established that it is possible to generate streamliners automatically from abstract constraint specifications in Essence and that effective combinations of streamliners can allow instances of much larger scale to be solved. A shortcoming of the previous approach was the crude exploration of the power set of all combinations using depth and breadth first search. We present a new approach based on Monte Carlo search over the lattice of streamlined models, which efficiently identifies effective streamliner combinations.},
  author = {Patrick Spracklen and {\"O}zg{\"u}r Akg{\"u}n and Miguel, {Ian}},
  year = {2018},
  doi = {10.1007/978-3-319-98334-9_24},
  language = {English},
  isbn = {9783319983332},
  publisher = {Springer},
  pages = {362--372},
  editor = {John Hooker},
  booktitle = {Twenty-Fourth International Conference on Principles and Practice of Constraint Programming (CP 2018)},
  address = {Netherlands},
}

@article{8a56ff34e5bc4dada3bcc63d391de55e,
  title = {Automatically improving constraint models in Savile Row},
  abstract = {When solving a combinatorial problem using Constraint Programming (CP) or Satisfiability (SAT), modelling and formulation are vital and difficult tasks. Even an expert human may explore many alternatives in modelling a single problem. We make a number of contributions in the automated modelling and reformulation of constraint models. We study a range of automated reformulation techniques, finding combinations of techniques which perform particularly well together. We introduce and describe in detail a new algorithm, X-CSE, to perform Associative-Commutative Common Subexpression Elimination (AC-CSE) in constraint problems, significantly improving existing CSE techniques for associative and commutative operators such as +. We demonstrate that these reformulation techniques can be integrated in a single automated constraint modelling tool, called Savile Row, whose architecture we describe. We use Savile Row as an experimental testbed to evaluate each reformulation on a set of 50 problem classes, with 596 instances in total. Our recommended reformulations are well worthwhile even including overheads, especially on harder instances where solver time dominates. With a SAT solver we observed a geometric mean of 2.15 times speedup compared to a straightforward tailored model without recommended reformulations. Using a CP solver, we obtained a geometric mean of 5.96 times speedup for instances taking over 10 seconds to solve.},
  keywords = {Constraint satisfaction, Common subexpression elimination, Modelling, Reformulation, Propositional satisfiability},
  author = {Peter Nightingale and {\"O}zg{\"u}r Akg{\"u}n and Gent, {Ian P.} and Christopher Jefferson and Ian Miguel and Patrick Spracklen},
  year = {2017},
  month = {oct},
  doi = {10.1016/j.artint.2017.07.001},
  language = {English},
  volume = {251},
  pages = {35--61},
  journal = {Artificial Intelligence},
  issn = {0004-3702},
  publisher = {Elsevier},
}

@inproceedings{9dd26cea0c54476f8d0418df430909da,
  title = {Automatically generating streamlined constraint models with ESSENCE and CONJURE},
  abstract = {Streamlined constraint reasoning is the addition of uninferred constraints to a constraint model to reduce the search space, while retaining at least one solution. Previously, effective streamlined models have been constructed by hand, requiring an expert to examine closely solutions to small instances of a problem class and identify regularities. We present a system that automatically generates many conjectured regularities for a given Essence specification of a problem class by examining the domains of decision variables present in the problem specification. These conjectures are evaluated independently and in conjunction with one another on a set of instances from the specified class via an automated modelling tool-chain comprising of Conjure, Savile Row and Minion. Once the system has identified effective conjectures they are used to generate streamlined models that allow instances of much larger scale to be solved. Our results demonstrate good models can be identified for problems in combinatorial design, Ramsey theory, graph theory and group theory - often resulting in order of magnitude speed-ups.},
  author = {James Wetter and {\"O}zg{\"u}r Akg{\"u}n and Ian Miguel},
  year = {2015},
  month = {aug},
  day = {13},
  doi = {10.1007/978-3-319-23219-5_34},
  language = {English},
  isbn = {9783319232188},
  publisher = {Springer},
  pages = {480--496},
  editor = {Gilles Pesant},
  booktitle = {Twenty-First International Conference on Principles and Practice of Constraint Programming (CP 2015)},
  address = {Netherlands},
}

@inbook{dd9347655a2d45f2bef81ebcb8778daa,
  title = {Breaking conditional symmetry in automated constraint modelling with CONJURE},
  abstract = {Many constraint problems contain symmetry, which can lead to redundant search. If a partial assignment is shown to be invalid, we are wasting time if we ever consider a symmetric equivalent of it. A particularly important class of symmetries are those introduced by the constraint modelling process: model symmetries. We present a systematic method by which the automated constraint modelling tool CONJURE can break conditional symmetry as it enters a model during refinement. Our method extends, and is compatible with, our previous work on automated symmetry breaking in CONJURE. The result is the automatic and complete removal of model symmetries for the entire problem class represented by the input specification. This applies to arbitrarily nested conditional symmetries and represents a significant step forward for automated constraint modelling.},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Ian Gent and Chris Jefferson and Ian Miguel and Peter Nightingale},
  year = {2014},
  month = {aug},
  day = {18},
  doi = {10.3233/978-1-61499-419-0-3},
  language = {English},
  isbn = {9781614994183},
  volume = {263},
  publisher = {IOS Press},
  pages = {3--8},
  editor = {Torsten Schaub and Gerhard Friedrich and Barry O'Sullivan},
  booktitle = {ECAI 2014},
  address = {Netherlands},
}

@misc{0ef98e79e0bd426eb92227f281f4ee4e,
  title = {Extensible automated constraint modelling via refinement of abstract problem specifications},
  abstract = {Constraint Programming (CP) is a powerful technique for solving large-scale combinatorial (optimisation) problems. Constraint solving a given problem proceeds in two phases: modelling and solving. Effective modelling has an huge impact on the performance of the solving process. This thesis presents a framework in which the users are not required to make modelling decisions, concrete CP models are automatically generated from a high level problem specification. In this framework, modelling decisions are encoded as generic rewrite rules applicable to many different problems. First, modelling decisions are divided into two broad categories. This categorisation guides the automation of each kind of modelling decision and also leads us to the architecture of the automated modelling tool. Second, a domain-specific declarative rewrite rule language is introduced. Thanks to the rule language, automated modelling transformations and the core system are decoupled. The rule language greatly increases the extensibility and maintainability of the rewrite rules database. The database of rules represents the modelling knowledge acquired after analysis of expert models. This database must be easily extensible to best benefit from the active research on constraint modelling. Third, the automated modelling system Conjure is implemented as a realisation of these ideas; having an implementation enables empirical testing of the quality of generated models. The ease with which rewrite rules can be encoded to produce good models is shown. Furthermore, thanks to the generality of the system, one needs to add a very small number of rules to encode many transformations. Finally, the work is evaluated by comparing the generated models to expert models found in the literature for a wide variety of benchmark problems. This evaluation confirms the hypothesis that expert models can be automatically generated starting from high level problem specifications. An method of automatically identifying good models is also presented. In summary, this thesis presents a framework to enable the automatic generation of efficient constraint models from problem specifications. It provides a pleasant environment for both problem owners and modelling experts. Problem owners are presented with a fully automated constraint solution process, once they have a precise description of their problem. Modelling experts can now encode their precious modelling expertise as rewrite rules instead of merely modelling a single problem; resulting in reusable constraint modelling knowledge.},
  author = {{\"O}zg{\"u}r Akg{\"u}n},
  year = {2014},
  language = {English},
  publisher = {University of St Andrews},
  url = {http://hdl.handle.net/10023/6547},
}

@inproceedings{ec7a3b357c8b4af4ba335c281ea87ba3,
  title = {An Automated Constraint Modelling and Solving Toolchain},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Frisch, {Alan M} and Gent, {Ian Philip} and Hussain, {Bilal Syed} and Jefferson, {Christopher} and Lars Kotthoff and Miguel, {Ian} and Nightingale, {Peter}},
  year = {2013},
  language = {English},
  booktitle = {ARW 2013 - 20th Automated Reasoning Workshop},
  url = {http://staff.computing.dundee.ac.uk/katya/arw13/papers/paper_13.pdf},
}

@inproceedings{dfc0e4b721844d9d801fb27c264086ff,
  title = {Automated Modelling and Model Selection in Constraint Programming: Current Achievements and Future Directions},
  abstract = {In attacking the modelling bottleneck, we present current achievements in automated model generation and selection in constraint programming (CP). We also discuss promising future directions in automated model selection, which we believe are of key importance in enabling successful automated modelling in CP.},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Frisch, {Alan M} and Jefferson, {Christopher} and Miguel, {Ian}},
  year = {2013},
  language = {English},
  booktitle = {COSpeL: The first Workshop on Domain Specific Languages in Combinatorial Optimization},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.388.5906&rep=rep1&type=pdf},
}

@inproceedings{066dfdbd563a40c68df2eaae83a342cd,
  title = {Automated Symmetry Breaking and Model Selection in Conjure},
  abstract = {Constraint modelling is widely recognised as a key bottleneck in applying constraint solving to a problem of interest. The Conjure automated constraint modelling system addresses this problem by automatically refining constraint models from problem specifications written in the Essence language. Essence provides familiar mathematical concepts like sets, functions and relations nested to any depth. To date, Conjure has been able to produce a set of alternative model kernels (i.e. without advanced features such as symmetry breaking or implied constraints) for a given specification. The first contribution of this paper is a method by which Conjure can break symmetry in a model as it is introduced by the modelling process. This works at the problem class level, rather than just individual instances, and does not require an expensive detection step after the model has been formulated. This allows Conjure to produce a higher quality set of models. A further limitation of Conjure has been the lack of a mechanism to select among the models it produces. The second contribution of this paper is to present two such mechanisms, allowing effective models to be chosen automatically.},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Frisch, {Alan M} and Gent, {Ian Philip} and Hussain, {Bilal Syed} and Jefferson, {Christopher} and Lars Kotthoff and Miguel, {Ian} and Nightingale, {Peter}},
  year = {2013},
  doi = {10.1007/978-3-642-40627-0_11},
  language = {English},
  booktitle = {CP 2013 - Principles and Practice of Constraint Programming, 19th International Conference},
}

@inproceedings{ed9a3c921f40425b964217636a5af521,
  title = {Extensible Automated Constraint Modelling},
  abstract = {In constraint solving, a critical bottleneck is the formulation of an effective constraint model of a given problem. The CONJURE system described in this paper, a substantial step forward over prototype versions of CONJURE previously reported, makes a valuable contribution to the automation of constraint modelling by automatically producing constraint models from their specifications in the abstract constraint specification language ESSENCE. A set of rules is used to refine an abstract specification into a concrete constraint model. We demonstrate that this set of rules is readily extensible to increase the space of possible constraint models CONJURE can produce. Our empirical results confirm that CONJURE can reproduce successfully the kernels of the constraint models of 32 benchmark problems found in the literature.},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Miguel, {Ian} and Jefferson, {Christopher} and Frisch, {Alan M.} and Brahim Hnich},
  year = {2011},
  language = {English},
  isbn = {978-157735508-3},
  pages = {4--11},
  booktitle = {Proceedings of the Twenty-Fifth AAAI Conference on Artificial Intelligence},
  publisher = {AAAI Press},
  url = {http://www.aaai.org/ocs/index.php/AAAI/AAAI11/paper/view/3687},
}

@inproceedings{ecb8ca42a8eb4098a685daa84c821da3,
  title = {The Open Stacks Problem: An automated modelling case study},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Miguel, {Ian} and Jefferson, {Christopher}},
  year = {2011},
  language = {English},
  pages = {15},
  booktitle = {ERCIM Workshop on Constraint Solving and Constraint Logic Programming},
  url = {https://csclp2011.cs.st-andrews.ac.uk/csclp2011proceedings.pdf#page=21},
}

@inbook{aee46a0c83b14b25b687813677855191,
  title = {Conjure Revisited: Towards Automated Constraint Modelling},
  abstract = {Automating the constraint modelling process is one of thekey challenges facing the constraints field, and one of the principal obstaclespreventing widespread adoption of constraint solving. This paperfocuses on the refinement-based approach to automated modelling, wherea user specifies a problem in an abstract constraint specification languageand it is then automatically refined into a constraint model. In particular,we revisit the Conjure system that first appeared in prototype formin 2005 and present a new implementation with a much greater coverageof the specification language Essence},
  author = {{\"O}zg{\"u}r Akg{\"u}n and Frisch, {Alan M} and Brahim Hnich and Jefferson, {Christopher} and Miguel, {Ian}},
  year = {2010},
  language = {English},
  booktitle = {ModRef 2010 - The 9th International Workshop on Constraint Modelling and Reformulation},
  publisher={},
  url = {https://www.it.uu.se/research/group/astra/ModRef10/papers/Ozgur%20Akgun,%20Alan%20Frisch,%20Brahim%20Hnich,%20Chris%20Jefferson%20and%20Ian%20Miguel.%20%20Conjure%20Revisited,%20Towards%20Automated%20Constraint%20Modelling%20-%20ModRef%202010.pdf},
}

@inproceedings{586c88ee08c1404391bc48c26d66e523,
  title = {Refining Portfolios of Constraint Models with Conjure},
  abstract = {Modelling is one of the key challenges in Constraint Programming(CP). There are many ways in which to model a given problem.The model chosen has a substantial effect on the solving efficiency. Itis difficult to know what the best model is. To overcome this problem wetake a portfolio approach: Given a high level specification of a combinatorialproblem, we employ non-deterministic rewrite techniques to obtaina portfolio of constraint models. The specification language (Essence)does not require humans to make modelling decisions; therefore it helpsus remove the modelling bottleneck.},
  author = {{\"O}zg{\"u}r Akg{\"u}n},
  year = {2010},
  language = {English},
  pages = {1--6},
  booktitle = {CP 2010 - Principles and Practice of Constraint Programming, 16th International Conference, Doctoral Program},
  url = {https://arxiv.org/pdf/1109.1774.pdf},
},
}


